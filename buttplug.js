(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["buttplug-commonjs"] = factory();
	else
		root["Buttplug"] = factory();
})(window, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// install a JSONP callback for chunk loading
/******/ 	function webpackJsonpCallback(data) {
/******/ 		var chunkIds = data[0];
/******/ 		var moreModules = data[1];
/******/
/******/ 		var prefetchChunks = data[3] || [];
/******/ 		// add "moreModules" to the modules object,
/******/ 		// then flag all "chunkIds" as loaded and fire callback
/******/ 		var moduleId, chunkId, i = 0, resolves = [];
/******/ 		for(;i < chunkIds.length; i++) {
/******/ 			chunkId = chunkIds[i];
/******/ 			if(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 				resolves.push(installedChunks[chunkId][0]);
/******/ 			}
/******/ 			installedChunks[chunkId] = 0;
/******/ 		}
/******/ 		for(moduleId in moreModules) {
/******/ 			if(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {
/******/ 				modules[moduleId] = moreModules[moduleId];
/******/ 			}
/******/ 		}
/******/ 		if(parentJsonpFunction) parentJsonpFunction(data);
/******/ 		// chunk prefetching for javascript
/******/ 		prefetchChunks.forEach(function(chunkId) {
/******/ 			if(installedChunks[chunkId] === undefined) {
/******/ 				installedChunks[chunkId] = null;
/******/ 				var link = document.createElement('link');
/******/
/******/ 				if (__webpack_require__.nc) {
/******/ 					link.setAttribute("nonce", __webpack_require__.nc);
/******/ 				}
/******/ 				link.rel = "prefetch";
/******/ 				link.as = "script";
/******/ 				link.href = jsonpScriptSrc(chunkId);
/******/ 				document.head.appendChild(link);
/******/ 			}
/******/ 		});
/******/ 		while(resolves.length) {
/******/ 			resolves.shift()();
/******/ 		}
/******/
/******/ 	};
/******/
/******/
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// object to store loaded and loading chunks
/******/ 	// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 	// Promise = chunk loading, 0 = chunk loaded
/******/ 	var installedChunks = {
/******/ 		"main": 0
/******/ 	};
/******/
/******/
/******/
/******/ 	// script path function
/******/ 	function jsonpScriptSrc(chunkId) {
/******/ 		return __webpack_require__.p + "" + chunkId + ".buttplug.js"
/******/ 	}
/******/
/******/ 	// object to store loaded and loading wasm modules
/******/ 	var installedWasmModules = {};
/******/
/******/ 	function promiseResolve() { return Promise.resolve(); }
/******/
/******/ 	var wasmImportObjects = {
/******/ 		"./src/buttplug-rs-ffi/buttplug_rs_ffi_bg.wasm": function() {
/******/ 			return {
/******/ 				"./buttplug_rs_ffi_bg.js": {
/******/ 					"__wbindgen_object_drop_ref": function(p0i32) {
/******/ 						return installedModules["./src/buttplug-rs-ffi/buttplug_rs_ffi_bg.js"].exports["__wbindgen_object_drop_ref"](p0i32);
/******/ 					},
/******/ 					"__wbindgen_object_clone_ref": function(p0i32) {
/******/ 						return installedModules["./src/buttplug-rs-ffi/buttplug_rs_ffi_bg.js"].exports["__wbindgen_object_clone_ref"](p0i32);
/******/ 					},
/******/ 					"__wbg_log_e6bbcfdff8337573": function(p0i32,p1i32) {
/******/ 						return installedModules["./src/buttplug-rs-ffi/buttplug_rs_ffi_bg.js"].exports["__wbg_log_e6bbcfdff8337573"](p0i32,p1i32);
/******/ 					},
/******/ 					"__wbindgen_string_new": function(p0i32,p1i32) {
/******/ 						return installedModules["./src/buttplug-rs-ffi/buttplug_rs_ffi_bg.js"].exports["__wbindgen_string_new"](p0i32,p1i32);
/******/ 					},
/******/ 					"__wbindgen_cb_drop": function(p0i32) {
/******/ 						return installedModules["./src/buttplug-rs-ffi/buttplug_rs_ffi_bg.js"].exports["__wbindgen_cb_drop"](p0i32);
/******/ 					},
/******/ 					"__wbg_new_59cb74e423758ede": function() {
/******/ 						return installedModules["./src/buttplug-rs-ffi/buttplug_rs_ffi_bg.js"].exports["__wbg_new_59cb74e423758ede"]();
/******/ 					},
/******/ 					"__wbg_stack_558ba5917b466edd": function(p0i32,p1i32) {
/******/ 						return installedModules["./src/buttplug-rs-ffi/buttplug_rs_ffi_bg.js"].exports["__wbg_stack_558ba5917b466edd"](p0i32,p1i32);
/******/ 					},
/******/ 					"__wbg_error_4bb6c2a97407129a": function(p0i32,p1i32) {
/******/ 						return installedModules["./src/buttplug-rs-ffi/buttplug_rs_ffi_bg.js"].exports["__wbg_error_4bb6c2a97407129a"](p0i32,p1i32);
/******/ 					},
/******/ 					"__wbg_log_b7dcb3facc73166d": function(p0i32,p1i32) {
/******/ 						return installedModules["./src/buttplug-rs-ffi/buttplug_rs_ffi_bg.js"].exports["__wbg_log_b7dcb3facc73166d"](p0i32,p1i32);
/******/ 					},
/******/ 					"__wbg_log_96295d68ab8338df": function(p0i32,p1i32,p2i32,p3i32,p4i32,p5i32,p6i32,p7i32) {
/******/ 						return installedModules["./src/buttplug-rs-ffi/buttplug_rs_ffi_bg.js"].exports["__wbg_log_96295d68ab8338df"](p0i32,p1i32,p2i32,p3i32,p4i32,p5i32,p6i32,p7i32);
/******/ 					},
/******/ 					"__wbg_mark_55c5ecfe509deb6a": function(p0i32,p1i32) {
/******/ 						return installedModules["./src/buttplug-rs-ffi/buttplug_rs_ffi_bg.js"].exports["__wbg_mark_55c5ecfe509deb6a"](p0i32,p1i32);
/******/ 					},
/******/ 					"__wbg_measure_608563106d70d48a": function(p0i32,p1i32,p2i32,p3i32) {
/******/ 						return installedModules["./src/buttplug-rs-ffi/buttplug_rs_ffi_bg.js"].exports["__wbg_measure_608563106d70d48a"](p0i32,p1i32,p2i32,p3i32);
/******/ 					},
/******/ 					"__wbg_Window_f826a1dec163bacb": function(p0i32) {
/******/ 						return installedModules["./src/buttplug-rs-ffi/buttplug_rs_ffi_bg.js"].exports["__wbg_Window_f826a1dec163bacb"](p0i32);
/******/ 					},
/******/ 					"__wbindgen_is_undefined": function(p0i32) {
/******/ 						return installedModules["./src/buttplug-rs-ffi/buttplug_rs_ffi_bg.js"].exports["__wbindgen_is_undefined"](p0i32);
/******/ 					},
/******/ 					"__wbg_WorkerGlobalScope_967d186155183d38": function(p0i32) {
/******/ 						return installedModules["./src/buttplug-rs-ffi/buttplug_rs_ffi_bg.js"].exports["__wbg_WorkerGlobalScope_967d186155183d38"](p0i32);
/******/ 					},
/******/ 					"__wbg_instanceof_Window_5993230e7331f098": function(p0i32) {
/******/ 						return installedModules["./src/buttplug-rs-ffi/buttplug_rs_ffi_bg.js"].exports["__wbg_instanceof_Window_5993230e7331f098"](p0i32);
/******/ 					},
/******/ 					"__wbg_navigator_da501e0baab77d64": function(p0i32) {
/******/ 						return installedModules["./src/buttplug-rs-ffi/buttplug_rs_ffi_bg.js"].exports["__wbg_navigator_da501e0baab77d64"](p0i32);
/******/ 					},
/******/ 					"__wbg_clearTimeout_4fe71f721d0606af": function(p0i32,p1i32) {
/******/ 						return installedModules["./src/buttplug-rs-ffi/buttplug_rs_ffi_bg.js"].exports["__wbg_clearTimeout_4fe71f721d0606af"](p0i32,p1i32);
/******/ 					},
/******/ 					"__wbg_setTimeout_d75246e77e993c5d": function(p0i32,p1i32,p2i32) {
/******/ 						return installedModules["./src/buttplug-rs-ffi/buttplug_rs_ffi_bg.js"].exports["__wbg_setTimeout_d75246e77e993c5d"](p0i32,p1i32,p2i32);
/******/ 					},
/******/ 					"__wbg_getCharacteristic_c7f9dcc72f7a86f6": function(p0i32,p1i32,p2i32) {
/******/ 						return installedModules["./src/buttplug-rs-ffi/buttplug_rs_ffi_bg.js"].exports["__wbg_getCharacteristic_c7f9dcc72f7a86f6"](p0i32,p1i32,p2i32);
/******/ 					},
/******/ 					"__wbg_value_ce5e4fe742d36a1c": function(p0i32) {
/******/ 						return installedModules["./src/buttplug-rs-ffi/buttplug_rs_ffi_bg.js"].exports["__wbg_value_ce5e4fe742d36a1c"](p0i32);
/******/ 					},
/******/ 					"__wbg_setoncharacteristicvaluechanged_ece60eda828cb0ef": function(p0i32,p1i32) {
/******/ 						return installedModules["./src/buttplug-rs-ffi/buttplug_rs_ffi_bg.js"].exports["__wbg_setoncharacteristicvaluechanged_ece60eda828cb0ef"](p0i32,p1i32);
/******/ 					},
/******/ 					"__wbg_readValue_988440034a0e12ce": function(p0i32) {
/******/ 						return installedModules["./src/buttplug-rs-ffi/buttplug_rs_ffi_bg.js"].exports["__wbg_readValue_988440034a0e12ce"](p0i32);
/******/ 					},
/******/ 					"__wbg_startNotifications_c88eeb920d1eb45c": function(p0i32) {
/******/ 						return installedModules["./src/buttplug-rs-ffi/buttplug_rs_ffi_bg.js"].exports["__wbg_startNotifications_c88eeb920d1eb45c"](p0i32);
/******/ 					},
/******/ 					"__wbg_writeValue_1c451e0da8c56ca9": function(p0i32,p1i32,p2i32) {
/******/ 						return installedModules["./src/buttplug-rs-ffi/buttplug_rs_ffi_bg.js"].exports["__wbg_writeValue_1c451e0da8c56ca9"](p0i32,p1i32,p2i32);
/******/ 					},
/******/ 					"__wbg_target_90b16facc122062f": function(p0i32) {
/******/ 						return installedModules["./src/buttplug-rs-ffi/buttplug_rs_ffi_bg.js"].exports["__wbg_target_90b16facc122062f"](p0i32);
/******/ 					},
/******/ 					"__wbg_requestDevice_2d1b71cc28a67a5a": function(p0i32,p1i32) {
/******/ 						return installedModules["./src/buttplug-rs-ffi/buttplug_rs_ffi_bg.js"].exports["__wbg_requestDevice_2d1b71cc28a67a5a"](p0i32,p1i32);
/******/ 					},
/******/ 					"__wbg_id_45ecf3258c9f7dd7": function(p0i32,p1i32) {
/******/ 						return installedModules["./src/buttplug-rs-ffi/buttplug_rs_ffi_bg.js"].exports["__wbg_id_45ecf3258c9f7dd7"](p0i32,p1i32);
/******/ 					},
/******/ 					"__wbg_name_fe9ee17e821ecea5": function(p0i32,p1i32) {
/******/ 						return installedModules["./src/buttplug-rs-ffi/buttplug_rs_ffi_bg.js"].exports["__wbg_name_fe9ee17e821ecea5"](p0i32,p1i32);
/******/ 					},
/******/ 					"__wbg_gatt_99df2e5380097484": function(p0i32) {
/******/ 						return installedModules["./src/buttplug-rs-ffi/buttplug_rs_ffi_bg.js"].exports["__wbg_gatt_99df2e5380097484"](p0i32);
/******/ 					},
/******/ 					"__wbg_setongattserverdisconnected_80e78a9d86abdf7b": function(p0i32,p1i32) {
/******/ 						return installedModules["./src/buttplug-rs-ffi/buttplug_rs_ffi_bg.js"].exports["__wbg_setongattserverdisconnected_80e78a9d86abdf7b"](p0i32,p1i32);
/******/ 					},
/******/ 					"__wbg_clearTimeout_af54ac34efe00770": function(p0i32,p1i32) {
/******/ 						return installedModules["./src/buttplug-rs-ffi/buttplug_rs_ffi_bg.js"].exports["__wbg_clearTimeout_af54ac34efe00770"](p0i32,p1i32);
/******/ 					},
/******/ 					"__wbg_setTimeout_c5be4c054c4d7da5": function(p0i32,p1i32,p2i32) {
/******/ 						return installedModules["./src/buttplug-rs-ffi/buttplug_rs_ffi_bg.js"].exports["__wbg_setTimeout_c5be4c054c4d7da5"](p0i32,p1i32,p2i32);
/******/ 					},
/******/ 					"__wbg_bluetooth_18ee05df03af2352": function(p0i32) {
/******/ 						return installedModules["./src/buttplug-rs-ffi/buttplug_rs_ffi_bg.js"].exports["__wbg_bluetooth_18ee05df03af2352"](p0i32);
/******/ 					},
/******/ 					"__wbg_setonopen_c3975a4f895a052a": function(p0i32,p1i32) {
/******/ 						return installedModules["./src/buttplug-rs-ffi/buttplug_rs_ffi_bg.js"].exports["__wbg_setonopen_c3975a4f895a052a"](p0i32,p1i32);
/******/ 					},
/******/ 					"__wbg_setonerror_add0a293158012fc": function(p0i32,p1i32) {
/******/ 						return installedModules["./src/buttplug-rs-ffi/buttplug_rs_ffi_bg.js"].exports["__wbg_setonerror_add0a293158012fc"](p0i32,p1i32);
/******/ 					},
/******/ 					"__wbg_setonmessage_0d42c79be06de84f": function(p0i32,p1i32) {
/******/ 						return installedModules["./src/buttplug-rs-ffi/buttplug_rs_ffi_bg.js"].exports["__wbg_setonmessage_0d42c79be06de84f"](p0i32,p1i32);
/******/ 					},
/******/ 					"__wbg_new_fd9f3bfb89d96362": function(p0i32,p1i32) {
/******/ 						return installedModules["./src/buttplug-rs-ffi/buttplug_rs_ffi_bg.js"].exports["__wbg_new_fd9f3bfb89d96362"](p0i32,p1i32);
/******/ 					},
/******/ 					"__wbg_close_3797d4fae932c9b9": function(p0i32) {
/******/ 						return installedModules["./src/buttplug-rs-ffi/buttplug_rs_ffi_bg.js"].exports["__wbg_close_3797d4fae932c9b9"](p0i32);
/******/ 					},
/******/ 					"__wbg_send_ca85b0e6799803ef": function(p0i32,p1i32,p2i32) {
/******/ 						return installedModules["./src/buttplug-rs-ffi/buttplug_rs_ffi_bg.js"].exports["__wbg_send_ca85b0e6799803ef"](p0i32,p1i32,p2i32);
/******/ 					},
/******/ 					"__wbg_connect_d31afa0760e2294e": function(p0i32) {
/******/ 						return installedModules["./src/buttplug-rs-ffi/buttplug_rs_ffi_bg.js"].exports["__wbg_connect_d31afa0760e2294e"](p0i32);
/******/ 					},
/******/ 					"__wbg_getPrimaryService_903e198e60097b4a": function(p0i32,p1i32,p2i32) {
/******/ 						return installedModules["./src/buttplug-rs-ffi/buttplug_rs_ffi_bg.js"].exports["__wbg_getPrimaryService_903e198e60097b4a"](p0i32,p1i32,p2i32);
/******/ 					},
/******/ 					"__wbg_data_437e74b835241e70": function(p0i32) {
/******/ 						return installedModules["./src/buttplug-rs-ffi/buttplug_rs_ffi_bg.js"].exports["__wbg_data_437e74b835241e70"](p0i32);
/******/ 					},
/******/ 					"__wbg_call_e5847d15cc228e4f": function(p0i32,p1i32) {
/******/ 						return installedModules["./src/buttplug-rs-ffi/buttplug_rs_ffi_bg.js"].exports["__wbg_call_e5847d15cc228e4f"](p0i32,p1i32);
/******/ 					},
/******/ 					"__wbg_new_7c995f2adeba6fb5": function() {
/******/ 						return installedModules["./src/buttplug-rs-ffi/buttplug_rs_ffi_bg.js"].exports["__wbg_new_7c995f2adeba6fb5"]();
/******/ 					},
/******/ 					"__wbg_push_3f7c76b58919ce0d": function(p0i32,p1i32) {
/******/ 						return installedModules["./src/buttplug-rs-ffi/buttplug_rs_ffi_bg.js"].exports["__wbg_push_3f7c76b58919ce0d"](p0i32,p1i32);
/******/ 					},
/******/ 					"__wbg_buffer_32296c67828fee6c": function(p0i32) {
/******/ 						return installedModules["./src/buttplug-rs-ffi/buttplug_rs_ffi_bg.js"].exports["__wbg_buffer_32296c67828fee6c"](p0i32);
/******/ 					},
/******/ 					"__wbg_byteLength_da948e1afd83c8f8": function(p0i32) {
/******/ 						return installedModules["./src/buttplug-rs-ffi/buttplug_rs_ffi_bg.js"].exports["__wbg_byteLength_da948e1afd83c8f8"](p0i32);
/******/ 					},
/******/ 					"__wbg_newnoargs_2349ba6aefe72376": function(p0i32,p1i32) {
/******/ 						return installedModules["./src/buttplug-rs-ffi/buttplug_rs_ffi_bg.js"].exports["__wbg_newnoargs_2349ba6aefe72376"](p0i32,p1i32);
/******/ 					},
/******/ 					"__wbg_call_d63edb857edf16f6": function(p0i32,p1i32,p2i32) {
/******/ 						return installedModules["./src/buttplug-rs-ffi/buttplug_rs_ffi_bg.js"].exports["__wbg_call_d63edb857edf16f6"](p0i32,p1i32,p2i32);
/******/ 					},
/******/ 					"__wbg_new_59986c8731bebaa1": function() {
/******/ 						return installedModules["./src/buttplug-rs-ffi/buttplug_rs_ffi_bg.js"].exports["__wbg_new_59986c8731bebaa1"]();
/******/ 					},
/******/ 					"__wbg_resolve_e0690143406c88cb": function(p0i32) {
/******/ 						return installedModules["./src/buttplug-rs-ffi/buttplug_rs_ffi_bg.js"].exports["__wbg_resolve_e0690143406c88cb"](p0i32);
/******/ 					},
/******/ 					"__wbg_then_9caf23122e4fd5d3": function(p0i32,p1i32) {
/******/ 						return installedModules["./src/buttplug-rs-ffi/buttplug_rs_ffi_bg.js"].exports["__wbg_then_9caf23122e4fd5d3"](p0i32,p1i32);
/******/ 					},
/******/ 					"__wbg_then_16663faf60ffbe95": function(p0i32,p1i32,p2i32) {
/******/ 						return installedModules["./src/buttplug-rs-ffi/buttplug_rs_ffi_bg.js"].exports["__wbg_then_16663faf60ffbe95"](p0i32,p1i32,p2i32);
/******/ 					},
/******/ 					"__wbg_self_35a0fda3eb965abe": function() {
/******/ 						return installedModules["./src/buttplug-rs-ffi/buttplug_rs_ffi_bg.js"].exports["__wbg_self_35a0fda3eb965abe"]();
/******/ 					},
/******/ 					"__wbg_window_88a6f88dd3a474f1": function() {
/******/ 						return installedModules["./src/buttplug-rs-ffi/buttplug_rs_ffi_bg.js"].exports["__wbg_window_88a6f88dd3a474f1"]();
/******/ 					},
/******/ 					"__wbg_globalThis_1d843c4ad7b6a1f5": function() {
/******/ 						return installedModules["./src/buttplug-rs-ffi/buttplug_rs_ffi_bg.js"].exports["__wbg_globalThis_1d843c4ad7b6a1f5"]();
/******/ 					},
/******/ 					"__wbg_global_294ce70448e8fbbf": function() {
/******/ 						return installedModules["./src/buttplug-rs-ffi/buttplug_rs_ffi_bg.js"].exports["__wbg_global_294ce70448e8fbbf"]();
/******/ 					},
/******/ 					"__wbg_buffer_0be9fb426f2dd82b": function(p0i32) {
/******/ 						return installedModules["./src/buttplug-rs-ffi/buttplug_rs_ffi_bg.js"].exports["__wbg_buffer_0be9fb426f2dd82b"](p0i32);
/******/ 					},
/******/ 					"__wbg_newwithbyteoffsetandlength_85b7ce82b001ea08": function(p0i32,p1i32,p2i32) {
/******/ 						return installedModules["./src/buttplug-rs-ffi/buttplug_rs_ffi_bg.js"].exports["__wbg_newwithbyteoffsetandlength_85b7ce82b001ea08"](p0i32,p1i32,p2i32);
/******/ 					},
/******/ 					"__wbg_length_3a5138f465b971ad": function(p0i32) {
/******/ 						return installedModules["./src/buttplug-rs-ffi/buttplug_rs_ffi_bg.js"].exports["__wbg_length_3a5138f465b971ad"](p0i32);
/******/ 					},
/******/ 					"__wbg_new_4e8d18dbf9cd5240": function(p0i32) {
/******/ 						return installedModules["./src/buttplug-rs-ffi/buttplug_rs_ffi_bg.js"].exports["__wbg_new_4e8d18dbf9cd5240"](p0i32);
/******/ 					},
/******/ 					"__wbg_set_4769de301eb521d7": function(p0i32,p1i32,p2i32) {
/******/ 						return installedModules["./src/buttplug-rs-ffi/buttplug_rs_ffi_bg.js"].exports["__wbg_set_4769de301eb521d7"](p0i32,p1i32,p2i32);
/******/ 					},
/******/ 					"__wbg_newwithbyteoffset_0a6b0ce9d45270c3": function(p0i32,p1i32) {
/******/ 						return installedModules["./src/buttplug-rs-ffi/buttplug_rs_ffi_bg.js"].exports["__wbg_newwithbyteoffset_0a6b0ce9d45270c3"](p0i32,p1i32);
/******/ 					},
/******/ 					"__wbg_set_7e15d36563072b19": function(p0i32,p1i32,p2i32) {
/******/ 						return installedModules["./src/buttplug-rs-ffi/buttplug_rs_ffi_bg.js"].exports["__wbg_set_7e15d36563072b19"](p0i32,p1i32,p2i32);
/******/ 					},
/******/ 					"__wbg_getRandomValues_11115a852729f4e8": function(p0i32,p1i32,p2i32) {
/******/ 						return installedModules["./src/buttplug-rs-ffi/buttplug_rs_ffi_bg.js"].exports["__wbg_getRandomValues_11115a852729f4e8"](p0i32,p1i32,p2i32);
/******/ 					},
/******/ 					"__wbg_randomFillSync_a2d002fc3b8e30f7": function(p0i32,p1i32,p2i32) {
/******/ 						return installedModules["./src/buttplug-rs-ffi/buttplug_rs_ffi_bg.js"].exports["__wbg_randomFillSync_a2d002fc3b8e30f7"](p0i32,p1i32,p2i32);
/******/ 					},
/******/ 					"__wbg_self_a5f0fe5564782787": function() {
/******/ 						return installedModules["./src/buttplug-rs-ffi/buttplug_rs_ffi_bg.js"].exports["__wbg_self_a5f0fe5564782787"]();
/******/ 					},
/******/ 					"__wbg_static_accessor_MODULE_7f278c5446c126c8": function() {
/******/ 						return installedModules["./src/buttplug-rs-ffi/buttplug_rs_ffi_bg.js"].exports["__wbg_static_accessor_MODULE_7f278c5446c126c8"]();
/******/ 					},
/******/ 					"__wbg_require_29e58b5f6f133563": function(p0i32,p1i32,p2i32) {
/******/ 						return installedModules["./src/buttplug-rs-ffi/buttplug_rs_ffi_bg.js"].exports["__wbg_require_29e58b5f6f133563"](p0i32,p1i32,p2i32);
/******/ 					},
/******/ 					"__wbg_crypto_d91429ea1a087f70": function(p0i32) {
/******/ 						return installedModules["./src/buttplug-rs-ffi/buttplug_rs_ffi_bg.js"].exports["__wbg_crypto_d91429ea1a087f70"](p0i32);
/******/ 					},
/******/ 					"__wbg_msCrypto_c8be2bb4fc7d8cd3": function(p0i32) {
/******/ 						return installedModules["./src/buttplug-rs-ffi/buttplug_rs_ffi_bg.js"].exports["__wbg_msCrypto_c8be2bb4fc7d8cd3"](p0i32);
/******/ 					},
/******/ 					"__wbindgen_is_string": function(p0i32) {
/******/ 						return installedModules["./src/buttplug-rs-ffi/buttplug_rs_ffi_bg.js"].exports["__wbindgen_is_string"](p0i32);
/******/ 					},
/******/ 					"__wbindgen_string_get": function(p0i32,p1i32) {
/******/ 						return installedModules["./src/buttplug-rs-ffi/buttplug_rs_ffi_bg.js"].exports["__wbindgen_string_get"](p0i32,p1i32);
/******/ 					},
/******/ 					"__wbindgen_debug_string": function(p0i32,p1i32) {
/******/ 						return installedModules["./src/buttplug-rs-ffi/buttplug_rs_ffi_bg.js"].exports["__wbindgen_debug_string"](p0i32,p1i32);
/******/ 					},
/******/ 					"__wbindgen_throw": function(p0i32,p1i32) {
/******/ 						return installedModules["./src/buttplug-rs-ffi/buttplug_rs_ffi_bg.js"].exports["__wbindgen_throw"](p0i32,p1i32);
/******/ 					},
/******/ 					"__wbindgen_memory": function() {
/******/ 						return installedModules["./src/buttplug-rs-ffi/buttplug_rs_ffi_bg.js"].exports["__wbindgen_memory"]();
/******/ 					},
/******/ 					"__wbindgen_closure_wrapper677": function(p0i32,p1i32,p2i32) {
/******/ 						return installedModules["./src/buttplug-rs-ffi/buttplug_rs_ffi_bg.js"].exports["__wbindgen_closure_wrapper677"](p0i32,p1i32,p2i32);
/******/ 					},
/******/ 					"__wbindgen_closure_wrapper679": function(p0i32,p1i32,p2i32) {
/******/ 						return installedModules["./src/buttplug-rs-ffi/buttplug_rs_ffi_bg.js"].exports["__wbindgen_closure_wrapper679"](p0i32,p1i32,p2i32);
/******/ 					},
/******/ 					"__wbindgen_closure_wrapper681": function(p0i32,p1i32,p2i32) {
/******/ 						return installedModules["./src/buttplug-rs-ffi/buttplug_rs_ffi_bg.js"].exports["__wbindgen_closure_wrapper681"](p0i32,p1i32,p2i32);
/******/ 					},
/******/ 					"__wbindgen_closure_wrapper683": function(p0i32,p1i32,p2i32) {
/******/ 						return installedModules["./src/buttplug-rs-ffi/buttplug_rs_ffi_bg.js"].exports["__wbindgen_closure_wrapper683"](p0i32,p1i32,p2i32);
/******/ 					},
/******/ 					"__wbindgen_closure_wrapper2493": function(p0i32,p1i32,p2i32) {
/******/ 						return installedModules["./src/buttplug-rs-ffi/buttplug_rs_ffi_bg.js"].exports["__wbindgen_closure_wrapper2493"](p0i32,p1i32,p2i32);
/******/ 					},
/******/ 					"__wbindgen_closure_wrapper4268": function(p0i32,p1i32,p2i32) {
/******/ 						return installedModules["./src/buttplug-rs-ffi/buttplug_rs_ffi_bg.js"].exports["__wbindgen_closure_wrapper4268"](p0i32,p1i32,p2i32);
/******/ 					}
/******/ 				}
/******/ 			};
/******/ 		},
/******/ 	};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/ 	// This file contains only the entry chunk.
/******/ 	// The chunk loading function for additional chunks
/******/ 	__webpack_require__.e = function requireEnsure(chunkId) {
/******/ 		var promises = [];
/******/
/******/
/******/ 		// JSONP chunk loading for javascript
/******/
/******/ 		var installedChunkData = installedChunks[chunkId];
/******/ 		if(installedChunkData !== 0) { // 0 means "already installed".
/******/
/******/ 			// a Promise means "currently loading".
/******/ 			if(installedChunkData) {
/******/ 				promises.push(installedChunkData[2]);
/******/ 			} else {
/******/ 				// setup Promise in chunk cache
/******/ 				var promise = new Promise(function(resolve, reject) {
/******/ 					installedChunkData = installedChunks[chunkId] = [resolve, reject];
/******/ 				});
/******/ 				promises.push(installedChunkData[2] = promise);
/******/
/******/ 				// start chunk loading
/******/ 				var script = document.createElement('script');
/******/ 				var onScriptComplete;
/******/
/******/ 				script.charset = 'utf-8';
/******/ 				script.timeout = 120;
/******/ 				if (__webpack_require__.nc) {
/******/ 					script.setAttribute("nonce", __webpack_require__.nc);
/******/ 				}
/******/ 				script.src = jsonpScriptSrc(chunkId);
/******/
/******/ 				// create error before stack unwound to get useful stacktrace later
/******/ 				var error = new Error();
/******/ 				onScriptComplete = function (event) {
/******/ 					// avoid mem leaks in IE.
/******/ 					script.onerror = script.onload = null;
/******/ 					clearTimeout(timeout);
/******/ 					var chunk = installedChunks[chunkId];
/******/ 					if(chunk !== 0) {
/******/ 						if(chunk) {
/******/ 							var errorType = event && (event.type === 'load' ? 'missing' : event.type);
/******/ 							var realSrc = event && event.target && event.target.src;
/******/ 							error.message = 'Loading chunk ' + chunkId + ' failed.\n(' + errorType + ': ' + realSrc + ')';
/******/ 							error.name = 'ChunkLoadError';
/******/ 							error.type = errorType;
/******/ 							error.request = realSrc;
/******/ 							chunk[1](error);
/******/ 						}
/******/ 						installedChunks[chunkId] = undefined;
/******/ 					}
/******/ 				};
/******/ 				var timeout = setTimeout(function(){
/******/ 					onScriptComplete({ type: 'timeout', target: script });
/******/ 				}, 120000);
/******/ 				script.onerror = script.onload = onScriptComplete;
/******/ 				document.head.appendChild(script);
/******/ 			}
/******/ 		}
/******/
/******/ 		// Fetch + compile chunk loading for webassembly
/******/
/******/ 		var wasmModules = {"0":["./src/buttplug-rs-ffi/buttplug_rs_ffi_bg.wasm"]}[chunkId] || [];
/******/
/******/ 		wasmModules.forEach(function(wasmModuleId) {
/******/ 			var installedWasmModuleData = installedWasmModules[wasmModuleId];
/******/
/******/ 			// a Promise means "currently loading" or "already loaded".
/******/ 			if(installedWasmModuleData)
/******/ 				promises.push(installedWasmModuleData);
/******/ 			else {
/******/ 				var importObject = wasmImportObjects[wasmModuleId]();
/******/ 				var req = fetch(__webpack_require__.p + "" + {"./src/buttplug-rs-ffi/buttplug_rs_ffi_bg.wasm":"17a5dc1db11d74b795d7"}[wasmModuleId] + ".module.wasm");
/******/ 				var promise;
/******/ 				if(importObject instanceof Promise && typeof WebAssembly.compileStreaming === 'function') {
/******/ 					promise = Promise.all([WebAssembly.compileStreaming(req), importObject]).then(function(items) {
/******/ 						return WebAssembly.instantiate(items[0], items[1]);
/******/ 					});
/******/ 				} else if(typeof WebAssembly.instantiateStreaming === 'function') {
/******/ 					promise = WebAssembly.instantiateStreaming(req, importObject);
/******/ 				} else {
/******/ 					var bytesPromise = req.then(function(x) { return x.arrayBuffer(); });
/******/ 					promise = bytesPromise.then(function(bytes) {
/******/ 						return WebAssembly.instantiate(bytes, importObject);
/******/ 					});
/******/ 				}
/******/ 				promises.push(installedWasmModules[wasmModuleId] = promise.then(function(res) {
/******/ 					return __webpack_require__.w[wasmModuleId] = (res.instance || res).exports;
/******/ 				}));
/******/ 			}
/******/ 		});
/******/ 		return Promise.all(promises);
/******/ 	};
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// on error function for async loading
/******/ 	__webpack_require__.oe = function(err) { console.error(err); throw err; };
/******/
/******/ 	// object with all WebAssembly.instance exports
/******/ 	__webpack_require__.w = {};
/******/
/******/ 	var jsonpArray = window["webpackJsonp"] = window["webpackJsonp"] || [];
/******/ 	var oldJsonpFunction = jsonpArray.push.bind(jsonpArray);
/******/ 	jsonpArray.push = webpackJsonpCallback;
/******/ 	jsonpArray = jsonpArray.slice();
/******/ 	for(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);
/******/ 	var parentJsonpFunction = oldJsonpFunction;
/******/
/******/
/******/ 	var startupResult = (function() {
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/web_index.ts");
/******/ 	})();
/******/
/******/ 	webpackJsonpCallback([[], {}, 0, [0]]);
/******/ 	return startupResult;
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/@protobufjs/aspromise/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/@protobufjs/aspromise/index.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

module.exports = asPromise;

/**
 * Callback as used by {@link util.asPromise}.
 * @typedef asPromiseCallback
 * @type {function}
 * @param {Error|null} error Error, if any
 * @param {...*} params Additional arguments
 * @returns {undefined}
 */

/**
 * Returns a promise from a node-style callback function.
 * @memberof util
 * @param {asPromiseCallback} fn Function to call
 * @param {*} ctx Function context
 * @param {...*} params Function arguments
 * @returns {Promise<*>} Promisified function
 */
function asPromise(fn, ctx/*, varargs */) {
    var params  = new Array(arguments.length - 1),
        offset  = 0,
        index   = 2,
        pending = true;
    while (index < arguments.length)
        params[offset++] = arguments[index++];
    return new Promise(function executor(resolve, reject) {
        params[offset] = function callback(err/*, varargs */) {
            if (pending) {
                pending = false;
                if (err)
                    reject(err);
                else {
                    var params = new Array(arguments.length - 1),
                        offset = 0;
                    while (offset < params.length)
                        params[offset++] = arguments[offset];
                    resolve.apply(null, params);
                }
            }
        };
        try {
            fn.apply(ctx || null, params);
        } catch (err) {
            if (pending) {
                pending = false;
                reject(err);
            }
        }
    });
}


/***/ }),

/***/ "./node_modules/@protobufjs/base64/index.js":
/*!**************************************************!*\
  !*** ./node_modules/@protobufjs/base64/index.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * A minimal base64 implementation for number arrays.
 * @memberof util
 * @namespace
 */
var base64 = exports;

/**
 * Calculates the byte length of a base64 encoded string.
 * @param {string} string Base64 encoded string
 * @returns {number} Byte length
 */
base64.length = function length(string) {
    var p = string.length;
    if (!p)
        return 0;
    var n = 0;
    while (--p % 4 > 1 && string.charAt(p) === "=")
        ++n;
    return Math.ceil(string.length * 3) / 4 - n;
};

// Base64 encoding table
var b64 = new Array(64);

// Base64 decoding table
var s64 = new Array(123);

// 65..90, 97..122, 48..57, 43, 47
for (var i = 0; i < 64;)
    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;

/**
 * Encodes a buffer to a base64 encoded string.
 * @param {Uint8Array} buffer Source buffer
 * @param {number} start Source start
 * @param {number} end Source end
 * @returns {string} Base64 encoded string
 */
base64.encode = function encode(buffer, start, end) {
    var parts = null,
        chunk = [];
    var i = 0, // output index
        j = 0, // goto index
        t;     // temporary
    while (start < end) {
        var b = buffer[start++];
        switch (j) {
            case 0:
                chunk[i++] = b64[b >> 2];
                t = (b & 3) << 4;
                j = 1;
                break;
            case 1:
                chunk[i++] = b64[t | b >> 4];
                t = (b & 15) << 2;
                j = 2;
                break;
            case 2:
                chunk[i++] = b64[t | b >> 6];
                chunk[i++] = b64[b & 63];
                j = 0;
                break;
        }
        if (i > 8191) {
            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));
            i = 0;
        }
    }
    if (j) {
        chunk[i++] = b64[t];
        chunk[i++] = 61;
        if (j === 1)
            chunk[i++] = 61;
    }
    if (parts) {
        if (i)
            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));
        return parts.join("");
    }
    return String.fromCharCode.apply(String, chunk.slice(0, i));
};

var invalidEncoding = "invalid encoding";

/**
 * Decodes a base64 encoded string to a buffer.
 * @param {string} string Source string
 * @param {Uint8Array} buffer Destination buffer
 * @param {number} offset Destination offset
 * @returns {number} Number of bytes written
 * @throws {Error} If encoding is invalid
 */
base64.decode = function decode(string, buffer, offset) {
    var start = offset;
    var j = 0, // goto index
        t;     // temporary
    for (var i = 0; i < string.length;) {
        var c = string.charCodeAt(i++);
        if (c === 61 && j > 1)
            break;
        if ((c = s64[c]) === undefined)
            throw Error(invalidEncoding);
        switch (j) {
            case 0:
                t = c;
                j = 1;
                break;
            case 1:
                buffer[offset++] = t << 2 | (c & 48) >> 4;
                t = c;
                j = 2;
                break;
            case 2:
                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;
                t = c;
                j = 3;
                break;
            case 3:
                buffer[offset++] = (t & 3) << 6 | c;
                j = 0;
                break;
        }
    }
    if (j === 1)
        throw Error(invalidEncoding);
    return offset - start;
};

/**
 * Tests if the specified string appears to be base64 encoded.
 * @param {string} string String to test
 * @returns {boolean} `true` if probably base64 encoded, otherwise false
 */
base64.test = function test(string) {
    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);
};


/***/ }),

/***/ "./node_modules/@protobufjs/eventemitter/index.js":
/*!********************************************************!*\
  !*** ./node_modules/@protobufjs/eventemitter/index.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

module.exports = EventEmitter;

/**
 * Constructs a new event emitter instance.
 * @classdesc A minimal event emitter.
 * @memberof util
 * @constructor
 */
function EventEmitter() {

    /**
     * Registered listeners.
     * @type {Object.<string,*>}
     * @private
     */
    this._listeners = {};
}

/**
 * Registers an event listener.
 * @param {string} evt Event name
 * @param {function} fn Listener
 * @param {*} [ctx] Listener context
 * @returns {util.EventEmitter} `this`
 */
EventEmitter.prototype.on = function on(evt, fn, ctx) {
    (this._listeners[evt] || (this._listeners[evt] = [])).push({
        fn  : fn,
        ctx : ctx || this
    });
    return this;
};

/**
 * Removes an event listener or any matching listeners if arguments are omitted.
 * @param {string} [evt] Event name. Removes all listeners if omitted.
 * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.
 * @returns {util.EventEmitter} `this`
 */
EventEmitter.prototype.off = function off(evt, fn) {
    if (evt === undefined)
        this._listeners = {};
    else {
        if (fn === undefined)
            this._listeners[evt] = [];
        else {
            var listeners = this._listeners[evt];
            for (var i = 0; i < listeners.length;)
                if (listeners[i].fn === fn)
                    listeners.splice(i, 1);
                else
                    ++i;
        }
    }
    return this;
};

/**
 * Emits an event by calling its listeners with the specified arguments.
 * @param {string} evt Event name
 * @param {...*} args Arguments
 * @returns {util.EventEmitter} `this`
 */
EventEmitter.prototype.emit = function emit(evt) {
    var listeners = this._listeners[evt];
    if (listeners) {
        var args = [],
            i = 1;
        for (; i < arguments.length;)
            args.push(arguments[i++]);
        for (i = 0; i < listeners.length;)
            listeners[i].fn.apply(listeners[i++].ctx, args);
    }
    return this;
};


/***/ }),

/***/ "./node_modules/@protobufjs/float/index.js":
/*!*************************************************!*\
  !*** ./node_modules/@protobufjs/float/index.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = factory(factory);

/**
 * Reads / writes floats / doubles from / to buffers.
 * @name util.float
 * @namespace
 */

/**
 * Writes a 32 bit float to a buffer using little endian byte order.
 * @name util.float.writeFloatLE
 * @function
 * @param {number} val Value to write
 * @param {Uint8Array} buf Target buffer
 * @param {number} pos Target buffer offset
 * @returns {undefined}
 */

/**
 * Writes a 32 bit float to a buffer using big endian byte order.
 * @name util.float.writeFloatBE
 * @function
 * @param {number} val Value to write
 * @param {Uint8Array} buf Target buffer
 * @param {number} pos Target buffer offset
 * @returns {undefined}
 */

/**
 * Reads a 32 bit float from a buffer using little endian byte order.
 * @name util.float.readFloatLE
 * @function
 * @param {Uint8Array} buf Source buffer
 * @param {number} pos Source buffer offset
 * @returns {number} Value read
 */

/**
 * Reads a 32 bit float from a buffer using big endian byte order.
 * @name util.float.readFloatBE
 * @function
 * @param {Uint8Array} buf Source buffer
 * @param {number} pos Source buffer offset
 * @returns {number} Value read
 */

/**
 * Writes a 64 bit double to a buffer using little endian byte order.
 * @name util.float.writeDoubleLE
 * @function
 * @param {number} val Value to write
 * @param {Uint8Array} buf Target buffer
 * @param {number} pos Target buffer offset
 * @returns {undefined}
 */

/**
 * Writes a 64 bit double to a buffer using big endian byte order.
 * @name util.float.writeDoubleBE
 * @function
 * @param {number} val Value to write
 * @param {Uint8Array} buf Target buffer
 * @param {number} pos Target buffer offset
 * @returns {undefined}
 */

/**
 * Reads a 64 bit double from a buffer using little endian byte order.
 * @name util.float.readDoubleLE
 * @function
 * @param {Uint8Array} buf Source buffer
 * @param {number} pos Source buffer offset
 * @returns {number} Value read
 */

/**
 * Reads a 64 bit double from a buffer using big endian byte order.
 * @name util.float.readDoubleBE
 * @function
 * @param {Uint8Array} buf Source buffer
 * @param {number} pos Source buffer offset
 * @returns {number} Value read
 */

// Factory function for the purpose of node-based testing in modified global environments
function factory(exports) {

    // float: typed array
    if (typeof Float32Array !== "undefined") (function() {

        var f32 = new Float32Array([ -0 ]),
            f8b = new Uint8Array(f32.buffer),
            le  = f8b[3] === 128;

        function writeFloat_f32_cpy(val, buf, pos) {
            f32[0] = val;
            buf[pos    ] = f8b[0];
            buf[pos + 1] = f8b[1];
            buf[pos + 2] = f8b[2];
            buf[pos + 3] = f8b[3];
        }

        function writeFloat_f32_rev(val, buf, pos) {
            f32[0] = val;
            buf[pos    ] = f8b[3];
            buf[pos + 1] = f8b[2];
            buf[pos + 2] = f8b[1];
            buf[pos + 3] = f8b[0];
        }

        /* istanbul ignore next */
        exports.writeFloatLE = le ? writeFloat_f32_cpy : writeFloat_f32_rev;
        /* istanbul ignore next */
        exports.writeFloatBE = le ? writeFloat_f32_rev : writeFloat_f32_cpy;

        function readFloat_f32_cpy(buf, pos) {
            f8b[0] = buf[pos    ];
            f8b[1] = buf[pos + 1];
            f8b[2] = buf[pos + 2];
            f8b[3] = buf[pos + 3];
            return f32[0];
        }

        function readFloat_f32_rev(buf, pos) {
            f8b[3] = buf[pos    ];
            f8b[2] = buf[pos + 1];
            f8b[1] = buf[pos + 2];
            f8b[0] = buf[pos + 3];
            return f32[0];
        }

        /* istanbul ignore next */
        exports.readFloatLE = le ? readFloat_f32_cpy : readFloat_f32_rev;
        /* istanbul ignore next */
        exports.readFloatBE = le ? readFloat_f32_rev : readFloat_f32_cpy;

    // float: ieee754
    })(); else (function() {

        function writeFloat_ieee754(writeUint, val, buf, pos) {
            var sign = val < 0 ? 1 : 0;
            if (sign)
                val = -val;
            if (val === 0)
                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos);
            else if (isNaN(val))
                writeUint(2143289344, buf, pos);
            else if (val > 3.4028234663852886e+38) // +-Infinity
                writeUint((sign << 31 | 2139095040) >>> 0, buf, pos);
            else if (val < 1.1754943508222875e-38) // denormal
                writeUint((sign << 31 | Math.round(val / 1.401298464324817e-45)) >>> 0, buf, pos);
            else {
                var exponent = Math.floor(Math.log(val) / Math.LN2),
                    mantissa = Math.round(val * Math.pow(2, -exponent) * 8388608) & 8388607;
                writeUint((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);
            }
        }

        exports.writeFloatLE = writeFloat_ieee754.bind(null, writeUintLE);
        exports.writeFloatBE = writeFloat_ieee754.bind(null, writeUintBE);

        function readFloat_ieee754(readUint, buf, pos) {
            var uint = readUint(buf, pos),
                sign = (uint >> 31) * 2 + 1,
                exponent = uint >>> 23 & 255,
                mantissa = uint & 8388607;
            return exponent === 255
                ? mantissa
                ? NaN
                : sign * Infinity
                : exponent === 0 // denormal
                ? sign * 1.401298464324817e-45 * mantissa
                : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);
        }

        exports.readFloatLE = readFloat_ieee754.bind(null, readUintLE);
        exports.readFloatBE = readFloat_ieee754.bind(null, readUintBE);

    })();

    // double: typed array
    if (typeof Float64Array !== "undefined") (function() {

        var f64 = new Float64Array([-0]),
            f8b = new Uint8Array(f64.buffer),
            le  = f8b[7] === 128;

        function writeDouble_f64_cpy(val, buf, pos) {
            f64[0] = val;
            buf[pos    ] = f8b[0];
            buf[pos + 1] = f8b[1];
            buf[pos + 2] = f8b[2];
            buf[pos + 3] = f8b[3];
            buf[pos + 4] = f8b[4];
            buf[pos + 5] = f8b[5];
            buf[pos + 6] = f8b[6];
            buf[pos + 7] = f8b[7];
        }

        function writeDouble_f64_rev(val, buf, pos) {
            f64[0] = val;
            buf[pos    ] = f8b[7];
            buf[pos + 1] = f8b[6];
            buf[pos + 2] = f8b[5];
            buf[pos + 3] = f8b[4];
            buf[pos + 4] = f8b[3];
            buf[pos + 5] = f8b[2];
            buf[pos + 6] = f8b[1];
            buf[pos + 7] = f8b[0];
        }

        /* istanbul ignore next */
        exports.writeDoubleLE = le ? writeDouble_f64_cpy : writeDouble_f64_rev;
        /* istanbul ignore next */
        exports.writeDoubleBE = le ? writeDouble_f64_rev : writeDouble_f64_cpy;

        function readDouble_f64_cpy(buf, pos) {
            f8b[0] = buf[pos    ];
            f8b[1] = buf[pos + 1];
            f8b[2] = buf[pos + 2];
            f8b[3] = buf[pos + 3];
            f8b[4] = buf[pos + 4];
            f8b[5] = buf[pos + 5];
            f8b[6] = buf[pos + 6];
            f8b[7] = buf[pos + 7];
            return f64[0];
        }

        function readDouble_f64_rev(buf, pos) {
            f8b[7] = buf[pos    ];
            f8b[6] = buf[pos + 1];
            f8b[5] = buf[pos + 2];
            f8b[4] = buf[pos + 3];
            f8b[3] = buf[pos + 4];
            f8b[2] = buf[pos + 5];
            f8b[1] = buf[pos + 6];
            f8b[0] = buf[pos + 7];
            return f64[0];
        }

        /* istanbul ignore next */
        exports.readDoubleLE = le ? readDouble_f64_cpy : readDouble_f64_rev;
        /* istanbul ignore next */
        exports.readDoubleBE = le ? readDouble_f64_rev : readDouble_f64_cpy;

    // double: ieee754
    })(); else (function() {

        function writeDouble_ieee754(writeUint, off0, off1, val, buf, pos) {
            var sign = val < 0 ? 1 : 0;
            if (sign)
                val = -val;
            if (val === 0) {
                writeUint(0, buf, pos + off0);
                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos + off1);
            } else if (isNaN(val)) {
                writeUint(0, buf, pos + off0);
                writeUint(2146959360, buf, pos + off1);
            } else if (val > 1.7976931348623157e+308) { // +-Infinity
                writeUint(0, buf, pos + off0);
                writeUint((sign << 31 | 2146435072) >>> 0, buf, pos + off1);
            } else {
                var mantissa;
                if (val < 2.2250738585072014e-308) { // denormal
                    mantissa = val / 5e-324;
                    writeUint(mantissa >>> 0, buf, pos + off0);
                    writeUint((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + off1);
                } else {
                    var exponent = Math.floor(Math.log(val) / Math.LN2);
                    if (exponent === 1024)
                        exponent = 1023;
                    mantissa = val * Math.pow(2, -exponent);
                    writeUint(mantissa * 4503599627370496 >>> 0, buf, pos + off0);
                    writeUint((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + off1);
                }
            }
        }

        exports.writeDoubleLE = writeDouble_ieee754.bind(null, writeUintLE, 0, 4);
        exports.writeDoubleBE = writeDouble_ieee754.bind(null, writeUintBE, 4, 0);

        function readDouble_ieee754(readUint, off0, off1, buf, pos) {
            var lo = readUint(buf, pos + off0),
                hi = readUint(buf, pos + off1);
            var sign = (hi >> 31) * 2 + 1,
                exponent = hi >>> 20 & 2047,
                mantissa = 4294967296 * (hi & 1048575) + lo;
            return exponent === 2047
                ? mantissa
                ? NaN
                : sign * Infinity
                : exponent === 0 // denormal
                ? sign * 5e-324 * mantissa
                : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);
        }

        exports.readDoubleLE = readDouble_ieee754.bind(null, readUintLE, 0, 4);
        exports.readDoubleBE = readDouble_ieee754.bind(null, readUintBE, 4, 0);

    })();

    return exports;
}

// uint helpers

function writeUintLE(val, buf, pos) {
    buf[pos    ] =  val        & 255;
    buf[pos + 1] =  val >>> 8  & 255;
    buf[pos + 2] =  val >>> 16 & 255;
    buf[pos + 3] =  val >>> 24;
}

function writeUintBE(val, buf, pos) {
    buf[pos    ] =  val >>> 24;
    buf[pos + 1] =  val >>> 16 & 255;
    buf[pos + 2] =  val >>> 8  & 255;
    buf[pos + 3] =  val        & 255;
}

function readUintLE(buf, pos) {
    return (buf[pos    ]
          | buf[pos + 1] << 8
          | buf[pos + 2] << 16
          | buf[pos + 3] << 24) >>> 0;
}

function readUintBE(buf, pos) {
    return (buf[pos    ] << 24
          | buf[pos + 1] << 16
          | buf[pos + 2] << 8
          | buf[pos + 3]) >>> 0;
}


/***/ }),

/***/ "./node_modules/@protobufjs/inquire/index.js":
/*!***************************************************!*\
  !*** ./node_modules/@protobufjs/inquire/index.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

module.exports = inquire;

/**
 * Requires a module only if available.
 * @memberof util
 * @param {string} moduleName Module to require
 * @returns {?Object} Required module if available and not empty, otherwise `null`
 */
function inquire(moduleName) {
    try {
        var mod = eval("quire".replace(/^/,"re"))(moduleName); // eslint-disable-line no-eval
        if (mod && (mod.length || Object.keys(mod).length))
            return mod;
    } catch (e) {} // eslint-disable-line no-empty
    return null;
}


/***/ }),

/***/ "./node_modules/@protobufjs/pool/index.js":
/*!************************************************!*\
  !*** ./node_modules/@protobufjs/pool/index.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

module.exports = pool;

/**
 * An allocator as used by {@link util.pool}.
 * @typedef PoolAllocator
 * @type {function}
 * @param {number} size Buffer size
 * @returns {Uint8Array} Buffer
 */

/**
 * A slicer as used by {@link util.pool}.
 * @typedef PoolSlicer
 * @type {function}
 * @param {number} start Start offset
 * @param {number} end End offset
 * @returns {Uint8Array} Buffer slice
 * @this {Uint8Array}
 */

/**
 * A general purpose buffer pool.
 * @memberof util
 * @function
 * @param {PoolAllocator} alloc Allocator
 * @param {PoolSlicer} slice Slicer
 * @param {number} [size=8192] Slab size
 * @returns {PoolAllocator} Pooled allocator
 */
function pool(alloc, slice, size) {
    var SIZE   = size || 8192;
    var MAX    = SIZE >>> 1;
    var slab   = null;
    var offset = SIZE;
    return function pool_alloc(size) {
        if (size < 1 || size > MAX)
            return alloc(size);
        if (offset + size > SIZE) {
            slab = alloc(SIZE);
            offset = 0;
        }
        var buf = slice.call(slab, offset, offset += size);
        if (offset & 7) // align to 32 bit
            offset = (offset | 7) + 1;
        return buf;
    };
}


/***/ }),

/***/ "./node_modules/@protobufjs/utf8/index.js":
/*!************************************************!*\
  !*** ./node_modules/@protobufjs/utf8/index.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * A minimal UTF8 implementation for number arrays.
 * @memberof util
 * @namespace
 */
var utf8 = exports;

/**
 * Calculates the UTF8 byte length of a string.
 * @param {string} string String
 * @returns {number} Byte length
 */
utf8.length = function utf8_length(string) {
    var len = 0,
        c = 0;
    for (var i = 0; i < string.length; ++i) {
        c = string.charCodeAt(i);
        if (c < 128)
            len += 1;
        else if (c < 2048)
            len += 2;
        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {
            ++i;
            len += 4;
        } else
            len += 3;
    }
    return len;
};

/**
 * Reads UTF8 bytes as a string.
 * @param {Uint8Array} buffer Source buffer
 * @param {number} start Source start
 * @param {number} end Source end
 * @returns {string} String read
 */
utf8.read = function utf8_read(buffer, start, end) {
    var len = end - start;
    if (len < 1)
        return "";
    var parts = null,
        chunk = [],
        i = 0, // char offset
        t;     // temporary
    while (start < end) {
        t = buffer[start++];
        if (t < 128)
            chunk[i++] = t;
        else if (t > 191 && t < 224)
            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;
        else if (t > 239 && t < 365) {
            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;
            chunk[i++] = 0xD800 + (t >> 10);
            chunk[i++] = 0xDC00 + (t & 1023);
        } else
            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;
        if (i > 8191) {
            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));
            i = 0;
        }
    }
    if (parts) {
        if (i)
            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));
        return parts.join("");
    }
    return String.fromCharCode.apply(String, chunk.slice(0, i));
};

/**
 * Writes a string as UTF8 bytes.
 * @param {string} string Source string
 * @param {Uint8Array} buffer Destination buffer
 * @param {number} offset Destination offset
 * @returns {number} Bytes written
 */
utf8.write = function utf8_write(string, buffer, offset) {
    var start = offset,
        c1, // character 1
        c2; // character 2
    for (var i = 0; i < string.length; ++i) {
        c1 = string.charCodeAt(i);
        if (c1 < 128) {
            buffer[offset++] = c1;
        } else if (c1 < 2048) {
            buffer[offset++] = c1 >> 6       | 192;
            buffer[offset++] = c1       & 63 | 128;
        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {
            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);
            ++i;
            buffer[offset++] = c1 >> 18      | 240;
            buffer[offset++] = c1 >> 12 & 63 | 128;
            buffer[offset++] = c1 >> 6  & 63 | 128;
            buffer[offset++] = c1       & 63 | 128;
        } else {
            buffer[offset++] = c1 >> 12      | 224;
            buffer[offset++] = c1 >> 6  & 63 | 128;
            buffer[offset++] = c1       & 63 | 128;
        }
    }
    return offset - start;
};


/***/ }),

/***/ "./node_modules/base64-js/index.js":
/*!*****************************************!*\
  !*** ./node_modules/base64-js/index.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function getLens (b64) {
  var len = b64.length

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // Trim off extra bytes after placeholder bytes are found
  // See: https://github.com/beatgammit/base64-js/issues/42
  var validLen = b64.indexOf('=')
  if (validLen === -1) validLen = len

  var placeHoldersLen = validLen === len
    ? 0
    : 4 - (validLen % 4)

  return [validLen, placeHoldersLen]
}

// base64 is 4/3 + up to two characters of the original data
function byteLength (b64) {
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function _byteLength (b64, validLen, placeHoldersLen) {
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function toByteArray (b64) {
  var tmp
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]

  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))

  var curByte = 0

  // if there are placeholders, only get up to the last complete 4 chars
  var len = placeHoldersLen > 0
    ? validLen - 4
    : validLen

  var i
  for (i = 0; i < len; i += 4) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 18) |
      (revLookup[b64.charCodeAt(i + 1)] << 12) |
      (revLookup[b64.charCodeAt(i + 2)] << 6) |
      revLookup[b64.charCodeAt(i + 3)]
    arr[curByte++] = (tmp >> 16) & 0xFF
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 2) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 2) |
      (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 1) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 10) |
      (revLookup[b64.charCodeAt(i + 1)] << 4) |
      (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] +
    lookup[num >> 12 & 0x3F] +
    lookup[num >> 6 & 0x3F] +
    lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp =
      ((uint8[i] << 16) & 0xFF0000) +
      ((uint8[i + 1] << 8) & 0xFF00) +
      (uint8[i + 2] & 0xFF)
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    parts.push(
      lookup[tmp >> 2] +
      lookup[(tmp << 4) & 0x3F] +
      '=='
    )
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1]
    parts.push(
      lookup[tmp >> 10] +
      lookup[(tmp >> 4) & 0x3F] +
      lookup[(tmp << 2) & 0x3F] +
      '='
    )
  }

  return parts.join('')
}


/***/ }),

/***/ "./node_modules/buffer/index.js":
/*!**************************************!*\
  !*** ./node_modules/buffer/index.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <http://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */



var base64 = __webpack_require__(/*! base64-js */ "./node_modules/base64-js/index.js")
var ieee754 = __webpack_require__(/*! ieee754 */ "./node_modules/ieee754/index.js")
var isArray = __webpack_require__(/*! isarray */ "./node_modules/isarray/index.js")

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Due to various browser bugs, sometimes the Object implementation will be used even
 * when the browser supports typed arrays.
 *
 * Note:
 *
 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *     incorrect length in some situations.

 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
 * get the Object implementation, which is slower but behaves correctly.
 */
Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
  ? global.TYPED_ARRAY_SUPPORT
  : typedArraySupport()

/*
 * Export kMaxLength after typed array support is determined.
 */
exports.kMaxLength = kMaxLength()

function typedArraySupport () {
  try {
    var arr = new Uint8Array(1)
    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}
    return arr.foo() === 42 && // typed array instances can be augmented
        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
  } catch (e) {
    return false
  }
}

function kMaxLength () {
  return Buffer.TYPED_ARRAY_SUPPORT
    ? 0x7fffffff
    : 0x3fffffff
}

function createBuffer (that, length) {
  if (kMaxLength() < length) {
    throw new RangeError('Invalid typed array length')
  }
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = new Uint8Array(length)
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    if (that === null) {
      that = new Buffer(length)
    }
    that.length = length
  }

  return that
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
    return new Buffer(arg, encodingOrOffset, length)
  }

  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new Error(
        'If encoding is specified then the first argument must be a string'
      )
    }
    return allocUnsafe(this, arg)
  }
  return from(this, arg, encodingOrOffset, length)
}

Buffer.poolSize = 8192 // not used by this implementation

// TODO: Legacy, not needed anymore. Remove in next major version.
Buffer._augment = function (arr) {
  arr.__proto__ = Buffer.prototype
  return arr
}

function from (that, value, encodingOrOffset, length) {
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number')
  }

  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
    return fromArrayBuffer(that, value, encodingOrOffset, length)
  }

  if (typeof value === 'string') {
    return fromString(that, value, encodingOrOffset)
  }

  return fromObject(that, value)
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(null, value, encodingOrOffset, length)
}

if (Buffer.TYPED_ARRAY_SUPPORT) {
  Buffer.prototype.__proto__ = Uint8Array.prototype
  Buffer.__proto__ = Uint8Array
  if (typeof Symbol !== 'undefined' && Symbol.species &&
      Buffer[Symbol.species] === Buffer) {
    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
    Object.defineProperty(Buffer, Symbol.species, {
      value: null,
      configurable: true
    })
  }
}

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be a number')
  } else if (size < 0) {
    throw new RangeError('"size" argument must not be negative')
  }
}

function alloc (that, size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(that, size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(that, size).fill(fill, encoding)
      : createBuffer(that, size).fill(fill)
  }
  return createBuffer(that, size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(null, size, fill, encoding)
}

function allocUnsafe (that, size) {
  assertSize(size)
  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < size; ++i) {
      that[i] = 0
    }
  }
  return that
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(null, size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(null, size)
}

function fromString (that, string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('"encoding" must be a valid string encoding')
  }

  var length = byteLength(string, encoding) | 0
  that = createBuffer(that, length)

  var actual = that.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    that = that.slice(0, actual)
  }

  return that
}

function fromArrayLike (that, array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  that = createBuffer(that, length)
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

function fromArrayBuffer (that, array, byteOffset, length) {
  array.byteLength // this throws if `array` is not a valid ArrayBuffer

  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('\'offset\' is out of bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('\'length\' is out of bounds')
  }

  if (byteOffset === undefined && length === undefined) {
    array = new Uint8Array(array)
  } else if (length === undefined) {
    array = new Uint8Array(array, byteOffset)
  } else {
    array = new Uint8Array(array, byteOffset, length)
  }

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = array
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    that = fromArrayLike(that, array)
  }
  return that
}

function fromObject (that, obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    that = createBuffer(that, len)

    if (that.length === 0) {
      return that
    }

    obj.copy(that, 0, 0, len)
    return that
  }

  if (obj) {
    if ((typeof ArrayBuffer !== 'undefined' &&
        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
      if (typeof obj.length !== 'number' || isnan(obj.length)) {
        return createBuffer(that, 0)
      }
      return fromArrayLike(that, obj)
    }

    if (obj.type === 'Buffer' && isArray(obj.data)) {
      return fromArrayLike(that, obj.data)
    }
  }

  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
}

function checked (length) {
  // Note: cannot use `length < kMaxLength()` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= kMaxLength()) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return !!(b != null && b._isBuffer)
}

Buffer.compare = function compare (a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('Arguments must be Buffers')
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    string = '' + string
  }

  var len = string.length
  if (len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
      case undefined:
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) return utf8ToBytes(string).length // assume utf8
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
// Buffer instances.
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length | 0
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
    if (this.length > max) str += ' ... '
  }
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (!Buffer.isBuffer(target)) {
    throw new TypeError('Argument must be a Buffer')
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset  // Coerce to Number.
  if (isNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (Buffer.TYPED_ARRAY_SUPPORT &&
        typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  // must be an even number of digits
  var strLen = string.length
  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (isNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset | 0
    if (isFinite(length)) {
      length = length | 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  // legacy write(string, encoding, offset, length) - remove in v0.13
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
      : (firstByte > 0xBF) ? 2
      : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    newBuf = this.subarray(start, end)
    newBuf.__proto__ = Buffer.prototype
  } else {
    var sliceLen = end - start
    newBuf = new Buffer(sliceLen, undefined)
    for (var i = 0; i < sliceLen; ++i) {
      newBuf[i] = this[i + start]
    }
  }

  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  this[offset] = (value & 0xff)
  return offset + 1
}

function objectWriteUInt16 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
      (littleEndian ? i : 1 - i) * 8
  }
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

function objectWriteUInt32 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffffffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
  }
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset + 3] = (value >>> 24)
    this[offset + 2] = (value >>> 16)
    this[offset + 1] = (value >>> 8)
    this[offset] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
    this[offset + 2] = (value >>> 16)
    this[offset + 3] = (value >>> 24)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start
  var i

  if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
    // ascending copy from start
    for (i = 0; i < len; ++i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, start + len),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if (code < 256) {
        val = code
      }
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
  } else if (typeof val === 'number') {
    val = val & 255
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : utf8ToBytes(new Buffer(val, encoding).toString())
    var len = bytes.length
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function stringtrim (str) {
  if (str.trim) return str.trim()
  return str.replace(/^\s+|\s+$/g, '')
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

function isnan (val) {
  return val !== val // eslint-disable-line no-self-compare
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/events/events.js":
/*!***************************************!*\
  !*** ./node_modules/events/events.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



var R = typeof Reflect === 'object' ? Reflect : null
var ReflectApply = R && typeof R.apply === 'function'
  ? R.apply
  : function ReflectApply(target, receiver, args) {
    return Function.prototype.apply.call(target, receiver, args);
  }

var ReflectOwnKeys
if (R && typeof R.ownKeys === 'function') {
  ReflectOwnKeys = R.ownKeys
} else if (Object.getOwnPropertySymbols) {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target)
      .concat(Object.getOwnPropertySymbols(target));
  };
} else {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target);
  };
}

function ProcessEmitWarning(warning) {
  if (console && console.warn) console.warn(warning);
}

var NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {
  return value !== value;
}

function EventEmitter() {
  EventEmitter.init.call(this);
}
module.exports = EventEmitter;
module.exports.once = once;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._eventsCount = 0;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
var defaultMaxListeners = 10;

function checkListener(listener) {
  if (typeof listener !== 'function') {
    throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
  }
}

Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
  enumerable: true,
  get: function() {
    return defaultMaxListeners;
  },
  set: function(arg) {
    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {
      throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + '.');
    }
    defaultMaxListeners = arg;
  }
});

EventEmitter.init = function() {

  if (this._events === undefined ||
      this._events === Object.getPrototypeOf(this)._events) {
    this._events = Object.create(null);
    this._eventsCount = 0;
  }

  this._maxListeners = this._maxListeners || undefined;
};

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {
    throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + '.');
  }
  this._maxListeners = n;
  return this;
};

function _getMaxListeners(that) {
  if (that._maxListeners === undefined)
    return EventEmitter.defaultMaxListeners;
  return that._maxListeners;
}

EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
  return _getMaxListeners(this);
};

EventEmitter.prototype.emit = function emit(type) {
  var args = [];
  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);
  var doError = (type === 'error');

  var events = this._events;
  if (events !== undefined)
    doError = (doError && events.error === undefined);
  else if (!doError)
    return false;

  // If there is no 'error' event listener then throw.
  if (doError) {
    var er;
    if (args.length > 0)
      er = args[0];
    if (er instanceof Error) {
      // Note: The comments on the `throw` lines are intentional, they show
      // up in Node's output if this results in an unhandled exception.
      throw er; // Unhandled 'error' event
    }
    // At least give some kind of context to the user
    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));
    err.context = er;
    throw err; // Unhandled 'error' event
  }

  var handler = events[type];

  if (handler === undefined)
    return false;

  if (typeof handler === 'function') {
    ReflectApply(handler, this, args);
  } else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      ReflectApply(listeners[i], this, args);
  }

  return true;
};

function _addListener(target, type, listener, prepend) {
  var m;
  var events;
  var existing;

  checkListener(listener);

  events = target._events;
  if (events === undefined) {
    events = target._events = Object.create(null);
    target._eventsCount = 0;
  } else {
    // To avoid recursion in the case that type === "newListener"! Before
    // adding it to the listeners, first emit "newListener".
    if (events.newListener !== undefined) {
      target.emit('newListener', type,
                  listener.listener ? listener.listener : listener);

      // Re-assign `events` because a newListener handler could have caused the
      // this._events to be assigned to a new object
      events = target._events;
    }
    existing = events[type];
  }

  if (existing === undefined) {
    // Optimize the case of one listener. Don't need the extra array object.
    existing = events[type] = listener;
    ++target._eventsCount;
  } else {
    if (typeof existing === 'function') {
      // Adding the second element, need to change to array.
      existing = events[type] =
        prepend ? [listener, existing] : [existing, listener];
      // If we've already got an array, just append.
    } else if (prepend) {
      existing.unshift(listener);
    } else {
      existing.push(listener);
    }

    // Check for listener leak
    m = _getMaxListeners(target);
    if (m > 0 && existing.length > m && !existing.warned) {
      existing.warned = true;
      // No error code for this since it is a Warning
      // eslint-disable-next-line no-restricted-syntax
      var w = new Error('Possible EventEmitter memory leak detected. ' +
                          existing.length + ' ' + String(type) + ' listeners ' +
                          'added. Use emitter.setMaxListeners() to ' +
                          'increase limit');
      w.name = 'MaxListenersExceededWarning';
      w.emitter = target;
      w.type = type;
      w.count = existing.length;
      ProcessEmitWarning(w);
    }
  }

  return target;
}

EventEmitter.prototype.addListener = function addListener(type, listener) {
  return _addListener(this, type, listener, false);
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.prependListener =
    function prependListener(type, listener) {
      return _addListener(this, type, listener, true);
    };

function onceWrapper() {
  if (!this.fired) {
    this.target.removeListener(this.type, this.wrapFn);
    this.fired = true;
    if (arguments.length === 0)
      return this.listener.call(this.target);
    return this.listener.apply(this.target, arguments);
  }
}

function _onceWrap(target, type, listener) {
  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };
  var wrapped = onceWrapper.bind(state);
  wrapped.listener = listener;
  state.wrapFn = wrapped;
  return wrapped;
}

EventEmitter.prototype.once = function once(type, listener) {
  checkListener(listener);
  this.on(type, _onceWrap(this, type, listener));
  return this;
};

EventEmitter.prototype.prependOnceListener =
    function prependOnceListener(type, listener) {
      checkListener(listener);
      this.prependListener(type, _onceWrap(this, type, listener));
      return this;
    };

// Emits a 'removeListener' event if and only if the listener was removed.
EventEmitter.prototype.removeListener =
    function removeListener(type, listener) {
      var list, events, position, i, originalListener;

      checkListener(listener);

      events = this._events;
      if (events === undefined)
        return this;

      list = events[type];
      if (list === undefined)
        return this;

      if (list === listener || list.listener === listener) {
        if (--this._eventsCount === 0)
          this._events = Object.create(null);
        else {
          delete events[type];
          if (events.removeListener)
            this.emit('removeListener', type, list.listener || listener);
        }
      } else if (typeof list !== 'function') {
        position = -1;

        for (i = list.length - 1; i >= 0; i--) {
          if (list[i] === listener || list[i].listener === listener) {
            originalListener = list[i].listener;
            position = i;
            break;
          }
        }

        if (position < 0)
          return this;

        if (position === 0)
          list.shift();
        else {
          spliceOne(list, position);
        }

        if (list.length === 1)
          events[type] = list[0];

        if (events.removeListener !== undefined)
          this.emit('removeListener', type, originalListener || listener);
      }

      return this;
    };

EventEmitter.prototype.off = EventEmitter.prototype.removeListener;

EventEmitter.prototype.removeAllListeners =
    function removeAllListeners(type) {
      var listeners, events, i;

      events = this._events;
      if (events === undefined)
        return this;

      // not listening for removeListener, no need to emit
      if (events.removeListener === undefined) {
        if (arguments.length === 0) {
          this._events = Object.create(null);
          this._eventsCount = 0;
        } else if (events[type] !== undefined) {
          if (--this._eventsCount === 0)
            this._events = Object.create(null);
          else
            delete events[type];
        }
        return this;
      }

      // emit removeListener for all listeners on all events
      if (arguments.length === 0) {
        var keys = Object.keys(events);
        var key;
        for (i = 0; i < keys.length; ++i) {
          key = keys[i];
          if (key === 'removeListener') continue;
          this.removeAllListeners(key);
        }
        this.removeAllListeners('removeListener');
        this._events = Object.create(null);
        this._eventsCount = 0;
        return this;
      }

      listeners = events[type];

      if (typeof listeners === 'function') {
        this.removeListener(type, listeners);
      } else if (listeners !== undefined) {
        // LIFO order
        for (i = listeners.length - 1; i >= 0; i--) {
          this.removeListener(type, listeners[i]);
        }
      }

      return this;
    };

function _listeners(target, type, unwrap) {
  var events = target._events;

  if (events === undefined)
    return [];

  var evlistener = events[type];
  if (evlistener === undefined)
    return [];

  if (typeof evlistener === 'function')
    return unwrap ? [evlistener.listener || evlistener] : [evlistener];

  return unwrap ?
    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
}

EventEmitter.prototype.listeners = function listeners(type) {
  return _listeners(this, type, true);
};

EventEmitter.prototype.rawListeners = function rawListeners(type) {
  return _listeners(this, type, false);
};

EventEmitter.listenerCount = function(emitter, type) {
  if (typeof emitter.listenerCount === 'function') {
    return emitter.listenerCount(type);
  } else {
    return listenerCount.call(emitter, type);
  }
};

EventEmitter.prototype.listenerCount = listenerCount;
function listenerCount(type) {
  var events = this._events;

  if (events !== undefined) {
    var evlistener = events[type];

    if (typeof evlistener === 'function') {
      return 1;
    } else if (evlistener !== undefined) {
      return evlistener.length;
    }
  }

  return 0;
}

EventEmitter.prototype.eventNames = function eventNames() {
  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
};

function arrayClone(arr, n) {
  var copy = new Array(n);
  for (var i = 0; i < n; ++i)
    copy[i] = arr[i];
  return copy;
}

function spliceOne(list, index) {
  for (; index + 1 < list.length; index++)
    list[index] = list[index + 1];
  list.pop();
}

function unwrapListeners(arr) {
  var ret = new Array(arr.length);
  for (var i = 0; i < ret.length; ++i) {
    ret[i] = arr[i].listener || arr[i];
  }
  return ret;
}

function once(emitter, name) {
  return new Promise(function (resolve, reject) {
    function eventListener() {
      if (errorListener !== undefined) {
        emitter.removeListener('error', errorListener);
      }
      resolve([].slice.call(arguments));
    };
    var errorListener;

    // Adding an error listener is not optional because
    // if an error is thrown on an event emitter we cannot
    // guarantee that the actual event we are waiting will
    // be fired. The result could be a silent way to create
    // memory or file descriptor leaks, which is something
    // we should avoid.
    if (name !== 'error') {
      errorListener = function errorListener(err) {
        emitter.removeListener(name, eventListener);
        reject(err);
      };

      emitter.once('error', errorListener);
    }

    emitter.once(name, eventListener);
  });
}


/***/ }),

/***/ "./node_modules/ieee754/index.js":
/*!***************************************!*\
  !*** ./node_modules/ieee754/index.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = ((value * c) - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}


/***/ }),

/***/ "./node_modules/isarray/index.js":
/*!***************************************!*\
  !*** ./node_modules/isarray/index.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};


/***/ }),

/***/ "./node_modules/protobufjs/minimal.js":
/*!********************************************!*\
  !*** ./node_modules/protobufjs/minimal.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// minimal library entry point.


module.exports = __webpack_require__(/*! ./src/index-minimal */ "./node_modules/protobufjs/src/index-minimal.js");


/***/ }),

/***/ "./node_modules/protobufjs/src/index-minimal.js":
/*!******************************************************!*\
  !*** ./node_modules/protobufjs/src/index-minimal.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var protobuf = exports;

/**
 * Build type, one of `"full"`, `"light"` or `"minimal"`.
 * @name build
 * @type {string}
 * @const
 */
protobuf.build = "minimal";

// Serialization
protobuf.Writer       = __webpack_require__(/*! ./writer */ "./node_modules/protobufjs/src/writer.js");
protobuf.BufferWriter = __webpack_require__(/*! ./writer_buffer */ "./node_modules/protobufjs/src/writer_buffer.js");
protobuf.Reader       = __webpack_require__(/*! ./reader */ "./node_modules/protobufjs/src/reader.js");
protobuf.BufferReader = __webpack_require__(/*! ./reader_buffer */ "./node_modules/protobufjs/src/reader_buffer.js");

// Utility
protobuf.util         = __webpack_require__(/*! ./util/minimal */ "./node_modules/protobufjs/src/util/minimal.js");
protobuf.rpc          = __webpack_require__(/*! ./rpc */ "./node_modules/protobufjs/src/rpc.js");
protobuf.roots        = __webpack_require__(/*! ./roots */ "./node_modules/protobufjs/src/roots.js");
protobuf.configure    = configure;

/* istanbul ignore next */
/**
 * Reconfigures the library according to the environment.
 * @returns {undefined}
 */
function configure() {
    protobuf.util._configure();
    protobuf.Writer._configure(protobuf.BufferWriter);
    protobuf.Reader._configure(protobuf.BufferReader);
}

// Set up buffer utility according to the environment
configure();


/***/ }),

/***/ "./node_modules/protobufjs/src/reader.js":
/*!***********************************************!*\
  !*** ./node_modules/protobufjs/src/reader.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

module.exports = Reader;

var util      = __webpack_require__(/*! ./util/minimal */ "./node_modules/protobufjs/src/util/minimal.js");

var BufferReader; // cyclic

var LongBits  = util.LongBits,
    utf8      = util.utf8;

/* istanbul ignore next */
function indexOutOfRange(reader, writeLength) {
    return RangeError("index out of range: " + reader.pos + " + " + (writeLength || 1) + " > " + reader.len);
}

/**
 * Constructs a new reader instance using the specified buffer.
 * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.
 * @constructor
 * @param {Uint8Array} buffer Buffer to read from
 */
function Reader(buffer) {

    /**
     * Read buffer.
     * @type {Uint8Array}
     */
    this.buf = buffer;

    /**
     * Read buffer position.
     * @type {number}
     */
    this.pos = 0;

    /**
     * Read buffer length.
     * @type {number}
     */
    this.len = buffer.length;
}

var create_array = typeof Uint8Array !== "undefined"
    ? function create_typed_array(buffer) {
        if (buffer instanceof Uint8Array || Array.isArray(buffer))
            return new Reader(buffer);
        throw Error("illegal buffer");
    }
    /* istanbul ignore next */
    : function create_array(buffer) {
        if (Array.isArray(buffer))
            return new Reader(buffer);
        throw Error("illegal buffer");
    };

var create = function create() {
    return util.Buffer
        ? function create_buffer_setup(buffer) {
            return (Reader.create = function create_buffer(buffer) {
                return util.Buffer.isBuffer(buffer)
                    ? new BufferReader(buffer)
                    /* istanbul ignore next */
                    : create_array(buffer);
            })(buffer);
        }
        /* istanbul ignore next */
        : create_array;
};

/**
 * Creates a new reader using the specified buffer.
 * @function
 * @param {Uint8Array|Buffer} buffer Buffer to read from
 * @returns {Reader|BufferReader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}
 * @throws {Error} If `buffer` is not a valid buffer
 */
Reader.create = create();

Reader.prototype._slice = util.Array.prototype.subarray || /* istanbul ignore next */ util.Array.prototype.slice;

/**
 * Reads a varint as an unsigned 32 bit value.
 * @function
 * @returns {number} Value read
 */
Reader.prototype.uint32 = (function read_uint32_setup() {
    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)
    return function read_uint32() {
        value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;
        value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;
        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;
        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;
        value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;

        /* istanbul ignore if */
        if ((this.pos += 5) > this.len) {
            this.pos = this.len;
            throw indexOutOfRange(this, 10);
        }
        return value;
    };
})();

/**
 * Reads a varint as a signed 32 bit value.
 * @returns {number} Value read
 */
Reader.prototype.int32 = function read_int32() {
    return this.uint32() | 0;
};

/**
 * Reads a zig-zag encoded varint as a signed 32 bit value.
 * @returns {number} Value read
 */
Reader.prototype.sint32 = function read_sint32() {
    var value = this.uint32();
    return value >>> 1 ^ -(value & 1) | 0;
};

/* eslint-disable no-invalid-this */

function readLongVarint() {
    // tends to deopt with local vars for octet etc.
    var bits = new LongBits(0, 0);
    var i = 0;
    if (this.len - this.pos > 4) { // fast route (lo)
        for (; i < 4; ++i) {
            // 1st..4th
            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;
            if (this.buf[this.pos++] < 128)
                return bits;
        }
        // 5th
        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;
        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;
        if (this.buf[this.pos++] < 128)
            return bits;
        i = 0;
    } else {
        for (; i < 3; ++i) {
            /* istanbul ignore if */
            if (this.pos >= this.len)
                throw indexOutOfRange(this);
            // 1st..3th
            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;
            if (this.buf[this.pos++] < 128)
                return bits;
        }
        // 4th
        bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;
        return bits;
    }
    if (this.len - this.pos > 4) { // fast route (hi)
        for (; i < 5; ++i) {
            // 6th..10th
            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;
            if (this.buf[this.pos++] < 128)
                return bits;
        }
    } else {
        for (; i < 5; ++i) {
            /* istanbul ignore if */
            if (this.pos >= this.len)
                throw indexOutOfRange(this);
            // 6th..10th
            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;
            if (this.buf[this.pos++] < 128)
                return bits;
        }
    }
    /* istanbul ignore next */
    throw Error("invalid varint encoding");
}

/* eslint-enable no-invalid-this */

/**
 * Reads a varint as a signed 64 bit value.
 * @name Reader#int64
 * @function
 * @returns {Long} Value read
 */

/**
 * Reads a varint as an unsigned 64 bit value.
 * @name Reader#uint64
 * @function
 * @returns {Long} Value read
 */

/**
 * Reads a zig-zag encoded varint as a signed 64 bit value.
 * @name Reader#sint64
 * @function
 * @returns {Long} Value read
 */

/**
 * Reads a varint as a boolean.
 * @returns {boolean} Value read
 */
Reader.prototype.bool = function read_bool() {
    return this.uint32() !== 0;
};

function readFixed32_end(buf, end) { // note that this uses `end`, not `pos`
    return (buf[end - 4]
          | buf[end - 3] << 8
          | buf[end - 2] << 16
          | buf[end - 1] << 24) >>> 0;
}

/**
 * Reads fixed 32 bits as an unsigned 32 bit integer.
 * @returns {number} Value read
 */
Reader.prototype.fixed32 = function read_fixed32() {

    /* istanbul ignore if */
    if (this.pos + 4 > this.len)
        throw indexOutOfRange(this, 4);

    return readFixed32_end(this.buf, this.pos += 4);
};

/**
 * Reads fixed 32 bits as a signed 32 bit integer.
 * @returns {number} Value read
 */
Reader.prototype.sfixed32 = function read_sfixed32() {

    /* istanbul ignore if */
    if (this.pos + 4 > this.len)
        throw indexOutOfRange(this, 4);

    return readFixed32_end(this.buf, this.pos += 4) | 0;
};

/* eslint-disable no-invalid-this */

function readFixed64(/* this: Reader */) {

    /* istanbul ignore if */
    if (this.pos + 8 > this.len)
        throw indexOutOfRange(this, 8);

    return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));
}

/* eslint-enable no-invalid-this */

/**
 * Reads fixed 64 bits.
 * @name Reader#fixed64
 * @function
 * @returns {Long} Value read
 */

/**
 * Reads zig-zag encoded fixed 64 bits.
 * @name Reader#sfixed64
 * @function
 * @returns {Long} Value read
 */

/**
 * Reads a float (32 bit) as a number.
 * @function
 * @returns {number} Value read
 */
Reader.prototype.float = function read_float() {

    /* istanbul ignore if */
    if (this.pos + 4 > this.len)
        throw indexOutOfRange(this, 4);

    var value = util.float.readFloatLE(this.buf, this.pos);
    this.pos += 4;
    return value;
};

/**
 * Reads a double (64 bit float) as a number.
 * @function
 * @returns {number} Value read
 */
Reader.prototype.double = function read_double() {

    /* istanbul ignore if */
    if (this.pos + 8 > this.len)
        throw indexOutOfRange(this, 4);

    var value = util.float.readDoubleLE(this.buf, this.pos);
    this.pos += 8;
    return value;
};

/**
 * Reads a sequence of bytes preceeded by its length as a varint.
 * @returns {Uint8Array} Value read
 */
Reader.prototype.bytes = function read_bytes() {
    var length = this.uint32(),
        start  = this.pos,
        end    = this.pos + length;

    /* istanbul ignore if */
    if (end > this.len)
        throw indexOutOfRange(this, length);

    this.pos += length;
    if (Array.isArray(this.buf)) // plain array
        return this.buf.slice(start, end);
    return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1
        ? new this.buf.constructor(0)
        : this._slice.call(this.buf, start, end);
};

/**
 * Reads a string preceeded by its byte length as a varint.
 * @returns {string} Value read
 */
Reader.prototype.string = function read_string() {
    var bytes = this.bytes();
    return utf8.read(bytes, 0, bytes.length);
};

/**
 * Skips the specified number of bytes if specified, otherwise skips a varint.
 * @param {number} [length] Length if known, otherwise a varint is assumed
 * @returns {Reader} `this`
 */
Reader.prototype.skip = function skip(length) {
    if (typeof length === "number") {
        /* istanbul ignore if */
        if (this.pos + length > this.len)
            throw indexOutOfRange(this, length);
        this.pos += length;
    } else {
        do {
            /* istanbul ignore if */
            if (this.pos >= this.len)
                throw indexOutOfRange(this);
        } while (this.buf[this.pos++] & 128);
    }
    return this;
};

/**
 * Skips the next element of the specified wire type.
 * @param {number} wireType Wire type received
 * @returns {Reader} `this`
 */
Reader.prototype.skipType = function(wireType) {
    switch (wireType) {
        case 0:
            this.skip();
            break;
        case 1:
            this.skip(8);
            break;
        case 2:
            this.skip(this.uint32());
            break;
        case 3:
            while ((wireType = this.uint32() & 7) !== 4) {
                this.skipType(wireType);
            }
            break;
        case 5:
            this.skip(4);
            break;

        /* istanbul ignore next */
        default:
            throw Error("invalid wire type " + wireType + " at offset " + this.pos);
    }
    return this;
};

Reader._configure = function(BufferReader_) {
    BufferReader = BufferReader_;
    Reader.create = create();
    BufferReader._configure();

    var fn = util.Long ? "toLong" : /* istanbul ignore next */ "toNumber";
    util.merge(Reader.prototype, {

        int64: function read_int64() {
            return readLongVarint.call(this)[fn](false);
        },

        uint64: function read_uint64() {
            return readLongVarint.call(this)[fn](true);
        },

        sint64: function read_sint64() {
            return readLongVarint.call(this).zzDecode()[fn](false);
        },

        fixed64: function read_fixed64() {
            return readFixed64.call(this)[fn](true);
        },

        sfixed64: function read_sfixed64() {
            return readFixed64.call(this)[fn](false);
        }

    });
};


/***/ }),

/***/ "./node_modules/protobufjs/src/reader_buffer.js":
/*!******************************************************!*\
  !*** ./node_modules/protobufjs/src/reader_buffer.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

module.exports = BufferReader;

// extends Reader
var Reader = __webpack_require__(/*! ./reader */ "./node_modules/protobufjs/src/reader.js");
(BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;

var util = __webpack_require__(/*! ./util/minimal */ "./node_modules/protobufjs/src/util/minimal.js");

/**
 * Constructs a new buffer reader instance.
 * @classdesc Wire format reader using node buffers.
 * @extends Reader
 * @constructor
 * @param {Buffer} buffer Buffer to read from
 */
function BufferReader(buffer) {
    Reader.call(this, buffer);

    /**
     * Read buffer.
     * @name BufferReader#buf
     * @type {Buffer}
     */
}

BufferReader._configure = function () {
    /* istanbul ignore else */
    if (util.Buffer)
        BufferReader.prototype._slice = util.Buffer.prototype.slice;
};


/**
 * @override
 */
BufferReader.prototype.string = function read_string_buffer() {
    var len = this.uint32(); // modifies pos
    return this.buf.utf8Slice
        ? this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len))
        : this.buf.toString("utf-8", this.pos, this.pos = Math.min(this.pos + len, this.len));
};

/**
 * Reads a sequence of bytes preceeded by its length as a varint.
 * @name BufferReader#bytes
 * @function
 * @returns {Buffer} Value read
 */

BufferReader._configure();


/***/ }),

/***/ "./node_modules/protobufjs/src/roots.js":
/*!**********************************************!*\
  !*** ./node_modules/protobufjs/src/roots.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

module.exports = {};

/**
 * Named roots.
 * This is where pbjs stores generated structures (the option `-r, --root` specifies a name).
 * Can also be used manually to make roots available accross modules.
 * @name roots
 * @type {Object.<string,Root>}
 * @example
 * // pbjs -r myroot -o compiled.js ...
 *
 * // in another module:
 * require("./compiled.js");
 *
 * // in any subsequent module:
 * var root = protobuf.roots["myroot"];
 */


/***/ }),

/***/ "./node_modules/protobufjs/src/rpc.js":
/*!********************************************!*\
  !*** ./node_modules/protobufjs/src/rpc.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Streaming RPC helpers.
 * @namespace
 */
var rpc = exports;

/**
 * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.
 * @typedef RPCImpl
 * @type {function}
 * @param {Method|rpc.ServiceMethod<Message<{}>,Message<{}>>} method Reflected or static method being called
 * @param {Uint8Array} requestData Request data
 * @param {RPCImplCallback} callback Callback function
 * @returns {undefined}
 * @example
 * function rpcImpl(method, requestData, callback) {
 *     if (protobuf.util.lcFirst(method.name) !== "myMethod") // compatible with static code
 *         throw Error("no such method");
 *     asynchronouslyObtainAResponse(requestData, function(err, responseData) {
 *         callback(err, responseData);
 *     });
 * }
 */

/**
 * Node-style callback as used by {@link RPCImpl}.
 * @typedef RPCImplCallback
 * @type {function}
 * @param {Error|null} error Error, if any, otherwise `null`
 * @param {Uint8Array|null} [response] Response data or `null` to signal end of stream, if there hasn't been an error
 * @returns {undefined}
 */

rpc.Service = __webpack_require__(/*! ./rpc/service */ "./node_modules/protobufjs/src/rpc/service.js");


/***/ }),

/***/ "./node_modules/protobufjs/src/rpc/service.js":
/*!****************************************************!*\
  !*** ./node_modules/protobufjs/src/rpc/service.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

module.exports = Service;

var util = __webpack_require__(/*! ../util/minimal */ "./node_modules/protobufjs/src/util/minimal.js");

// Extends EventEmitter
(Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;

/**
 * A service method callback as used by {@link rpc.ServiceMethod|ServiceMethod}.
 *
 * Differs from {@link RPCImplCallback} in that it is an actual callback of a service method which may not return `response = null`.
 * @typedef rpc.ServiceMethodCallback
 * @template TRes extends Message<TRes>
 * @type {function}
 * @param {Error|null} error Error, if any
 * @param {TRes} [response] Response message
 * @returns {undefined}
 */

/**
 * A service method part of a {@link rpc.Service} as created by {@link Service.create}.
 * @typedef rpc.ServiceMethod
 * @template TReq extends Message<TReq>
 * @template TRes extends Message<TRes>
 * @type {function}
 * @param {TReq|Properties<TReq>} request Request message or plain object
 * @param {rpc.ServiceMethodCallback<TRes>} [callback] Node-style callback called with the error, if any, and the response message
 * @returns {Promise<Message<TRes>>} Promise if `callback` has been omitted, otherwise `undefined`
 */

/**
 * Constructs a new RPC service instance.
 * @classdesc An RPC service as returned by {@link Service#create}.
 * @exports rpc.Service
 * @extends util.EventEmitter
 * @constructor
 * @param {RPCImpl} rpcImpl RPC implementation
 * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
 * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
 */
function Service(rpcImpl, requestDelimited, responseDelimited) {

    if (typeof rpcImpl !== "function")
        throw TypeError("rpcImpl must be a function");

    util.EventEmitter.call(this);

    /**
     * RPC implementation. Becomes `null` once the service is ended.
     * @type {RPCImpl|null}
     */
    this.rpcImpl = rpcImpl;

    /**
     * Whether requests are length-delimited.
     * @type {boolean}
     */
    this.requestDelimited = Boolean(requestDelimited);

    /**
     * Whether responses are length-delimited.
     * @type {boolean}
     */
    this.responseDelimited = Boolean(responseDelimited);
}

/**
 * Calls a service method through {@link rpc.Service#rpcImpl|rpcImpl}.
 * @param {Method|rpc.ServiceMethod<TReq,TRes>} method Reflected or static method
 * @param {Constructor<TReq>} requestCtor Request constructor
 * @param {Constructor<TRes>} responseCtor Response constructor
 * @param {TReq|Properties<TReq>} request Request message or plain object
 * @param {rpc.ServiceMethodCallback<TRes>} callback Service callback
 * @returns {undefined}
 * @template TReq extends Message<TReq>
 * @template TRes extends Message<TRes>
 */
Service.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {

    if (!request)
        throw TypeError("request must be specified");

    var self = this;
    if (!callback)
        return util.asPromise(rpcCall, self, method, requestCtor, responseCtor, request);

    if (!self.rpcImpl) {
        setTimeout(function() { callback(Error("already ended")); }, 0);
        return undefined;
    }

    try {
        return self.rpcImpl(
            method,
            requestCtor[self.requestDelimited ? "encodeDelimited" : "encode"](request).finish(),
            function rpcCallback(err, response) {

                if (err) {
                    self.emit("error", err, method);
                    return callback(err);
                }

                if (response === null) {
                    self.end(/* endedByRPC */ true);
                    return undefined;
                }

                if (!(response instanceof responseCtor)) {
                    try {
                        response = responseCtor[self.responseDelimited ? "decodeDelimited" : "decode"](response);
                    } catch (err) {
                        self.emit("error", err, method);
                        return callback(err);
                    }
                }

                self.emit("data", response, method);
                return callback(null, response);
            }
        );
    } catch (err) {
        self.emit("error", err, method);
        setTimeout(function() { callback(err); }, 0);
        return undefined;
    }
};

/**
 * Ends this service and emits the `end` event.
 * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.
 * @returns {rpc.Service} `this`
 */
Service.prototype.end = function end(endedByRPC) {
    if (this.rpcImpl) {
        if (!endedByRPC) // signal end to rpcImpl
            this.rpcImpl(null, null, null);
        this.rpcImpl = null;
        this.emit("end").off();
    }
    return this;
};


/***/ }),

/***/ "./node_modules/protobufjs/src/util/longbits.js":
/*!******************************************************!*\
  !*** ./node_modules/protobufjs/src/util/longbits.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

module.exports = LongBits;

var util = __webpack_require__(/*! ../util/minimal */ "./node_modules/protobufjs/src/util/minimal.js");

/**
 * Constructs new long bits.
 * @classdesc Helper class for working with the low and high bits of a 64 bit value.
 * @memberof util
 * @constructor
 * @param {number} lo Low 32 bits, unsigned
 * @param {number} hi High 32 bits, unsigned
 */
function LongBits(lo, hi) {

    // note that the casts below are theoretically unnecessary as of today, but older statically
    // generated converter code might still call the ctor with signed 32bits. kept for compat.

    /**
     * Low bits.
     * @type {number}
     */
    this.lo = lo >>> 0;

    /**
     * High bits.
     * @type {number}
     */
    this.hi = hi >>> 0;
}

/**
 * Zero bits.
 * @memberof util.LongBits
 * @type {util.LongBits}
 */
var zero = LongBits.zero = new LongBits(0, 0);

zero.toNumber = function() { return 0; };
zero.zzEncode = zero.zzDecode = function() { return this; };
zero.length = function() { return 1; };

/**
 * Zero hash.
 * @memberof util.LongBits
 * @type {string}
 */
var zeroHash = LongBits.zeroHash = "\0\0\0\0\0\0\0\0";

/**
 * Constructs new long bits from the specified number.
 * @param {number} value Value
 * @returns {util.LongBits} Instance
 */
LongBits.fromNumber = function fromNumber(value) {
    if (value === 0)
        return zero;
    var sign = value < 0;
    if (sign)
        value = -value;
    var lo = value >>> 0,
        hi = (value - lo) / 4294967296 >>> 0;
    if (sign) {
        hi = ~hi >>> 0;
        lo = ~lo >>> 0;
        if (++lo > 4294967295) {
            lo = 0;
            if (++hi > 4294967295)
                hi = 0;
        }
    }
    return new LongBits(lo, hi);
};

/**
 * Constructs new long bits from a number, long or string.
 * @param {Long|number|string} value Value
 * @returns {util.LongBits} Instance
 */
LongBits.from = function from(value) {
    if (typeof value === "number")
        return LongBits.fromNumber(value);
    if (util.isString(value)) {
        /* istanbul ignore else */
        if (util.Long)
            value = util.Long.fromString(value);
        else
            return LongBits.fromNumber(parseInt(value, 10));
    }
    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;
};

/**
 * Converts this long bits to a possibly unsafe JavaScript number.
 * @param {boolean} [unsigned=false] Whether unsigned or not
 * @returns {number} Possibly unsafe number
 */
LongBits.prototype.toNumber = function toNumber(unsigned) {
    if (!unsigned && this.hi >>> 31) {
        var lo = ~this.lo + 1 >>> 0,
            hi = ~this.hi     >>> 0;
        if (!lo)
            hi = hi + 1 >>> 0;
        return -(lo + hi * 4294967296);
    }
    return this.lo + this.hi * 4294967296;
};

/**
 * Converts this long bits to a long.
 * @param {boolean} [unsigned=false] Whether unsigned or not
 * @returns {Long} Long
 */
LongBits.prototype.toLong = function toLong(unsigned) {
    return util.Long
        ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))
        /* istanbul ignore next */
        : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };
};

var charCodeAt = String.prototype.charCodeAt;

/**
 * Constructs new long bits from the specified 8 characters long hash.
 * @param {string} hash Hash
 * @returns {util.LongBits} Bits
 */
LongBits.fromHash = function fromHash(hash) {
    if (hash === zeroHash)
        return zero;
    return new LongBits(
        ( charCodeAt.call(hash, 0)
        | charCodeAt.call(hash, 1) << 8
        | charCodeAt.call(hash, 2) << 16
        | charCodeAt.call(hash, 3) << 24) >>> 0
    ,
        ( charCodeAt.call(hash, 4)
        | charCodeAt.call(hash, 5) << 8
        | charCodeAt.call(hash, 6) << 16
        | charCodeAt.call(hash, 7) << 24) >>> 0
    );
};

/**
 * Converts this long bits to a 8 characters long hash.
 * @returns {string} Hash
 */
LongBits.prototype.toHash = function toHash() {
    return String.fromCharCode(
        this.lo        & 255,
        this.lo >>> 8  & 255,
        this.lo >>> 16 & 255,
        this.lo >>> 24      ,
        this.hi        & 255,
        this.hi >>> 8  & 255,
        this.hi >>> 16 & 255,
        this.hi >>> 24
    );
};

/**
 * Zig-zag encodes this long bits.
 * @returns {util.LongBits} `this`
 */
LongBits.prototype.zzEncode = function zzEncode() {
    var mask =   this.hi >> 31;
    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;
    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;
    return this;
};

/**
 * Zig-zag decodes this long bits.
 * @returns {util.LongBits} `this`
 */
LongBits.prototype.zzDecode = function zzDecode() {
    var mask = -(this.lo & 1);
    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;
    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;
    return this;
};

/**
 * Calculates the length of this longbits when encoded as a varint.
 * @returns {number} Length
 */
LongBits.prototype.length = function length() {
    var part0 =  this.lo,
        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,
        part2 =  this.hi >>> 24;
    return part2 === 0
         ? part1 === 0
           ? part0 < 16384
             ? part0 < 128 ? 1 : 2
             : part0 < 2097152 ? 3 : 4
           : part1 < 16384
             ? part1 < 128 ? 5 : 6
             : part1 < 2097152 ? 7 : 8
         : part2 < 128 ? 9 : 10;
};


/***/ }),

/***/ "./node_modules/protobufjs/src/util/minimal.js":
/*!*****************************************************!*\
  !*** ./node_modules/protobufjs/src/util/minimal.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {
var util = exports;

// used to return a Promise where callback is omitted
util.asPromise = __webpack_require__(/*! @protobufjs/aspromise */ "./node_modules/@protobufjs/aspromise/index.js");

// converts to / from base64 encoded strings
util.base64 = __webpack_require__(/*! @protobufjs/base64 */ "./node_modules/@protobufjs/base64/index.js");

// base class of rpc.Service
util.EventEmitter = __webpack_require__(/*! @protobufjs/eventemitter */ "./node_modules/@protobufjs/eventemitter/index.js");

// float handling accross browsers
util.float = __webpack_require__(/*! @protobufjs/float */ "./node_modules/@protobufjs/float/index.js");

// requires modules optionally and hides the call from bundlers
util.inquire = __webpack_require__(/*! @protobufjs/inquire */ "./node_modules/@protobufjs/inquire/index.js");

// converts to / from utf8 encoded strings
util.utf8 = __webpack_require__(/*! @protobufjs/utf8 */ "./node_modules/@protobufjs/utf8/index.js");

// provides a node-like buffer pool in the browser
util.pool = __webpack_require__(/*! @protobufjs/pool */ "./node_modules/@protobufjs/pool/index.js");

// utility to work with the low and high bits of a 64 bit value
util.LongBits = __webpack_require__(/*! ./longbits */ "./node_modules/protobufjs/src/util/longbits.js");

/**
 * Whether running within node or not.
 * @memberof util
 * @type {boolean}
 */
util.isNode = Boolean(typeof global !== "undefined"
                   && global
                   && global.process
                   && global.process.versions
                   && global.process.versions.node);

/**
 * Global object reference.
 * @memberof util
 * @type {Object}
 */
util.global = util.isNode && global
           || typeof window !== "undefined" && window
           || typeof self   !== "undefined" && self
           || this; // eslint-disable-line no-invalid-this

/**
 * An immuable empty array.
 * @memberof util
 * @type {Array.<*>}
 * @const
 */
util.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */ []; // used on prototypes

/**
 * An immutable empty object.
 * @type {Object}
 * @const
 */
util.emptyObject = Object.freeze ? Object.freeze({}) : /* istanbul ignore next */ {}; // used on prototypes

/**
 * Tests if the specified value is an integer.
 * @function
 * @param {*} value Value to test
 * @returns {boolean} `true` if the value is an integer
 */
util.isInteger = Number.isInteger || /* istanbul ignore next */ function isInteger(value) {
    return typeof value === "number" && isFinite(value) && Math.floor(value) === value;
};

/**
 * Tests if the specified value is a string.
 * @param {*} value Value to test
 * @returns {boolean} `true` if the value is a string
 */
util.isString = function isString(value) {
    return typeof value === "string" || value instanceof String;
};

/**
 * Tests if the specified value is a non-null object.
 * @param {*} value Value to test
 * @returns {boolean} `true` if the value is a non-null object
 */
util.isObject = function isObject(value) {
    return value && typeof value === "object";
};

/**
 * Checks if a property on a message is considered to be present.
 * This is an alias of {@link util.isSet}.
 * @function
 * @param {Object} obj Plain object or message instance
 * @param {string} prop Property name
 * @returns {boolean} `true` if considered to be present, otherwise `false`
 */
util.isset =

/**
 * Checks if a property on a message is considered to be present.
 * @param {Object} obj Plain object or message instance
 * @param {string} prop Property name
 * @returns {boolean} `true` if considered to be present, otherwise `false`
 */
util.isSet = function isSet(obj, prop) {
    var value = obj[prop];
    if (value != null && obj.hasOwnProperty(prop)) // eslint-disable-line eqeqeq, no-prototype-builtins
        return typeof value !== "object" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;
    return false;
};

/**
 * Any compatible Buffer instance.
 * This is a minimal stand-alone definition of a Buffer instance. The actual type is that exported by node's typings.
 * @interface Buffer
 * @extends Uint8Array
 */

/**
 * Node's Buffer class if available.
 * @type {Constructor<Buffer>}
 */
util.Buffer = (function() {
    try {
        var Buffer = util.inquire("buffer").Buffer;
        // refuse to use non-node buffers if not explicitly assigned (perf reasons):
        return Buffer.prototype.utf8Write ? Buffer : /* istanbul ignore next */ null;
    } catch (e) {
        /* istanbul ignore next */
        return null;
    }
})();

// Internal alias of or polyfull for Buffer.from.
util._Buffer_from = null;

// Internal alias of or polyfill for Buffer.allocUnsafe.
util._Buffer_allocUnsafe = null;

/**
 * Creates a new buffer of whatever type supported by the environment.
 * @param {number|number[]} [sizeOrArray=0] Buffer size or number array
 * @returns {Uint8Array|Buffer} Buffer
 */
util.newBuffer = function newBuffer(sizeOrArray) {
    /* istanbul ignore next */
    return typeof sizeOrArray === "number"
        ? util.Buffer
            ? util._Buffer_allocUnsafe(sizeOrArray)
            : new util.Array(sizeOrArray)
        : util.Buffer
            ? util._Buffer_from(sizeOrArray)
            : typeof Uint8Array === "undefined"
                ? sizeOrArray
                : new Uint8Array(sizeOrArray);
};

/**
 * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.
 * @type {Constructor<Uint8Array>}
 */
util.Array = typeof Uint8Array !== "undefined" ? Uint8Array /* istanbul ignore next */ : Array;

/**
 * Any compatible Long instance.
 * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.
 * @interface Long
 * @property {number} low Low bits
 * @property {number} high High bits
 * @property {boolean} unsigned Whether unsigned or not
 */

/**
 * Long.js's Long class if available.
 * @type {Constructor<Long>}
 */
util.Long = /* istanbul ignore next */ util.global.dcodeIO && /* istanbul ignore next */ util.global.dcodeIO.Long
         || /* istanbul ignore next */ util.global.Long
         || util.inquire("long");

/**
 * Regular expression used to verify 2 bit (`bool`) map keys.
 * @type {RegExp}
 * @const
 */
util.key2Re = /^true|false|0|1$/;

/**
 * Regular expression used to verify 32 bit (`int32` etc.) map keys.
 * @type {RegExp}
 * @const
 */
util.key32Re = /^-?(?:0|[1-9][0-9]*)$/;

/**
 * Regular expression used to verify 64 bit (`int64` etc.) map keys.
 * @type {RegExp}
 * @const
 */
util.key64Re = /^(?:[\\x00-\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;

/**
 * Converts a number or long to an 8 characters long hash string.
 * @param {Long|number} value Value to convert
 * @returns {string} Hash
 */
util.longToHash = function longToHash(value) {
    return value
        ? util.LongBits.from(value).toHash()
        : util.LongBits.zeroHash;
};

/**
 * Converts an 8 characters long hash string to a long or number.
 * @param {string} hash Hash
 * @param {boolean} [unsigned=false] Whether unsigned or not
 * @returns {Long|number} Original value
 */
util.longFromHash = function longFromHash(hash, unsigned) {
    var bits = util.LongBits.fromHash(hash);
    if (util.Long)
        return util.Long.fromBits(bits.lo, bits.hi, unsigned);
    return bits.toNumber(Boolean(unsigned));
};

/**
 * Merges the properties of the source object into the destination object.
 * @memberof util
 * @param {Object.<string,*>} dst Destination object
 * @param {Object.<string,*>} src Source object
 * @param {boolean} [ifNotSet=false] Merges only if the key is not already set
 * @returns {Object.<string,*>} Destination object
 */
function merge(dst, src, ifNotSet) { // used by converters
    for (var keys = Object.keys(src), i = 0; i < keys.length; ++i)
        if (dst[keys[i]] === undefined || !ifNotSet)
            dst[keys[i]] = src[keys[i]];
    return dst;
}

util.merge = merge;

/**
 * Converts the first character of a string to lower case.
 * @param {string} str String to convert
 * @returns {string} Converted string
 */
util.lcFirst = function lcFirst(str) {
    return str.charAt(0).toLowerCase() + str.substring(1);
};

/**
 * Creates a custom error constructor.
 * @memberof util
 * @param {string} name Error name
 * @returns {Constructor<Error>} Custom error constructor
 */
function newError(name) {

    function CustomError(message, properties) {

        if (!(this instanceof CustomError))
            return new CustomError(message, properties);

        // Error.call(this, message);
        // ^ just returns a new error instance because the ctor can be called as a function

        Object.defineProperty(this, "message", { get: function() { return message; } });

        /* istanbul ignore next */
        if (Error.captureStackTrace) // node
            Error.captureStackTrace(this, CustomError);
        else
            Object.defineProperty(this, "stack", { value: new Error().stack || "" });

        if (properties)
            merge(this, properties);
    }

    (CustomError.prototype = Object.create(Error.prototype)).constructor = CustomError;

    Object.defineProperty(CustomError.prototype, "name", { get: function() { return name; } });

    CustomError.prototype.toString = function toString() {
        return this.name + ": " + this.message;
    };

    return CustomError;
}

util.newError = newError;

/**
 * Constructs a new protocol error.
 * @classdesc Error subclass indicating a protocol specifc error.
 * @memberof util
 * @extends Error
 * @template T extends Message<T>
 * @constructor
 * @param {string} message Error message
 * @param {Object.<string,*>} [properties] Additional properties
 * @example
 * try {
 *     MyMessage.decode(someBuffer); // throws if required fields are missing
 * } catch (e) {
 *     if (e instanceof ProtocolError && e.instance)
 *         console.log("decoded so far: " + JSON.stringify(e.instance));
 * }
 */
util.ProtocolError = newError("ProtocolError");

/**
 * So far decoded message instance.
 * @name util.ProtocolError#instance
 * @type {Message<T>}
 */

/**
 * A OneOf getter as returned by {@link util.oneOfGetter}.
 * @typedef OneOfGetter
 * @type {function}
 * @returns {string|undefined} Set field name, if any
 */

/**
 * Builds a getter for a oneof's present field name.
 * @param {string[]} fieldNames Field names
 * @returns {OneOfGetter} Unbound getter
 */
util.oneOfGetter = function getOneOf(fieldNames) {
    var fieldMap = {};
    for (var i = 0; i < fieldNames.length; ++i)
        fieldMap[fieldNames[i]] = 1;

    /**
     * @returns {string|undefined} Set field name, if any
     * @this Object
     * @ignore
     */
    return function() { // eslint-disable-line consistent-return
        for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)
            if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null)
                return keys[i];
    };
};

/**
 * A OneOf setter as returned by {@link util.oneOfSetter}.
 * @typedef OneOfSetter
 * @type {function}
 * @param {string|undefined} value Field name
 * @returns {undefined}
 */

/**
 * Builds a setter for a oneof's present field name.
 * @param {string[]} fieldNames Field names
 * @returns {OneOfSetter} Unbound setter
 */
util.oneOfSetter = function setOneOf(fieldNames) {

    /**
     * @param {string} name Field name
     * @returns {undefined}
     * @this Object
     * @ignore
     */
    return function(name) {
        for (var i = 0; i < fieldNames.length; ++i)
            if (fieldNames[i] !== name)
                delete this[fieldNames[i]];
    };
};

/**
 * Default conversion options used for {@link Message#toJSON} implementations.
 *
 * These options are close to proto3's JSON mapping with the exception that internal types like Any are handled just like messages. More precisely:
 *
 * - Longs become strings
 * - Enums become string keys
 * - Bytes become base64 encoded strings
 * - (Sub-)Messages become plain objects
 * - Maps become plain objects with all string keys
 * - Repeated fields become arrays
 * - NaN and Infinity for float and double fields become strings
 *
 * @type {IConversionOptions}
 * @see https://developers.google.com/protocol-buffers/docs/proto3?hl=en#json
 */
util.toJSONOptions = {
    longs: String,
    enums: String,
    bytes: String,
    json: true
};

// Sets up buffer utility according to the environment (called in index-minimal)
util._configure = function() {
    var Buffer = util.Buffer;
    /* istanbul ignore if */
    if (!Buffer) {
        util._Buffer_from = util._Buffer_allocUnsafe = null;
        return;
    }
    // because node 4.x buffers are incompatible & immutable
    // see: https://github.com/dcodeIO/protobuf.js/pull/665
    util._Buffer_from = Buffer.from !== Uint8Array.from && Buffer.from ||
        /* istanbul ignore next */
        function Buffer_from(value, encoding) {
            return new Buffer(value, encoding);
        };
    util._Buffer_allocUnsafe = Buffer.allocUnsafe ||
        /* istanbul ignore next */
        function Buffer_allocUnsafe(size) {
            return new Buffer(size);
        };
};

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/protobufjs/src/writer.js":
/*!***********************************************!*\
  !*** ./node_modules/protobufjs/src/writer.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

module.exports = Writer;

var util      = __webpack_require__(/*! ./util/minimal */ "./node_modules/protobufjs/src/util/minimal.js");

var BufferWriter; // cyclic

var LongBits  = util.LongBits,
    base64    = util.base64,
    utf8      = util.utf8;

/**
 * Constructs a new writer operation instance.
 * @classdesc Scheduled writer operation.
 * @constructor
 * @param {function(*, Uint8Array, number)} fn Function to call
 * @param {number} len Value byte length
 * @param {*} val Value to write
 * @ignore
 */
function Op(fn, len, val) {

    /**
     * Function to call.
     * @type {function(Uint8Array, number, *)}
     */
    this.fn = fn;

    /**
     * Value byte length.
     * @type {number}
     */
    this.len = len;

    /**
     * Next operation.
     * @type {Writer.Op|undefined}
     */
    this.next = undefined;

    /**
     * Value to write.
     * @type {*}
     */
    this.val = val; // type varies
}

/* istanbul ignore next */
function noop() {} // eslint-disable-line no-empty-function

/**
 * Constructs a new writer state instance.
 * @classdesc Copied writer state.
 * @memberof Writer
 * @constructor
 * @param {Writer} writer Writer to copy state from
 * @ignore
 */
function State(writer) {

    /**
     * Current head.
     * @type {Writer.Op}
     */
    this.head = writer.head;

    /**
     * Current tail.
     * @type {Writer.Op}
     */
    this.tail = writer.tail;

    /**
     * Current buffer length.
     * @type {number}
     */
    this.len = writer.len;

    /**
     * Next state.
     * @type {State|null}
     */
    this.next = writer.states;
}

/**
 * Constructs a new writer instance.
 * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.
 * @constructor
 */
function Writer() {

    /**
     * Current length.
     * @type {number}
     */
    this.len = 0;

    /**
     * Operations head.
     * @type {Object}
     */
    this.head = new Op(noop, 0, 0);

    /**
     * Operations tail
     * @type {Object}
     */
    this.tail = this.head;

    /**
     * Linked forked states.
     * @type {Object|null}
     */
    this.states = null;

    // When a value is written, the writer calculates its byte length and puts it into a linked
    // list of operations to perform when finish() is called. This both allows us to allocate
    // buffers of the exact required size and reduces the amount of work we have to do compared
    // to first calculating over objects and then encoding over objects. In our case, the encoding
    // part is just a linked list walk calling operations with already prepared values.
}

var create = function create() {
    return util.Buffer
        ? function create_buffer_setup() {
            return (Writer.create = function create_buffer() {
                return new BufferWriter();
            })();
        }
        /* istanbul ignore next */
        : function create_array() {
            return new Writer();
        };
};

/**
 * Creates a new writer.
 * @function
 * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}
 */
Writer.create = create();

/**
 * Allocates a buffer of the specified size.
 * @param {number} size Buffer size
 * @returns {Uint8Array} Buffer
 */
Writer.alloc = function alloc(size) {
    return new util.Array(size);
};

// Use Uint8Array buffer pool in the browser, just like node does with buffers
/* istanbul ignore else */
if (util.Array !== Array)
    Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);

/**
 * Pushes a new operation to the queue.
 * @param {function(Uint8Array, number, *)} fn Function to call
 * @param {number} len Value byte length
 * @param {number} val Value to write
 * @returns {Writer} `this`
 * @private
 */
Writer.prototype._push = function push(fn, len, val) {
    this.tail = this.tail.next = new Op(fn, len, val);
    this.len += len;
    return this;
};

function writeByte(val, buf, pos) {
    buf[pos] = val & 255;
}

function writeVarint32(val, buf, pos) {
    while (val > 127) {
        buf[pos++] = val & 127 | 128;
        val >>>= 7;
    }
    buf[pos] = val;
}

/**
 * Constructs a new varint writer operation instance.
 * @classdesc Scheduled varint writer operation.
 * @extends Op
 * @constructor
 * @param {number} len Value byte length
 * @param {number} val Value to write
 * @ignore
 */
function VarintOp(len, val) {
    this.len = len;
    this.next = undefined;
    this.val = val;
}

VarintOp.prototype = Object.create(Op.prototype);
VarintOp.prototype.fn = writeVarint32;

/**
 * Writes an unsigned 32 bit value as a varint.
 * @param {number} value Value to write
 * @returns {Writer} `this`
 */
Writer.prototype.uint32 = function write_uint32(value) {
    // here, the call to this.push has been inlined and a varint specific Op subclass is used.
    // uint32 is by far the most frequently used operation and benefits significantly from this.
    this.len += (this.tail = this.tail.next = new VarintOp(
        (value = value >>> 0)
                < 128       ? 1
        : value < 16384     ? 2
        : value < 2097152   ? 3
        : value < 268435456 ? 4
        :                     5,
    value)).len;
    return this;
};

/**
 * Writes a signed 32 bit value as a varint.
 * @function
 * @param {number} value Value to write
 * @returns {Writer} `this`
 */
Writer.prototype.int32 = function write_int32(value) {
    return value < 0
        ? this._push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec
        : this.uint32(value);
};

/**
 * Writes a 32 bit value as a varint, zig-zag encoded.
 * @param {number} value Value to write
 * @returns {Writer} `this`
 */
Writer.prototype.sint32 = function write_sint32(value) {
    return this.uint32((value << 1 ^ value >> 31) >>> 0);
};

function writeVarint64(val, buf, pos) {
    while (val.hi) {
        buf[pos++] = val.lo & 127 | 128;
        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;
        val.hi >>>= 7;
    }
    while (val.lo > 127) {
        buf[pos++] = val.lo & 127 | 128;
        val.lo = val.lo >>> 7;
    }
    buf[pos++] = val.lo;
}

/**
 * Writes an unsigned 64 bit value as a varint.
 * @param {Long|number|string} value Value to write
 * @returns {Writer} `this`
 * @throws {TypeError} If `value` is a string and no long library is present.
 */
Writer.prototype.uint64 = function write_uint64(value) {
    var bits = LongBits.from(value);
    return this._push(writeVarint64, bits.length(), bits);
};

/**
 * Writes a signed 64 bit value as a varint.
 * @function
 * @param {Long|number|string} value Value to write
 * @returns {Writer} `this`
 * @throws {TypeError} If `value` is a string and no long library is present.
 */
Writer.prototype.int64 = Writer.prototype.uint64;

/**
 * Writes a signed 64 bit value as a varint, zig-zag encoded.
 * @param {Long|number|string} value Value to write
 * @returns {Writer} `this`
 * @throws {TypeError} If `value` is a string and no long library is present.
 */
Writer.prototype.sint64 = function write_sint64(value) {
    var bits = LongBits.from(value).zzEncode();
    return this._push(writeVarint64, bits.length(), bits);
};

/**
 * Writes a boolish value as a varint.
 * @param {boolean} value Value to write
 * @returns {Writer} `this`
 */
Writer.prototype.bool = function write_bool(value) {
    return this._push(writeByte, 1, value ? 1 : 0);
};

function writeFixed32(val, buf, pos) {
    buf[pos    ] =  val         & 255;
    buf[pos + 1] =  val >>> 8   & 255;
    buf[pos + 2] =  val >>> 16  & 255;
    buf[pos + 3] =  val >>> 24;
}

/**
 * Writes an unsigned 32 bit value as fixed 32 bits.
 * @param {number} value Value to write
 * @returns {Writer} `this`
 */
Writer.prototype.fixed32 = function write_fixed32(value) {
    return this._push(writeFixed32, 4, value >>> 0);
};

/**
 * Writes a signed 32 bit value as fixed 32 bits.
 * @function
 * @param {number} value Value to write
 * @returns {Writer} `this`
 */
Writer.prototype.sfixed32 = Writer.prototype.fixed32;

/**
 * Writes an unsigned 64 bit value as fixed 64 bits.
 * @param {Long|number|string} value Value to write
 * @returns {Writer} `this`
 * @throws {TypeError} If `value` is a string and no long library is present.
 */
Writer.prototype.fixed64 = function write_fixed64(value) {
    var bits = LongBits.from(value);
    return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);
};

/**
 * Writes a signed 64 bit value as fixed 64 bits.
 * @function
 * @param {Long|number|string} value Value to write
 * @returns {Writer} `this`
 * @throws {TypeError} If `value` is a string and no long library is present.
 */
Writer.prototype.sfixed64 = Writer.prototype.fixed64;

/**
 * Writes a float (32 bit).
 * @function
 * @param {number} value Value to write
 * @returns {Writer} `this`
 */
Writer.prototype.float = function write_float(value) {
    return this._push(util.float.writeFloatLE, 4, value);
};

/**
 * Writes a double (64 bit float).
 * @function
 * @param {number} value Value to write
 * @returns {Writer} `this`
 */
Writer.prototype.double = function write_double(value) {
    return this._push(util.float.writeDoubleLE, 8, value);
};

var writeBytes = util.Array.prototype.set
    ? function writeBytes_set(val, buf, pos) {
        buf.set(val, pos); // also works for plain array values
    }
    /* istanbul ignore next */
    : function writeBytes_for(val, buf, pos) {
        for (var i = 0; i < val.length; ++i)
            buf[pos + i] = val[i];
    };

/**
 * Writes a sequence of bytes.
 * @param {Uint8Array|string} value Buffer or base64 encoded string to write
 * @returns {Writer} `this`
 */
Writer.prototype.bytes = function write_bytes(value) {
    var len = value.length >>> 0;
    if (!len)
        return this._push(writeByte, 1, 0);
    if (util.isString(value)) {
        var buf = Writer.alloc(len = base64.length(value));
        base64.decode(value, buf, 0);
        value = buf;
    }
    return this.uint32(len)._push(writeBytes, len, value);
};

/**
 * Writes a string.
 * @param {string} value Value to write
 * @returns {Writer} `this`
 */
Writer.prototype.string = function write_string(value) {
    var len = utf8.length(value);
    return len
        ? this.uint32(len)._push(utf8.write, len, value)
        : this._push(writeByte, 1, 0);
};

/**
 * Forks this writer's state by pushing it to a stack.
 * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.
 * @returns {Writer} `this`
 */
Writer.prototype.fork = function fork() {
    this.states = new State(this);
    this.head = this.tail = new Op(noop, 0, 0);
    this.len = 0;
    return this;
};

/**
 * Resets this instance to the last state.
 * @returns {Writer} `this`
 */
Writer.prototype.reset = function reset() {
    if (this.states) {
        this.head   = this.states.head;
        this.tail   = this.states.tail;
        this.len    = this.states.len;
        this.states = this.states.next;
    } else {
        this.head = this.tail = new Op(noop, 0, 0);
        this.len  = 0;
    }
    return this;
};

/**
 * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.
 * @returns {Writer} `this`
 */
Writer.prototype.ldelim = function ldelim() {
    var head = this.head,
        tail = this.tail,
        len  = this.len;
    this.reset().uint32(len);
    if (len) {
        this.tail.next = head.next; // skip noop
        this.tail = tail;
        this.len += len;
    }
    return this;
};

/**
 * Finishes the write operation.
 * @returns {Uint8Array} Finished buffer
 */
Writer.prototype.finish = function finish() {
    var head = this.head.next, // skip noop
        buf  = this.constructor.alloc(this.len),
        pos  = 0;
    while (head) {
        head.fn(head.val, buf, pos);
        pos += head.len;
        head = head.next;
    }
    // this.head = this.tail = null;
    return buf;
};

Writer._configure = function(BufferWriter_) {
    BufferWriter = BufferWriter_;
    Writer.create = create();
    BufferWriter._configure();
};


/***/ }),

/***/ "./node_modules/protobufjs/src/writer_buffer.js":
/*!******************************************************!*\
  !*** ./node_modules/protobufjs/src/writer_buffer.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

module.exports = BufferWriter;

// extends Writer
var Writer = __webpack_require__(/*! ./writer */ "./node_modules/protobufjs/src/writer.js");
(BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;

var util = __webpack_require__(/*! ./util/minimal */ "./node_modules/protobufjs/src/util/minimal.js");

/**
 * Constructs a new buffer writer instance.
 * @classdesc Wire format writer using node buffers.
 * @extends Writer
 * @constructor
 */
function BufferWriter() {
    Writer.call(this);
}

BufferWriter._configure = function () {
    /**
     * Allocates a buffer of the specified size.
     * @function
     * @param {number} size Buffer size
     * @returns {Buffer} Buffer
     */
    BufferWriter.alloc = util._Buffer_allocUnsafe;

    BufferWriter.writeBytesBuffer = util.Buffer && util.Buffer.prototype instanceof Uint8Array && util.Buffer.prototype.set.name === "set"
        ? function writeBytesBuffer_set(val, buf, pos) {
          buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)
          // also works for plain array values
        }
        /* istanbul ignore next */
        : function writeBytesBuffer_copy(val, buf, pos) {
          if (val.copy) // Buffer values
            val.copy(buf, pos, 0, val.length);
          else for (var i = 0; i < val.length;) // plain array values
            buf[pos++] = val[i++];
        };
};


/**
 * @override
 */
BufferWriter.prototype.bytes = function write_bytes_buffer(value) {
    if (util.isString(value))
        value = util._Buffer_from(value, "base64");
    var len = value.length >>> 0;
    this.uint32(len);
    if (len)
        this._push(BufferWriter.writeBytesBuffer, len, value);
    return this;
};

function writeStringBuffer(val, buf, pos) {
    if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)
        util.utf8.write(val, buf, pos);
    else if (buf.utf8Write)
        buf.utf8Write(val, pos);
    else
        buf.write(val, pos);
}

/**
 * @override
 */
BufferWriter.prototype.string = function write_string_buffer(value) {
    var len = util.Buffer.byteLength(value);
    this.uint32(len);
    if (len)
        this._push(writeStringBuffer, len, value);
    return this;
};


/**
 * Finishes the write operation.
 * @name BufferWriter#finish
 * @function
 * @returns {Buffer} Finished buffer
 */

BufferWriter._configure();


/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || new Function("return this")();
} catch (e) {
	// This works if the window reference is available
	if (typeof window === "object") g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),

/***/ "./src/buttplug_ffi.js":
/*!*****************************!*\
  !*** ./src/buttplug_ffi.js ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/


var $protobuf = __webpack_require__(/*! protobufjs/minimal */ "./node_modules/protobufjs/minimal.js");

// Common aliases
var $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;

// Exported root namespace
var $root = $protobuf.roots["default"] || ($protobuf.roots["default"] = {});

$root.Buttplug = (function() {

    /**
     * Namespace Buttplug.
     * @exports Buttplug
     * @namespace
     */
    var Buttplug = {};

    /**
     * Endpoint enum.
     * @name Buttplug.Endpoint
     * @enum {number}
     * @property {number} Command=0 Command value
     * @property {number} Firmware=1 Firmware value
     * @property {number} Rx=2 Rx value
     * @property {number} RxAccel=3 RxAccel value
     * @property {number} RxBLEBattery=4 RxBLEBattery value
     * @property {number} RxPressure=5 RxPressure value
     * @property {number} RxTouch=6 RxTouch value
     * @property {number} Tx=7 Tx value
     * @property {number} TxMode=8 TxMode value
     * @property {number} TxShock=9 TxShock value
     * @property {number} TxVibrate=10 TxVibrate value
     * @property {number} TxVendorControl=11 TxVendorControl value
     * @property {number} Whitelist=12 Whitelist value
     * @property {number} Generic0=13 Generic0 value
     * @property {number} Generic1=14 Generic1 value
     * @property {number} Generic2=15 Generic2 value
     * @property {number} Generic3=16 Generic3 value
     * @property {number} Generic4=17 Generic4 value
     * @property {number} Generic5=18 Generic5 value
     * @property {number} Generic6=19 Generic6 value
     * @property {number} Generic7=20 Generic7 value
     * @property {number} Generic8=21 Generic8 value
     * @property {number} Generic9=22 Generic9 value
     * @property {number} Generic10=23 Generic10 value
     * @property {number} Generic11=24 Generic11 value
     * @property {number} Generic12=25 Generic12 value
     * @property {number} Generic13=26 Generic13 value
     * @property {number} Generic14=27 Generic14 value
     * @property {number} Generic15=28 Generic15 value
     * @property {number} Generic16=29 Generic16 value
     * @property {number} Generic17=30 Generic17 value
     * @property {number} Generic18=31 Generic18 value
     * @property {number} Generic19=32 Generic19 value
     * @property {number} Generic20=33 Generic20 value
     * @property {number} Generic21=34 Generic21 value
     * @property {number} Generic22=35 Generic22 value
     * @property {number} Generic23=36 Generic23 value
     * @property {number} Generic24=37 Generic24 value
     * @property {number} Generic25=38 Generic25 value
     * @property {number} Generic26=39 Generic26 value
     * @property {number} Generic27=40 Generic27 value
     * @property {number} Generic28=41 Generic28 value
     * @property {number} Generic29=42 Generic29 value
     * @property {number} Generic30=43 Generic30 value
     * @property {number} Generic31=44 Generic31 value
     */
    Buttplug.Endpoint = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "Command"] = 0;
        values[valuesById[1] = "Firmware"] = 1;
        values[valuesById[2] = "Rx"] = 2;
        values[valuesById[3] = "RxAccel"] = 3;
        values[valuesById[4] = "RxBLEBattery"] = 4;
        values[valuesById[5] = "RxPressure"] = 5;
        values[valuesById[6] = "RxTouch"] = 6;
        values[valuesById[7] = "Tx"] = 7;
        values[valuesById[8] = "TxMode"] = 8;
        values[valuesById[9] = "TxShock"] = 9;
        values[valuesById[10] = "TxVibrate"] = 10;
        values[valuesById[11] = "TxVendorControl"] = 11;
        values[valuesById[12] = "Whitelist"] = 12;
        values[valuesById[13] = "Generic0"] = 13;
        values[valuesById[14] = "Generic1"] = 14;
        values[valuesById[15] = "Generic2"] = 15;
        values[valuesById[16] = "Generic3"] = 16;
        values[valuesById[17] = "Generic4"] = 17;
        values[valuesById[18] = "Generic5"] = 18;
        values[valuesById[19] = "Generic6"] = 19;
        values[valuesById[20] = "Generic7"] = 20;
        values[valuesById[21] = "Generic8"] = 21;
        values[valuesById[22] = "Generic9"] = 22;
        values[valuesById[23] = "Generic10"] = 23;
        values[valuesById[24] = "Generic11"] = 24;
        values[valuesById[25] = "Generic12"] = 25;
        values[valuesById[26] = "Generic13"] = 26;
        values[valuesById[27] = "Generic14"] = 27;
        values[valuesById[28] = "Generic15"] = 28;
        values[valuesById[29] = "Generic16"] = 29;
        values[valuesById[30] = "Generic17"] = 30;
        values[valuesById[31] = "Generic18"] = 31;
        values[valuesById[32] = "Generic19"] = 32;
        values[valuesById[33] = "Generic20"] = 33;
        values[valuesById[34] = "Generic21"] = 34;
        values[valuesById[35] = "Generic22"] = 35;
        values[valuesById[36] = "Generic23"] = 36;
        values[valuesById[37] = "Generic24"] = 37;
        values[valuesById[38] = "Generic25"] = 38;
        values[valuesById[39] = "Generic26"] = 39;
        values[valuesById[40] = "Generic27"] = 40;
        values[valuesById[41] = "Generic28"] = 41;
        values[valuesById[42] = "Generic29"] = 42;
        values[valuesById[43] = "Generic30"] = 43;
        values[valuesById[44] = "Generic31"] = 44;
        return values;
    })();

    Buttplug.ClientMessage = (function() {

        /**
         * Properties of a ClientMessage.
         * @memberof Buttplug
         * @interface IClientMessage
         * @property {number|null} [id] ClientMessage id
         * @property {Buttplug.ClientMessage.IFFIMessage|null} [message] ClientMessage message
         */

        /**
         * Constructs a new ClientMessage.
         * @memberof Buttplug
         * @classdesc Represents a ClientMessage.
         * @implements IClientMessage
         * @constructor
         * @param {Buttplug.IClientMessage=} [properties] Properties to set
         */
        function ClientMessage(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ClientMessage id.
         * @member {number} id
         * @memberof Buttplug.ClientMessage
         * @instance
         */
        ClientMessage.prototype.id = 0;

        /**
         * ClientMessage message.
         * @member {Buttplug.ClientMessage.IFFIMessage|null|undefined} message
         * @memberof Buttplug.ClientMessage
         * @instance
         */
        ClientMessage.prototype.message = null;

        /**
         * Creates a new ClientMessage instance using the specified properties.
         * @function create
         * @memberof Buttplug.ClientMessage
         * @static
         * @param {Buttplug.IClientMessage=} [properties] Properties to set
         * @returns {Buttplug.ClientMessage} ClientMessage instance
         */
        ClientMessage.create = function create(properties) {
            return new ClientMessage(properties);
        };

        /**
         * Encodes the specified ClientMessage message. Does not implicitly {@link Buttplug.ClientMessage.verify|verify} messages.
         * @function encode
         * @memberof Buttplug.ClientMessage
         * @static
         * @param {Buttplug.IClientMessage} message ClientMessage message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ClientMessage.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.id != null && Object.hasOwnProperty.call(message, "id"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.id);
            if (message.message != null && Object.hasOwnProperty.call(message, "message"))
                $root.Buttplug.ClientMessage.FFIMessage.encode(message.message, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified ClientMessage message, length delimited. Does not implicitly {@link Buttplug.ClientMessage.verify|verify} messages.
         * @function encodeDelimited
         * @memberof Buttplug.ClientMessage
         * @static
         * @param {Buttplug.IClientMessage} message ClientMessage message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ClientMessage.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ClientMessage message from the specified reader or buffer.
         * @function decode
         * @memberof Buttplug.ClientMessage
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {Buttplug.ClientMessage} ClientMessage
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ClientMessage.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Buttplug.ClientMessage();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.id = reader.uint32();
                    break;
                case 2:
                    message.message = $root.Buttplug.ClientMessage.FFIMessage.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ClientMessage message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof Buttplug.ClientMessage
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {Buttplug.ClientMessage} ClientMessage
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ClientMessage.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ClientMessage message.
         * @function verify
         * @memberof Buttplug.ClientMessage
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ClientMessage.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.id != null && message.hasOwnProperty("id"))
                if (!$util.isInteger(message.id))
                    return "id: integer expected";
            if (message.message != null && message.hasOwnProperty("message")) {
                var error = $root.Buttplug.ClientMessage.FFIMessage.verify(message.message);
                if (error)
                    return "message." + error;
            }
            return null;
        };

        /**
         * Creates a ClientMessage message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof Buttplug.ClientMessage
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {Buttplug.ClientMessage} ClientMessage
         */
        ClientMessage.fromObject = function fromObject(object) {
            if (object instanceof $root.Buttplug.ClientMessage)
                return object;
            var message = new $root.Buttplug.ClientMessage();
            if (object.id != null)
                message.id = object.id >>> 0;
            if (object.message != null) {
                if (typeof object.message !== "object")
                    throw TypeError(".Buttplug.ClientMessage.message: object expected");
                message.message = $root.Buttplug.ClientMessage.FFIMessage.fromObject(object.message);
            }
            return message;
        };

        /**
         * Creates a plain object from a ClientMessage message. Also converts values to other types if specified.
         * @function toObject
         * @memberof Buttplug.ClientMessage
         * @static
         * @param {Buttplug.ClientMessage} message ClientMessage
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ClientMessage.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.id = 0;
                object.message = null;
            }
            if (message.id != null && message.hasOwnProperty("id"))
                object.id = message.id;
            if (message.message != null && message.hasOwnProperty("message"))
                object.message = $root.Buttplug.ClientMessage.FFIMessage.toObject(message.message, options);
            return object;
        };

        /**
         * Converts this ClientMessage to JSON.
         * @function toJSON
         * @memberof Buttplug.ClientMessage
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ClientMessage.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * DeviceCommunicationManagerTypes enum.
         * @name Buttplug.ClientMessage.DeviceCommunicationManagerTypes
         * @enum {number}
         * @property {number} All=0 All value
         * @property {number} Btleplug=1 Btleplug value
         * @property {number} XInput=2 XInput value
         * @property {number} SerialPort=4 SerialPort value
         * @property {number} LovenseHIDDongle=8 LovenseHIDDongle value
         * @property {number} LovenseSerialDongle=16 LovenseSerialDongle value
         */
        ClientMessage.DeviceCommunicationManagerTypes = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "All"] = 0;
            values[valuesById[1] = "Btleplug"] = 1;
            values[valuesById[2] = "XInput"] = 2;
            values[valuesById[4] = "SerialPort"] = 4;
            values[valuesById[8] = "LovenseHIDDongle"] = 8;
            values[valuesById[16] = "LovenseSerialDongle"] = 16;
            return values;
        })();

        ClientMessage.ConnectLocal = (function() {

            /**
             * Properties of a ConnectLocal.
             * @memberof Buttplug.ClientMessage
             * @interface IConnectLocal
             * @property {string|null} [serverName] ConnectLocal serverName
             * @property {number|null} [maxPingTime] ConnectLocal maxPingTime
             * @property {boolean|null} [allowRawMessages] ConnectLocal allowRawMessages
             * @property {string|null} [deviceConfigurationJson] ConnectLocal deviceConfigurationJson
             * @property {string|null} [userDeviceConfigurationJson] ConnectLocal userDeviceConfigurationJson
             * @property {number|null} [commManagerTypes] ConnectLocal commManagerTypes
             */

            /**
             * Constructs a new ConnectLocal.
             * @memberof Buttplug.ClientMessage
             * @classdesc Represents a ConnectLocal.
             * @implements IConnectLocal
             * @constructor
             * @param {Buttplug.ClientMessage.IConnectLocal=} [properties] Properties to set
             */
            function ConnectLocal(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ConnectLocal serverName.
             * @member {string} serverName
             * @memberof Buttplug.ClientMessage.ConnectLocal
             * @instance
             */
            ConnectLocal.prototype.serverName = "";

            /**
             * ConnectLocal maxPingTime.
             * @member {number} maxPingTime
             * @memberof Buttplug.ClientMessage.ConnectLocal
             * @instance
             */
            ConnectLocal.prototype.maxPingTime = 0;

            /**
             * ConnectLocal allowRawMessages.
             * @member {boolean} allowRawMessages
             * @memberof Buttplug.ClientMessage.ConnectLocal
             * @instance
             */
            ConnectLocal.prototype.allowRawMessages = false;

            /**
             * ConnectLocal deviceConfigurationJson.
             * @member {string} deviceConfigurationJson
             * @memberof Buttplug.ClientMessage.ConnectLocal
             * @instance
             */
            ConnectLocal.prototype.deviceConfigurationJson = "";

            /**
             * ConnectLocal userDeviceConfigurationJson.
             * @member {string} userDeviceConfigurationJson
             * @memberof Buttplug.ClientMessage.ConnectLocal
             * @instance
             */
            ConnectLocal.prototype.userDeviceConfigurationJson = "";

            /**
             * ConnectLocal commManagerTypes.
             * @member {number} commManagerTypes
             * @memberof Buttplug.ClientMessage.ConnectLocal
             * @instance
             */
            ConnectLocal.prototype.commManagerTypes = 0;

            /**
             * Creates a new ConnectLocal instance using the specified properties.
             * @function create
             * @memberof Buttplug.ClientMessage.ConnectLocal
             * @static
             * @param {Buttplug.ClientMessage.IConnectLocal=} [properties] Properties to set
             * @returns {Buttplug.ClientMessage.ConnectLocal} ConnectLocal instance
             */
            ConnectLocal.create = function create(properties) {
                return new ConnectLocal(properties);
            };

            /**
             * Encodes the specified ConnectLocal message. Does not implicitly {@link Buttplug.ClientMessage.ConnectLocal.verify|verify} messages.
             * @function encode
             * @memberof Buttplug.ClientMessage.ConnectLocal
             * @static
             * @param {Buttplug.ClientMessage.IConnectLocal} message ConnectLocal message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ConnectLocal.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.serverName != null && Object.hasOwnProperty.call(message, "serverName"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.serverName);
                if (message.maxPingTime != null && Object.hasOwnProperty.call(message, "maxPingTime"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.maxPingTime);
                if (message.allowRawMessages != null && Object.hasOwnProperty.call(message, "allowRawMessages"))
                    writer.uint32(/* id 3, wireType 0 =*/24).bool(message.allowRawMessages);
                if (message.deviceConfigurationJson != null && Object.hasOwnProperty.call(message, "deviceConfigurationJson"))
                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.deviceConfigurationJson);
                if (message.userDeviceConfigurationJson != null && Object.hasOwnProperty.call(message, "userDeviceConfigurationJson"))
                    writer.uint32(/* id 5, wireType 2 =*/42).string(message.userDeviceConfigurationJson);
                if (message.commManagerTypes != null && Object.hasOwnProperty.call(message, "commManagerTypes"))
                    writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.commManagerTypes);
                return writer;
            };

            /**
             * Encodes the specified ConnectLocal message, length delimited. Does not implicitly {@link Buttplug.ClientMessage.ConnectLocal.verify|verify} messages.
             * @function encodeDelimited
             * @memberof Buttplug.ClientMessage.ConnectLocal
             * @static
             * @param {Buttplug.ClientMessage.IConnectLocal} message ConnectLocal message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ConnectLocal.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a ConnectLocal message from the specified reader or buffer.
             * @function decode
             * @memberof Buttplug.ClientMessage.ConnectLocal
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {Buttplug.ClientMessage.ConnectLocal} ConnectLocal
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ConnectLocal.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Buttplug.ClientMessage.ConnectLocal();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.serverName = reader.string();
                        break;
                    case 2:
                        message.maxPingTime = reader.uint32();
                        break;
                    case 3:
                        message.allowRawMessages = reader.bool();
                        break;
                    case 4:
                        message.deviceConfigurationJson = reader.string();
                        break;
                    case 5:
                        message.userDeviceConfigurationJson = reader.string();
                        break;
                    case 6:
                        message.commManagerTypes = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a ConnectLocal message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof Buttplug.ClientMessage.ConnectLocal
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {Buttplug.ClientMessage.ConnectLocal} ConnectLocal
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ConnectLocal.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a ConnectLocal message.
             * @function verify
             * @memberof Buttplug.ClientMessage.ConnectLocal
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ConnectLocal.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.serverName != null && message.hasOwnProperty("serverName"))
                    if (!$util.isString(message.serverName))
                        return "serverName: string expected";
                if (message.maxPingTime != null && message.hasOwnProperty("maxPingTime"))
                    if (!$util.isInteger(message.maxPingTime))
                        return "maxPingTime: integer expected";
                if (message.allowRawMessages != null && message.hasOwnProperty("allowRawMessages"))
                    if (typeof message.allowRawMessages !== "boolean")
                        return "allowRawMessages: boolean expected";
                if (message.deviceConfigurationJson != null && message.hasOwnProperty("deviceConfigurationJson"))
                    if (!$util.isString(message.deviceConfigurationJson))
                        return "deviceConfigurationJson: string expected";
                if (message.userDeviceConfigurationJson != null && message.hasOwnProperty("userDeviceConfigurationJson"))
                    if (!$util.isString(message.userDeviceConfigurationJson))
                        return "userDeviceConfigurationJson: string expected";
                if (message.commManagerTypes != null && message.hasOwnProperty("commManagerTypes"))
                    if (!$util.isInteger(message.commManagerTypes))
                        return "commManagerTypes: integer expected";
                return null;
            };

            /**
             * Creates a ConnectLocal message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof Buttplug.ClientMessage.ConnectLocal
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {Buttplug.ClientMessage.ConnectLocal} ConnectLocal
             */
            ConnectLocal.fromObject = function fromObject(object) {
                if (object instanceof $root.Buttplug.ClientMessage.ConnectLocal)
                    return object;
                var message = new $root.Buttplug.ClientMessage.ConnectLocal();
                if (object.serverName != null)
                    message.serverName = String(object.serverName);
                if (object.maxPingTime != null)
                    message.maxPingTime = object.maxPingTime >>> 0;
                if (object.allowRawMessages != null)
                    message.allowRawMessages = Boolean(object.allowRawMessages);
                if (object.deviceConfigurationJson != null)
                    message.deviceConfigurationJson = String(object.deviceConfigurationJson);
                if (object.userDeviceConfigurationJson != null)
                    message.userDeviceConfigurationJson = String(object.userDeviceConfigurationJson);
                if (object.commManagerTypes != null)
                    message.commManagerTypes = object.commManagerTypes >>> 0;
                return message;
            };

            /**
             * Creates a plain object from a ConnectLocal message. Also converts values to other types if specified.
             * @function toObject
             * @memberof Buttplug.ClientMessage.ConnectLocal
             * @static
             * @param {Buttplug.ClientMessage.ConnectLocal} message ConnectLocal
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ConnectLocal.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.serverName = "";
                    object.maxPingTime = 0;
                    object.allowRawMessages = false;
                    object.deviceConfigurationJson = "";
                    object.userDeviceConfigurationJson = "";
                    object.commManagerTypes = 0;
                }
                if (message.serverName != null && message.hasOwnProperty("serverName"))
                    object.serverName = message.serverName;
                if (message.maxPingTime != null && message.hasOwnProperty("maxPingTime"))
                    object.maxPingTime = message.maxPingTime;
                if (message.allowRawMessages != null && message.hasOwnProperty("allowRawMessages"))
                    object.allowRawMessages = message.allowRawMessages;
                if (message.deviceConfigurationJson != null && message.hasOwnProperty("deviceConfigurationJson"))
                    object.deviceConfigurationJson = message.deviceConfigurationJson;
                if (message.userDeviceConfigurationJson != null && message.hasOwnProperty("userDeviceConfigurationJson"))
                    object.userDeviceConfigurationJson = message.userDeviceConfigurationJson;
                if (message.commManagerTypes != null && message.hasOwnProperty("commManagerTypes"))
                    object.commManagerTypes = message.commManagerTypes;
                return object;
            };

            /**
             * Converts this ConnectLocal to JSON.
             * @function toJSON
             * @memberof Buttplug.ClientMessage.ConnectLocal
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ConnectLocal.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return ConnectLocal;
        })();

        ClientMessage.ConnectWebsocket = (function() {

            /**
             * Properties of a ConnectWebsocket.
             * @memberof Buttplug.ClientMessage
             * @interface IConnectWebsocket
             * @property {string|null} [address] ConnectWebsocket address
             * @property {boolean|null} [bypassCertVerification] ConnectWebsocket bypassCertVerification
             */

            /**
             * Constructs a new ConnectWebsocket.
             * @memberof Buttplug.ClientMessage
             * @classdesc Represents a ConnectWebsocket.
             * @implements IConnectWebsocket
             * @constructor
             * @param {Buttplug.ClientMessage.IConnectWebsocket=} [properties] Properties to set
             */
            function ConnectWebsocket(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ConnectWebsocket address.
             * @member {string} address
             * @memberof Buttplug.ClientMessage.ConnectWebsocket
             * @instance
             */
            ConnectWebsocket.prototype.address = "";

            /**
             * ConnectWebsocket bypassCertVerification.
             * @member {boolean} bypassCertVerification
             * @memberof Buttplug.ClientMessage.ConnectWebsocket
             * @instance
             */
            ConnectWebsocket.prototype.bypassCertVerification = false;

            /**
             * Creates a new ConnectWebsocket instance using the specified properties.
             * @function create
             * @memberof Buttplug.ClientMessage.ConnectWebsocket
             * @static
             * @param {Buttplug.ClientMessage.IConnectWebsocket=} [properties] Properties to set
             * @returns {Buttplug.ClientMessage.ConnectWebsocket} ConnectWebsocket instance
             */
            ConnectWebsocket.create = function create(properties) {
                return new ConnectWebsocket(properties);
            };

            /**
             * Encodes the specified ConnectWebsocket message. Does not implicitly {@link Buttplug.ClientMessage.ConnectWebsocket.verify|verify} messages.
             * @function encode
             * @memberof Buttplug.ClientMessage.ConnectWebsocket
             * @static
             * @param {Buttplug.ClientMessage.IConnectWebsocket} message ConnectWebsocket message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ConnectWebsocket.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.address != null && Object.hasOwnProperty.call(message, "address"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.address);
                if (message.bypassCertVerification != null && Object.hasOwnProperty.call(message, "bypassCertVerification"))
                    writer.uint32(/* id 2, wireType 0 =*/16).bool(message.bypassCertVerification);
                return writer;
            };

            /**
             * Encodes the specified ConnectWebsocket message, length delimited. Does not implicitly {@link Buttplug.ClientMessage.ConnectWebsocket.verify|verify} messages.
             * @function encodeDelimited
             * @memberof Buttplug.ClientMessage.ConnectWebsocket
             * @static
             * @param {Buttplug.ClientMessage.IConnectWebsocket} message ConnectWebsocket message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ConnectWebsocket.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a ConnectWebsocket message from the specified reader or buffer.
             * @function decode
             * @memberof Buttplug.ClientMessage.ConnectWebsocket
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {Buttplug.ClientMessage.ConnectWebsocket} ConnectWebsocket
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ConnectWebsocket.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Buttplug.ClientMessage.ConnectWebsocket();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.address = reader.string();
                        break;
                    case 2:
                        message.bypassCertVerification = reader.bool();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a ConnectWebsocket message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof Buttplug.ClientMessage.ConnectWebsocket
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {Buttplug.ClientMessage.ConnectWebsocket} ConnectWebsocket
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ConnectWebsocket.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a ConnectWebsocket message.
             * @function verify
             * @memberof Buttplug.ClientMessage.ConnectWebsocket
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ConnectWebsocket.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.address != null && message.hasOwnProperty("address"))
                    if (!$util.isString(message.address))
                        return "address: string expected";
                if (message.bypassCertVerification != null && message.hasOwnProperty("bypassCertVerification"))
                    if (typeof message.bypassCertVerification !== "boolean")
                        return "bypassCertVerification: boolean expected";
                return null;
            };

            /**
             * Creates a ConnectWebsocket message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof Buttplug.ClientMessage.ConnectWebsocket
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {Buttplug.ClientMessage.ConnectWebsocket} ConnectWebsocket
             */
            ConnectWebsocket.fromObject = function fromObject(object) {
                if (object instanceof $root.Buttplug.ClientMessage.ConnectWebsocket)
                    return object;
                var message = new $root.Buttplug.ClientMessage.ConnectWebsocket();
                if (object.address != null)
                    message.address = String(object.address);
                if (object.bypassCertVerification != null)
                    message.bypassCertVerification = Boolean(object.bypassCertVerification);
                return message;
            };

            /**
             * Creates a plain object from a ConnectWebsocket message. Also converts values to other types if specified.
             * @function toObject
             * @memberof Buttplug.ClientMessage.ConnectWebsocket
             * @static
             * @param {Buttplug.ClientMessage.ConnectWebsocket} message ConnectWebsocket
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ConnectWebsocket.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.address = "";
                    object.bypassCertVerification = false;
                }
                if (message.address != null && message.hasOwnProperty("address"))
                    object.address = message.address;
                if (message.bypassCertVerification != null && message.hasOwnProperty("bypassCertVerification"))
                    object.bypassCertVerification = message.bypassCertVerification;
                return object;
            };

            /**
             * Converts this ConnectWebsocket to JSON.
             * @function toJSON
             * @memberof Buttplug.ClientMessage.ConnectWebsocket
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ConnectWebsocket.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return ConnectWebsocket;
        })();

        ClientMessage.StartScanning = (function() {

            /**
             * Properties of a StartScanning.
             * @memberof Buttplug.ClientMessage
             * @interface IStartScanning
             */

            /**
             * Constructs a new StartScanning.
             * @memberof Buttplug.ClientMessage
             * @classdesc Represents a StartScanning.
             * @implements IStartScanning
             * @constructor
             * @param {Buttplug.ClientMessage.IStartScanning=} [properties] Properties to set
             */
            function StartScanning(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Creates a new StartScanning instance using the specified properties.
             * @function create
             * @memberof Buttplug.ClientMessage.StartScanning
             * @static
             * @param {Buttplug.ClientMessage.IStartScanning=} [properties] Properties to set
             * @returns {Buttplug.ClientMessage.StartScanning} StartScanning instance
             */
            StartScanning.create = function create(properties) {
                return new StartScanning(properties);
            };

            /**
             * Encodes the specified StartScanning message. Does not implicitly {@link Buttplug.ClientMessage.StartScanning.verify|verify} messages.
             * @function encode
             * @memberof Buttplug.ClientMessage.StartScanning
             * @static
             * @param {Buttplug.ClientMessage.IStartScanning} message StartScanning message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            StartScanning.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                return writer;
            };

            /**
             * Encodes the specified StartScanning message, length delimited. Does not implicitly {@link Buttplug.ClientMessage.StartScanning.verify|verify} messages.
             * @function encodeDelimited
             * @memberof Buttplug.ClientMessage.StartScanning
             * @static
             * @param {Buttplug.ClientMessage.IStartScanning} message StartScanning message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            StartScanning.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a StartScanning message from the specified reader or buffer.
             * @function decode
             * @memberof Buttplug.ClientMessage.StartScanning
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {Buttplug.ClientMessage.StartScanning} StartScanning
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            StartScanning.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Buttplug.ClientMessage.StartScanning();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a StartScanning message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof Buttplug.ClientMessage.StartScanning
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {Buttplug.ClientMessage.StartScanning} StartScanning
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            StartScanning.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a StartScanning message.
             * @function verify
             * @memberof Buttplug.ClientMessage.StartScanning
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            StartScanning.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                return null;
            };

            /**
             * Creates a StartScanning message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof Buttplug.ClientMessage.StartScanning
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {Buttplug.ClientMessage.StartScanning} StartScanning
             */
            StartScanning.fromObject = function fromObject(object) {
                if (object instanceof $root.Buttplug.ClientMessage.StartScanning)
                    return object;
                return new $root.Buttplug.ClientMessage.StartScanning();
            };

            /**
             * Creates a plain object from a StartScanning message. Also converts values to other types if specified.
             * @function toObject
             * @memberof Buttplug.ClientMessage.StartScanning
             * @static
             * @param {Buttplug.ClientMessage.StartScanning} message StartScanning
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            StartScanning.toObject = function toObject() {
                return {};
            };

            /**
             * Converts this StartScanning to JSON.
             * @function toJSON
             * @memberof Buttplug.ClientMessage.StartScanning
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            StartScanning.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return StartScanning;
        })();

        ClientMessage.StopScanning = (function() {

            /**
             * Properties of a StopScanning.
             * @memberof Buttplug.ClientMessage
             * @interface IStopScanning
             */

            /**
             * Constructs a new StopScanning.
             * @memberof Buttplug.ClientMessage
             * @classdesc Represents a StopScanning.
             * @implements IStopScanning
             * @constructor
             * @param {Buttplug.ClientMessage.IStopScanning=} [properties] Properties to set
             */
            function StopScanning(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Creates a new StopScanning instance using the specified properties.
             * @function create
             * @memberof Buttplug.ClientMessage.StopScanning
             * @static
             * @param {Buttplug.ClientMessage.IStopScanning=} [properties] Properties to set
             * @returns {Buttplug.ClientMessage.StopScanning} StopScanning instance
             */
            StopScanning.create = function create(properties) {
                return new StopScanning(properties);
            };

            /**
             * Encodes the specified StopScanning message. Does not implicitly {@link Buttplug.ClientMessage.StopScanning.verify|verify} messages.
             * @function encode
             * @memberof Buttplug.ClientMessage.StopScanning
             * @static
             * @param {Buttplug.ClientMessage.IStopScanning} message StopScanning message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            StopScanning.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                return writer;
            };

            /**
             * Encodes the specified StopScanning message, length delimited. Does not implicitly {@link Buttplug.ClientMessage.StopScanning.verify|verify} messages.
             * @function encodeDelimited
             * @memberof Buttplug.ClientMessage.StopScanning
             * @static
             * @param {Buttplug.ClientMessage.IStopScanning} message StopScanning message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            StopScanning.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a StopScanning message from the specified reader or buffer.
             * @function decode
             * @memberof Buttplug.ClientMessage.StopScanning
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {Buttplug.ClientMessage.StopScanning} StopScanning
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            StopScanning.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Buttplug.ClientMessage.StopScanning();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a StopScanning message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof Buttplug.ClientMessage.StopScanning
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {Buttplug.ClientMessage.StopScanning} StopScanning
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            StopScanning.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a StopScanning message.
             * @function verify
             * @memberof Buttplug.ClientMessage.StopScanning
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            StopScanning.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                return null;
            };

            /**
             * Creates a StopScanning message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof Buttplug.ClientMessage.StopScanning
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {Buttplug.ClientMessage.StopScanning} StopScanning
             */
            StopScanning.fromObject = function fromObject(object) {
                if (object instanceof $root.Buttplug.ClientMessage.StopScanning)
                    return object;
                return new $root.Buttplug.ClientMessage.StopScanning();
            };

            /**
             * Creates a plain object from a StopScanning message. Also converts values to other types if specified.
             * @function toObject
             * @memberof Buttplug.ClientMessage.StopScanning
             * @static
             * @param {Buttplug.ClientMessage.StopScanning} message StopScanning
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            StopScanning.toObject = function toObject() {
                return {};
            };

            /**
             * Converts this StopScanning to JSON.
             * @function toJSON
             * @memberof Buttplug.ClientMessage.StopScanning
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            StopScanning.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return StopScanning;
        })();

        ClientMessage.StopAllDevices = (function() {

            /**
             * Properties of a StopAllDevices.
             * @memberof Buttplug.ClientMessage
             * @interface IStopAllDevices
             */

            /**
             * Constructs a new StopAllDevices.
             * @memberof Buttplug.ClientMessage
             * @classdesc Represents a StopAllDevices.
             * @implements IStopAllDevices
             * @constructor
             * @param {Buttplug.ClientMessage.IStopAllDevices=} [properties] Properties to set
             */
            function StopAllDevices(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Creates a new StopAllDevices instance using the specified properties.
             * @function create
             * @memberof Buttplug.ClientMessage.StopAllDevices
             * @static
             * @param {Buttplug.ClientMessage.IStopAllDevices=} [properties] Properties to set
             * @returns {Buttplug.ClientMessage.StopAllDevices} StopAllDevices instance
             */
            StopAllDevices.create = function create(properties) {
                return new StopAllDevices(properties);
            };

            /**
             * Encodes the specified StopAllDevices message. Does not implicitly {@link Buttplug.ClientMessage.StopAllDevices.verify|verify} messages.
             * @function encode
             * @memberof Buttplug.ClientMessage.StopAllDevices
             * @static
             * @param {Buttplug.ClientMessage.IStopAllDevices} message StopAllDevices message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            StopAllDevices.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                return writer;
            };

            /**
             * Encodes the specified StopAllDevices message, length delimited. Does not implicitly {@link Buttplug.ClientMessage.StopAllDevices.verify|verify} messages.
             * @function encodeDelimited
             * @memberof Buttplug.ClientMessage.StopAllDevices
             * @static
             * @param {Buttplug.ClientMessage.IStopAllDevices} message StopAllDevices message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            StopAllDevices.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a StopAllDevices message from the specified reader or buffer.
             * @function decode
             * @memberof Buttplug.ClientMessage.StopAllDevices
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {Buttplug.ClientMessage.StopAllDevices} StopAllDevices
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            StopAllDevices.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Buttplug.ClientMessage.StopAllDevices();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a StopAllDevices message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof Buttplug.ClientMessage.StopAllDevices
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {Buttplug.ClientMessage.StopAllDevices} StopAllDevices
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            StopAllDevices.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a StopAllDevices message.
             * @function verify
             * @memberof Buttplug.ClientMessage.StopAllDevices
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            StopAllDevices.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                return null;
            };

            /**
             * Creates a StopAllDevices message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof Buttplug.ClientMessage.StopAllDevices
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {Buttplug.ClientMessage.StopAllDevices} StopAllDevices
             */
            StopAllDevices.fromObject = function fromObject(object) {
                if (object instanceof $root.Buttplug.ClientMessage.StopAllDevices)
                    return object;
                return new $root.Buttplug.ClientMessage.StopAllDevices();
            };

            /**
             * Creates a plain object from a StopAllDevices message. Also converts values to other types if specified.
             * @function toObject
             * @memberof Buttplug.ClientMessage.StopAllDevices
             * @static
             * @param {Buttplug.ClientMessage.StopAllDevices} message StopAllDevices
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            StopAllDevices.toObject = function toObject() {
                return {};
            };

            /**
             * Converts this StopAllDevices to JSON.
             * @function toJSON
             * @memberof Buttplug.ClientMessage.StopAllDevices
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            StopAllDevices.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return StopAllDevices;
        })();

        ClientMessage.Disconnect = (function() {

            /**
             * Properties of a Disconnect.
             * @memberof Buttplug.ClientMessage
             * @interface IDisconnect
             */

            /**
             * Constructs a new Disconnect.
             * @memberof Buttplug.ClientMessage
             * @classdesc Represents a Disconnect.
             * @implements IDisconnect
             * @constructor
             * @param {Buttplug.ClientMessage.IDisconnect=} [properties] Properties to set
             */
            function Disconnect(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Creates a new Disconnect instance using the specified properties.
             * @function create
             * @memberof Buttplug.ClientMessage.Disconnect
             * @static
             * @param {Buttplug.ClientMessage.IDisconnect=} [properties] Properties to set
             * @returns {Buttplug.ClientMessage.Disconnect} Disconnect instance
             */
            Disconnect.create = function create(properties) {
                return new Disconnect(properties);
            };

            /**
             * Encodes the specified Disconnect message. Does not implicitly {@link Buttplug.ClientMessage.Disconnect.verify|verify} messages.
             * @function encode
             * @memberof Buttplug.ClientMessage.Disconnect
             * @static
             * @param {Buttplug.ClientMessage.IDisconnect} message Disconnect message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Disconnect.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                return writer;
            };

            /**
             * Encodes the specified Disconnect message, length delimited. Does not implicitly {@link Buttplug.ClientMessage.Disconnect.verify|verify} messages.
             * @function encodeDelimited
             * @memberof Buttplug.ClientMessage.Disconnect
             * @static
             * @param {Buttplug.ClientMessage.IDisconnect} message Disconnect message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Disconnect.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a Disconnect message from the specified reader or buffer.
             * @function decode
             * @memberof Buttplug.ClientMessage.Disconnect
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {Buttplug.ClientMessage.Disconnect} Disconnect
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Disconnect.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Buttplug.ClientMessage.Disconnect();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a Disconnect message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof Buttplug.ClientMessage.Disconnect
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {Buttplug.ClientMessage.Disconnect} Disconnect
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Disconnect.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a Disconnect message.
             * @function verify
             * @memberof Buttplug.ClientMessage.Disconnect
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Disconnect.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                return null;
            };

            /**
             * Creates a Disconnect message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof Buttplug.ClientMessage.Disconnect
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {Buttplug.ClientMessage.Disconnect} Disconnect
             */
            Disconnect.fromObject = function fromObject(object) {
                if (object instanceof $root.Buttplug.ClientMessage.Disconnect)
                    return object;
                return new $root.Buttplug.ClientMessage.Disconnect();
            };

            /**
             * Creates a plain object from a Disconnect message. Also converts values to other types if specified.
             * @function toObject
             * @memberof Buttplug.ClientMessage.Disconnect
             * @static
             * @param {Buttplug.ClientMessage.Disconnect} message Disconnect
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Disconnect.toObject = function toObject() {
                return {};
            };

            /**
             * Converts this Disconnect to JSON.
             * @function toJSON
             * @memberof Buttplug.ClientMessage.Disconnect
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Disconnect.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return Disconnect;
        })();

        ClientMessage.Ping = (function() {

            /**
             * Properties of a Ping.
             * @memberof Buttplug.ClientMessage
             * @interface IPing
             */

            /**
             * Constructs a new Ping.
             * @memberof Buttplug.ClientMessage
             * @classdesc Represents a Ping.
             * @implements IPing
             * @constructor
             * @param {Buttplug.ClientMessage.IPing=} [properties] Properties to set
             */
            function Ping(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Creates a new Ping instance using the specified properties.
             * @function create
             * @memberof Buttplug.ClientMessage.Ping
             * @static
             * @param {Buttplug.ClientMessage.IPing=} [properties] Properties to set
             * @returns {Buttplug.ClientMessage.Ping} Ping instance
             */
            Ping.create = function create(properties) {
                return new Ping(properties);
            };

            /**
             * Encodes the specified Ping message. Does not implicitly {@link Buttplug.ClientMessage.Ping.verify|verify} messages.
             * @function encode
             * @memberof Buttplug.ClientMessage.Ping
             * @static
             * @param {Buttplug.ClientMessage.IPing} message Ping message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Ping.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                return writer;
            };

            /**
             * Encodes the specified Ping message, length delimited. Does not implicitly {@link Buttplug.ClientMessage.Ping.verify|verify} messages.
             * @function encodeDelimited
             * @memberof Buttplug.ClientMessage.Ping
             * @static
             * @param {Buttplug.ClientMessage.IPing} message Ping message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Ping.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a Ping message from the specified reader or buffer.
             * @function decode
             * @memberof Buttplug.ClientMessage.Ping
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {Buttplug.ClientMessage.Ping} Ping
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Ping.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Buttplug.ClientMessage.Ping();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a Ping message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof Buttplug.ClientMessage.Ping
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {Buttplug.ClientMessage.Ping} Ping
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Ping.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a Ping message.
             * @function verify
             * @memberof Buttplug.ClientMessage.Ping
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Ping.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                return null;
            };

            /**
             * Creates a Ping message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof Buttplug.ClientMessage.Ping
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {Buttplug.ClientMessage.Ping} Ping
             */
            Ping.fromObject = function fromObject(object) {
                if (object instanceof $root.Buttplug.ClientMessage.Ping)
                    return object;
                return new $root.Buttplug.ClientMessage.Ping();
            };

            /**
             * Creates a plain object from a Ping message. Also converts values to other types if specified.
             * @function toObject
             * @memberof Buttplug.ClientMessage.Ping
             * @static
             * @param {Buttplug.ClientMessage.Ping} message Ping
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Ping.toObject = function toObject() {
                return {};
            };

            /**
             * Converts this Ping to JSON.
             * @function toJSON
             * @memberof Buttplug.ClientMessage.Ping
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Ping.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return Ping;
        })();

        ClientMessage.FFIMessage = (function() {

            /**
             * Properties of a FFIMessage.
             * @memberof Buttplug.ClientMessage
             * @interface IFFIMessage
             * @property {Buttplug.ClientMessage.IConnectLocal|null} [connectLocal] FFIMessage connectLocal
             * @property {Buttplug.ClientMessage.IConnectWebsocket|null} [connectWebsocket] FFIMessage connectWebsocket
             * @property {Buttplug.ClientMessage.IStartScanning|null} [startScanning] FFIMessage startScanning
             * @property {Buttplug.ClientMessage.IStopScanning|null} [stopScanning] FFIMessage stopScanning
             * @property {Buttplug.ClientMessage.IStopAllDevices|null} [stopAllDevices] FFIMessage stopAllDevices
             * @property {Buttplug.ClientMessage.IDisconnect|null} [disconnect] FFIMessage disconnect
             * @property {Buttplug.ClientMessage.IPing|null} [ping] FFIMessage ping
             */

            /**
             * Constructs a new FFIMessage.
             * @memberof Buttplug.ClientMessage
             * @classdesc Represents a FFIMessage.
             * @implements IFFIMessage
             * @constructor
             * @param {Buttplug.ClientMessage.IFFIMessage=} [properties] Properties to set
             */
            function FFIMessage(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * FFIMessage connectLocal.
             * @member {Buttplug.ClientMessage.IConnectLocal|null|undefined} connectLocal
             * @memberof Buttplug.ClientMessage.FFIMessage
             * @instance
             */
            FFIMessage.prototype.connectLocal = null;

            /**
             * FFIMessage connectWebsocket.
             * @member {Buttplug.ClientMessage.IConnectWebsocket|null|undefined} connectWebsocket
             * @memberof Buttplug.ClientMessage.FFIMessage
             * @instance
             */
            FFIMessage.prototype.connectWebsocket = null;

            /**
             * FFIMessage startScanning.
             * @member {Buttplug.ClientMessage.IStartScanning|null|undefined} startScanning
             * @memberof Buttplug.ClientMessage.FFIMessage
             * @instance
             */
            FFIMessage.prototype.startScanning = null;

            /**
             * FFIMessage stopScanning.
             * @member {Buttplug.ClientMessage.IStopScanning|null|undefined} stopScanning
             * @memberof Buttplug.ClientMessage.FFIMessage
             * @instance
             */
            FFIMessage.prototype.stopScanning = null;

            /**
             * FFIMessage stopAllDevices.
             * @member {Buttplug.ClientMessage.IStopAllDevices|null|undefined} stopAllDevices
             * @memberof Buttplug.ClientMessage.FFIMessage
             * @instance
             */
            FFIMessage.prototype.stopAllDevices = null;

            /**
             * FFIMessage disconnect.
             * @member {Buttplug.ClientMessage.IDisconnect|null|undefined} disconnect
             * @memberof Buttplug.ClientMessage.FFIMessage
             * @instance
             */
            FFIMessage.prototype.disconnect = null;

            /**
             * FFIMessage ping.
             * @member {Buttplug.ClientMessage.IPing|null|undefined} ping
             * @memberof Buttplug.ClientMessage.FFIMessage
             * @instance
             */
            FFIMessage.prototype.ping = null;

            // OneOf field names bound to virtual getters and setters
            var $oneOfFields;

            /**
             * FFIMessage msg.
             * @member {"connectLocal"|"connectWebsocket"|"startScanning"|"stopScanning"|"stopAllDevices"|"disconnect"|"ping"|undefined} msg
             * @memberof Buttplug.ClientMessage.FFIMessage
             * @instance
             */
            Object.defineProperty(FFIMessage.prototype, "msg", {
                get: $util.oneOfGetter($oneOfFields = ["connectLocal", "connectWebsocket", "startScanning", "stopScanning", "stopAllDevices", "disconnect", "ping"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            /**
             * Creates a new FFIMessage instance using the specified properties.
             * @function create
             * @memberof Buttplug.ClientMessage.FFIMessage
             * @static
             * @param {Buttplug.ClientMessage.IFFIMessage=} [properties] Properties to set
             * @returns {Buttplug.ClientMessage.FFIMessage} FFIMessage instance
             */
            FFIMessage.create = function create(properties) {
                return new FFIMessage(properties);
            };

            /**
             * Encodes the specified FFIMessage message. Does not implicitly {@link Buttplug.ClientMessage.FFIMessage.verify|verify} messages.
             * @function encode
             * @memberof Buttplug.ClientMessage.FFIMessage
             * @static
             * @param {Buttplug.ClientMessage.IFFIMessage} message FFIMessage message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FFIMessage.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.connectLocal != null && Object.hasOwnProperty.call(message, "connectLocal"))
                    $root.Buttplug.ClientMessage.ConnectLocal.encode(message.connectLocal, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.connectWebsocket != null && Object.hasOwnProperty.call(message, "connectWebsocket"))
                    $root.Buttplug.ClientMessage.ConnectWebsocket.encode(message.connectWebsocket, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.startScanning != null && Object.hasOwnProperty.call(message, "startScanning"))
                    $root.Buttplug.ClientMessage.StartScanning.encode(message.startScanning, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                if (message.stopScanning != null && Object.hasOwnProperty.call(message, "stopScanning"))
                    $root.Buttplug.ClientMessage.StopScanning.encode(message.stopScanning, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                if (message.stopAllDevices != null && Object.hasOwnProperty.call(message, "stopAllDevices"))
                    $root.Buttplug.ClientMessage.StopAllDevices.encode(message.stopAllDevices, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                if (message.disconnect != null && Object.hasOwnProperty.call(message, "disconnect"))
                    $root.Buttplug.ClientMessage.Disconnect.encode(message.disconnect, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                if (message.ping != null && Object.hasOwnProperty.call(message, "ping"))
                    $root.Buttplug.ClientMessage.Ping.encode(message.ping, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified FFIMessage message, length delimited. Does not implicitly {@link Buttplug.ClientMessage.FFIMessage.verify|verify} messages.
             * @function encodeDelimited
             * @memberof Buttplug.ClientMessage.FFIMessage
             * @static
             * @param {Buttplug.ClientMessage.IFFIMessage} message FFIMessage message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FFIMessage.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a FFIMessage message from the specified reader or buffer.
             * @function decode
             * @memberof Buttplug.ClientMessage.FFIMessage
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {Buttplug.ClientMessage.FFIMessage} FFIMessage
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FFIMessage.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Buttplug.ClientMessage.FFIMessage();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.connectLocal = $root.Buttplug.ClientMessage.ConnectLocal.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.connectWebsocket = $root.Buttplug.ClientMessage.ConnectWebsocket.decode(reader, reader.uint32());
                        break;
                    case 3:
                        message.startScanning = $root.Buttplug.ClientMessage.StartScanning.decode(reader, reader.uint32());
                        break;
                    case 4:
                        message.stopScanning = $root.Buttplug.ClientMessage.StopScanning.decode(reader, reader.uint32());
                        break;
                    case 5:
                        message.stopAllDevices = $root.Buttplug.ClientMessage.StopAllDevices.decode(reader, reader.uint32());
                        break;
                    case 6:
                        message.disconnect = $root.Buttplug.ClientMessage.Disconnect.decode(reader, reader.uint32());
                        break;
                    case 7:
                        message.ping = $root.Buttplug.ClientMessage.Ping.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a FFIMessage message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof Buttplug.ClientMessage.FFIMessage
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {Buttplug.ClientMessage.FFIMessage} FFIMessage
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FFIMessage.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a FFIMessage message.
             * @function verify
             * @memberof Buttplug.ClientMessage.FFIMessage
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            FFIMessage.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                var properties = {};
                if (message.connectLocal != null && message.hasOwnProperty("connectLocal")) {
                    properties.msg = 1;
                    {
                        var error = $root.Buttplug.ClientMessage.ConnectLocal.verify(message.connectLocal);
                        if (error)
                            return "connectLocal." + error;
                    }
                }
                if (message.connectWebsocket != null && message.hasOwnProperty("connectWebsocket")) {
                    if (properties.msg === 1)
                        return "msg: multiple values";
                    properties.msg = 1;
                    {
                        var error = $root.Buttplug.ClientMessage.ConnectWebsocket.verify(message.connectWebsocket);
                        if (error)
                            return "connectWebsocket." + error;
                    }
                }
                if (message.startScanning != null && message.hasOwnProperty("startScanning")) {
                    if (properties.msg === 1)
                        return "msg: multiple values";
                    properties.msg = 1;
                    {
                        var error = $root.Buttplug.ClientMessage.StartScanning.verify(message.startScanning);
                        if (error)
                            return "startScanning." + error;
                    }
                }
                if (message.stopScanning != null && message.hasOwnProperty("stopScanning")) {
                    if (properties.msg === 1)
                        return "msg: multiple values";
                    properties.msg = 1;
                    {
                        var error = $root.Buttplug.ClientMessage.StopScanning.verify(message.stopScanning);
                        if (error)
                            return "stopScanning." + error;
                    }
                }
                if (message.stopAllDevices != null && message.hasOwnProperty("stopAllDevices")) {
                    if (properties.msg === 1)
                        return "msg: multiple values";
                    properties.msg = 1;
                    {
                        var error = $root.Buttplug.ClientMessage.StopAllDevices.verify(message.stopAllDevices);
                        if (error)
                            return "stopAllDevices." + error;
                    }
                }
                if (message.disconnect != null && message.hasOwnProperty("disconnect")) {
                    if (properties.msg === 1)
                        return "msg: multiple values";
                    properties.msg = 1;
                    {
                        var error = $root.Buttplug.ClientMessage.Disconnect.verify(message.disconnect);
                        if (error)
                            return "disconnect." + error;
                    }
                }
                if (message.ping != null && message.hasOwnProperty("ping")) {
                    if (properties.msg === 1)
                        return "msg: multiple values";
                    properties.msg = 1;
                    {
                        var error = $root.Buttplug.ClientMessage.Ping.verify(message.ping);
                        if (error)
                            return "ping." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a FFIMessage message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof Buttplug.ClientMessage.FFIMessage
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {Buttplug.ClientMessage.FFIMessage} FFIMessage
             */
            FFIMessage.fromObject = function fromObject(object) {
                if (object instanceof $root.Buttplug.ClientMessage.FFIMessage)
                    return object;
                var message = new $root.Buttplug.ClientMessage.FFIMessage();
                if (object.connectLocal != null) {
                    if (typeof object.connectLocal !== "object")
                        throw TypeError(".Buttplug.ClientMessage.FFIMessage.connectLocal: object expected");
                    message.connectLocal = $root.Buttplug.ClientMessage.ConnectLocal.fromObject(object.connectLocal);
                }
                if (object.connectWebsocket != null) {
                    if (typeof object.connectWebsocket !== "object")
                        throw TypeError(".Buttplug.ClientMessage.FFIMessage.connectWebsocket: object expected");
                    message.connectWebsocket = $root.Buttplug.ClientMessage.ConnectWebsocket.fromObject(object.connectWebsocket);
                }
                if (object.startScanning != null) {
                    if (typeof object.startScanning !== "object")
                        throw TypeError(".Buttplug.ClientMessage.FFIMessage.startScanning: object expected");
                    message.startScanning = $root.Buttplug.ClientMessage.StartScanning.fromObject(object.startScanning);
                }
                if (object.stopScanning != null) {
                    if (typeof object.stopScanning !== "object")
                        throw TypeError(".Buttplug.ClientMessage.FFIMessage.stopScanning: object expected");
                    message.stopScanning = $root.Buttplug.ClientMessage.StopScanning.fromObject(object.stopScanning);
                }
                if (object.stopAllDevices != null) {
                    if (typeof object.stopAllDevices !== "object")
                        throw TypeError(".Buttplug.ClientMessage.FFIMessage.stopAllDevices: object expected");
                    message.stopAllDevices = $root.Buttplug.ClientMessage.StopAllDevices.fromObject(object.stopAllDevices);
                }
                if (object.disconnect != null) {
                    if (typeof object.disconnect !== "object")
                        throw TypeError(".Buttplug.ClientMessage.FFIMessage.disconnect: object expected");
                    message.disconnect = $root.Buttplug.ClientMessage.Disconnect.fromObject(object.disconnect);
                }
                if (object.ping != null) {
                    if (typeof object.ping !== "object")
                        throw TypeError(".Buttplug.ClientMessage.FFIMessage.ping: object expected");
                    message.ping = $root.Buttplug.ClientMessage.Ping.fromObject(object.ping);
                }
                return message;
            };

            /**
             * Creates a plain object from a FFIMessage message. Also converts values to other types if specified.
             * @function toObject
             * @memberof Buttplug.ClientMessage.FFIMessage
             * @static
             * @param {Buttplug.ClientMessage.FFIMessage} message FFIMessage
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            FFIMessage.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (message.connectLocal != null && message.hasOwnProperty("connectLocal")) {
                    object.connectLocal = $root.Buttplug.ClientMessage.ConnectLocal.toObject(message.connectLocal, options);
                    if (options.oneofs)
                        object.msg = "connectLocal";
                }
                if (message.connectWebsocket != null && message.hasOwnProperty("connectWebsocket")) {
                    object.connectWebsocket = $root.Buttplug.ClientMessage.ConnectWebsocket.toObject(message.connectWebsocket, options);
                    if (options.oneofs)
                        object.msg = "connectWebsocket";
                }
                if (message.startScanning != null && message.hasOwnProperty("startScanning")) {
                    object.startScanning = $root.Buttplug.ClientMessage.StartScanning.toObject(message.startScanning, options);
                    if (options.oneofs)
                        object.msg = "startScanning";
                }
                if (message.stopScanning != null && message.hasOwnProperty("stopScanning")) {
                    object.stopScanning = $root.Buttplug.ClientMessage.StopScanning.toObject(message.stopScanning, options);
                    if (options.oneofs)
                        object.msg = "stopScanning";
                }
                if (message.stopAllDevices != null && message.hasOwnProperty("stopAllDevices")) {
                    object.stopAllDevices = $root.Buttplug.ClientMessage.StopAllDevices.toObject(message.stopAllDevices, options);
                    if (options.oneofs)
                        object.msg = "stopAllDevices";
                }
                if (message.disconnect != null && message.hasOwnProperty("disconnect")) {
                    object.disconnect = $root.Buttplug.ClientMessage.Disconnect.toObject(message.disconnect, options);
                    if (options.oneofs)
                        object.msg = "disconnect";
                }
                if (message.ping != null && message.hasOwnProperty("ping")) {
                    object.ping = $root.Buttplug.ClientMessage.Ping.toObject(message.ping, options);
                    if (options.oneofs)
                        object.msg = "ping";
                }
                return object;
            };

            /**
             * Converts this FFIMessage to JSON.
             * @function toJSON
             * @memberof Buttplug.ClientMessage.FFIMessage
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            FFIMessage.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return FFIMessage;
        })();

        return ClientMessage;
    })();

    Buttplug.DeviceMessage = (function() {

        /**
         * Properties of a DeviceMessage.
         * @memberof Buttplug
         * @interface IDeviceMessage
         * @property {number|null} [id] DeviceMessage id
         * @property {number|null} [index] DeviceMessage index
         * @property {Buttplug.DeviceMessage.IFFIMessage|null} [message] DeviceMessage message
         */

        /**
         * Constructs a new DeviceMessage.
         * @memberof Buttplug
         * @classdesc Represents a DeviceMessage.
         * @implements IDeviceMessage
         * @constructor
         * @param {Buttplug.IDeviceMessage=} [properties] Properties to set
         */
        function DeviceMessage(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * DeviceMessage id.
         * @member {number} id
         * @memberof Buttplug.DeviceMessage
         * @instance
         */
        DeviceMessage.prototype.id = 0;

        /**
         * DeviceMessage index.
         * @member {number} index
         * @memberof Buttplug.DeviceMessage
         * @instance
         */
        DeviceMessage.prototype.index = 0;

        /**
         * DeviceMessage message.
         * @member {Buttplug.DeviceMessage.IFFIMessage|null|undefined} message
         * @memberof Buttplug.DeviceMessage
         * @instance
         */
        DeviceMessage.prototype.message = null;

        /**
         * Creates a new DeviceMessage instance using the specified properties.
         * @function create
         * @memberof Buttplug.DeviceMessage
         * @static
         * @param {Buttplug.IDeviceMessage=} [properties] Properties to set
         * @returns {Buttplug.DeviceMessage} DeviceMessage instance
         */
        DeviceMessage.create = function create(properties) {
            return new DeviceMessage(properties);
        };

        /**
         * Encodes the specified DeviceMessage message. Does not implicitly {@link Buttplug.DeviceMessage.verify|verify} messages.
         * @function encode
         * @memberof Buttplug.DeviceMessage
         * @static
         * @param {Buttplug.IDeviceMessage} message DeviceMessage message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        DeviceMessage.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.id != null && Object.hasOwnProperty.call(message, "id"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.id);
            if (message.index != null && Object.hasOwnProperty.call(message, "index"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.index);
            if (message.message != null && Object.hasOwnProperty.call(message, "message"))
                $root.Buttplug.DeviceMessage.FFIMessage.encode(message.message, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified DeviceMessage message, length delimited. Does not implicitly {@link Buttplug.DeviceMessage.verify|verify} messages.
         * @function encodeDelimited
         * @memberof Buttplug.DeviceMessage
         * @static
         * @param {Buttplug.IDeviceMessage} message DeviceMessage message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        DeviceMessage.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a DeviceMessage message from the specified reader or buffer.
         * @function decode
         * @memberof Buttplug.DeviceMessage
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {Buttplug.DeviceMessage} DeviceMessage
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        DeviceMessage.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Buttplug.DeviceMessage();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.id = reader.uint32();
                    break;
                case 2:
                    message.index = reader.uint32();
                    break;
                case 3:
                    message.message = $root.Buttplug.DeviceMessage.FFIMessage.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a DeviceMessage message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof Buttplug.DeviceMessage
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {Buttplug.DeviceMessage} DeviceMessage
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        DeviceMessage.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a DeviceMessage message.
         * @function verify
         * @memberof Buttplug.DeviceMessage
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        DeviceMessage.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.id != null && message.hasOwnProperty("id"))
                if (!$util.isInteger(message.id))
                    return "id: integer expected";
            if (message.index != null && message.hasOwnProperty("index"))
                if (!$util.isInteger(message.index))
                    return "index: integer expected";
            if (message.message != null && message.hasOwnProperty("message")) {
                var error = $root.Buttplug.DeviceMessage.FFIMessage.verify(message.message);
                if (error)
                    return "message." + error;
            }
            return null;
        };

        /**
         * Creates a DeviceMessage message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof Buttplug.DeviceMessage
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {Buttplug.DeviceMessage} DeviceMessage
         */
        DeviceMessage.fromObject = function fromObject(object) {
            if (object instanceof $root.Buttplug.DeviceMessage)
                return object;
            var message = new $root.Buttplug.DeviceMessage();
            if (object.id != null)
                message.id = object.id >>> 0;
            if (object.index != null)
                message.index = object.index >>> 0;
            if (object.message != null) {
                if (typeof object.message !== "object")
                    throw TypeError(".Buttplug.DeviceMessage.message: object expected");
                message.message = $root.Buttplug.DeviceMessage.FFIMessage.fromObject(object.message);
            }
            return message;
        };

        /**
         * Creates a plain object from a DeviceMessage message. Also converts values to other types if specified.
         * @function toObject
         * @memberof Buttplug.DeviceMessage
         * @static
         * @param {Buttplug.DeviceMessage} message DeviceMessage
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        DeviceMessage.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.id = 0;
                object.index = 0;
                object.message = null;
            }
            if (message.id != null && message.hasOwnProperty("id"))
                object.id = message.id;
            if (message.index != null && message.hasOwnProperty("index"))
                object.index = message.index;
            if (message.message != null && message.hasOwnProperty("message"))
                object.message = $root.Buttplug.DeviceMessage.FFIMessage.toObject(message.message, options);
            return object;
        };

        /**
         * Converts this DeviceMessage to JSON.
         * @function toJSON
         * @memberof Buttplug.DeviceMessage
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        DeviceMessage.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        DeviceMessage.VibrateComponent = (function() {

            /**
             * Properties of a VibrateComponent.
             * @memberof Buttplug.DeviceMessage
             * @interface IVibrateComponent
             * @property {number|null} [index] VibrateComponent index
             * @property {number|null} [speed] VibrateComponent speed
             */

            /**
             * Constructs a new VibrateComponent.
             * @memberof Buttplug.DeviceMessage
             * @classdesc Represents a VibrateComponent.
             * @implements IVibrateComponent
             * @constructor
             * @param {Buttplug.DeviceMessage.IVibrateComponent=} [properties] Properties to set
             */
            function VibrateComponent(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * VibrateComponent index.
             * @member {number} index
             * @memberof Buttplug.DeviceMessage.VibrateComponent
             * @instance
             */
            VibrateComponent.prototype.index = 0;

            /**
             * VibrateComponent speed.
             * @member {number} speed
             * @memberof Buttplug.DeviceMessage.VibrateComponent
             * @instance
             */
            VibrateComponent.prototype.speed = 0;

            /**
             * Creates a new VibrateComponent instance using the specified properties.
             * @function create
             * @memberof Buttplug.DeviceMessage.VibrateComponent
             * @static
             * @param {Buttplug.DeviceMessage.IVibrateComponent=} [properties] Properties to set
             * @returns {Buttplug.DeviceMessage.VibrateComponent} VibrateComponent instance
             */
            VibrateComponent.create = function create(properties) {
                return new VibrateComponent(properties);
            };

            /**
             * Encodes the specified VibrateComponent message. Does not implicitly {@link Buttplug.DeviceMessage.VibrateComponent.verify|verify} messages.
             * @function encode
             * @memberof Buttplug.DeviceMessage.VibrateComponent
             * @static
             * @param {Buttplug.DeviceMessage.IVibrateComponent} message VibrateComponent message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            VibrateComponent.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.index != null && Object.hasOwnProperty.call(message, "index"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.index);
                if (message.speed != null && Object.hasOwnProperty.call(message, "speed"))
                    writer.uint32(/* id 2, wireType 1 =*/17).double(message.speed);
                return writer;
            };

            /**
             * Encodes the specified VibrateComponent message, length delimited. Does not implicitly {@link Buttplug.DeviceMessage.VibrateComponent.verify|verify} messages.
             * @function encodeDelimited
             * @memberof Buttplug.DeviceMessage.VibrateComponent
             * @static
             * @param {Buttplug.DeviceMessage.IVibrateComponent} message VibrateComponent message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            VibrateComponent.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a VibrateComponent message from the specified reader or buffer.
             * @function decode
             * @memberof Buttplug.DeviceMessage.VibrateComponent
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {Buttplug.DeviceMessage.VibrateComponent} VibrateComponent
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            VibrateComponent.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Buttplug.DeviceMessage.VibrateComponent();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.index = reader.uint32();
                        break;
                    case 2:
                        message.speed = reader.double();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a VibrateComponent message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof Buttplug.DeviceMessage.VibrateComponent
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {Buttplug.DeviceMessage.VibrateComponent} VibrateComponent
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            VibrateComponent.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a VibrateComponent message.
             * @function verify
             * @memberof Buttplug.DeviceMessage.VibrateComponent
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            VibrateComponent.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.index != null && message.hasOwnProperty("index"))
                    if (!$util.isInteger(message.index))
                        return "index: integer expected";
                if (message.speed != null && message.hasOwnProperty("speed"))
                    if (typeof message.speed !== "number")
                        return "speed: number expected";
                return null;
            };

            /**
             * Creates a VibrateComponent message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof Buttplug.DeviceMessage.VibrateComponent
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {Buttplug.DeviceMessage.VibrateComponent} VibrateComponent
             */
            VibrateComponent.fromObject = function fromObject(object) {
                if (object instanceof $root.Buttplug.DeviceMessage.VibrateComponent)
                    return object;
                var message = new $root.Buttplug.DeviceMessage.VibrateComponent();
                if (object.index != null)
                    message.index = object.index >>> 0;
                if (object.speed != null)
                    message.speed = Number(object.speed);
                return message;
            };

            /**
             * Creates a plain object from a VibrateComponent message. Also converts values to other types if specified.
             * @function toObject
             * @memberof Buttplug.DeviceMessage.VibrateComponent
             * @static
             * @param {Buttplug.DeviceMessage.VibrateComponent} message VibrateComponent
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            VibrateComponent.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.index = 0;
                    object.speed = 0;
                }
                if (message.index != null && message.hasOwnProperty("index"))
                    object.index = message.index;
                if (message.speed != null && message.hasOwnProperty("speed"))
                    object.speed = options.json && !isFinite(message.speed) ? String(message.speed) : message.speed;
                return object;
            };

            /**
             * Converts this VibrateComponent to JSON.
             * @function toJSON
             * @memberof Buttplug.DeviceMessage.VibrateComponent
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            VibrateComponent.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return VibrateComponent;
        })();

        DeviceMessage.VibrateCmd = (function() {

            /**
             * Properties of a VibrateCmd.
             * @memberof Buttplug.DeviceMessage
             * @interface IVibrateCmd
             * @property {Array.<Buttplug.DeviceMessage.IVibrateComponent>|null} [speeds] VibrateCmd speeds
             */

            /**
             * Constructs a new VibrateCmd.
             * @memberof Buttplug.DeviceMessage
             * @classdesc Represents a VibrateCmd.
             * @implements IVibrateCmd
             * @constructor
             * @param {Buttplug.DeviceMessage.IVibrateCmd=} [properties] Properties to set
             */
            function VibrateCmd(properties) {
                this.speeds = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * VibrateCmd speeds.
             * @member {Array.<Buttplug.DeviceMessage.IVibrateComponent>} speeds
             * @memberof Buttplug.DeviceMessage.VibrateCmd
             * @instance
             */
            VibrateCmd.prototype.speeds = $util.emptyArray;

            /**
             * Creates a new VibrateCmd instance using the specified properties.
             * @function create
             * @memberof Buttplug.DeviceMessage.VibrateCmd
             * @static
             * @param {Buttplug.DeviceMessage.IVibrateCmd=} [properties] Properties to set
             * @returns {Buttplug.DeviceMessage.VibrateCmd} VibrateCmd instance
             */
            VibrateCmd.create = function create(properties) {
                return new VibrateCmd(properties);
            };

            /**
             * Encodes the specified VibrateCmd message. Does not implicitly {@link Buttplug.DeviceMessage.VibrateCmd.verify|verify} messages.
             * @function encode
             * @memberof Buttplug.DeviceMessage.VibrateCmd
             * @static
             * @param {Buttplug.DeviceMessage.IVibrateCmd} message VibrateCmd message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            VibrateCmd.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.speeds != null && message.speeds.length)
                    for (var i = 0; i < message.speeds.length; ++i)
                        $root.Buttplug.DeviceMessage.VibrateComponent.encode(message.speeds[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified VibrateCmd message, length delimited. Does not implicitly {@link Buttplug.DeviceMessage.VibrateCmd.verify|verify} messages.
             * @function encodeDelimited
             * @memberof Buttplug.DeviceMessage.VibrateCmd
             * @static
             * @param {Buttplug.DeviceMessage.IVibrateCmd} message VibrateCmd message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            VibrateCmd.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a VibrateCmd message from the specified reader or buffer.
             * @function decode
             * @memberof Buttplug.DeviceMessage.VibrateCmd
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {Buttplug.DeviceMessage.VibrateCmd} VibrateCmd
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            VibrateCmd.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Buttplug.DeviceMessage.VibrateCmd();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        if (!(message.speeds && message.speeds.length))
                            message.speeds = [];
                        message.speeds.push($root.Buttplug.DeviceMessage.VibrateComponent.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a VibrateCmd message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof Buttplug.DeviceMessage.VibrateCmd
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {Buttplug.DeviceMessage.VibrateCmd} VibrateCmd
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            VibrateCmd.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a VibrateCmd message.
             * @function verify
             * @memberof Buttplug.DeviceMessage.VibrateCmd
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            VibrateCmd.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.speeds != null && message.hasOwnProperty("speeds")) {
                    if (!Array.isArray(message.speeds))
                        return "speeds: array expected";
                    for (var i = 0; i < message.speeds.length; ++i) {
                        var error = $root.Buttplug.DeviceMessage.VibrateComponent.verify(message.speeds[i]);
                        if (error)
                            return "speeds." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a VibrateCmd message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof Buttplug.DeviceMessage.VibrateCmd
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {Buttplug.DeviceMessage.VibrateCmd} VibrateCmd
             */
            VibrateCmd.fromObject = function fromObject(object) {
                if (object instanceof $root.Buttplug.DeviceMessage.VibrateCmd)
                    return object;
                var message = new $root.Buttplug.DeviceMessage.VibrateCmd();
                if (object.speeds) {
                    if (!Array.isArray(object.speeds))
                        throw TypeError(".Buttplug.DeviceMessage.VibrateCmd.speeds: array expected");
                    message.speeds = [];
                    for (var i = 0; i < object.speeds.length; ++i) {
                        if (typeof object.speeds[i] !== "object")
                            throw TypeError(".Buttplug.DeviceMessage.VibrateCmd.speeds: object expected");
                        message.speeds[i] = $root.Buttplug.DeviceMessage.VibrateComponent.fromObject(object.speeds[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a VibrateCmd message. Also converts values to other types if specified.
             * @function toObject
             * @memberof Buttplug.DeviceMessage.VibrateCmd
             * @static
             * @param {Buttplug.DeviceMessage.VibrateCmd} message VibrateCmd
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            VibrateCmd.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.speeds = [];
                if (message.speeds && message.speeds.length) {
                    object.speeds = [];
                    for (var j = 0; j < message.speeds.length; ++j)
                        object.speeds[j] = $root.Buttplug.DeviceMessage.VibrateComponent.toObject(message.speeds[j], options);
                }
                return object;
            };

            /**
             * Converts this VibrateCmd to JSON.
             * @function toJSON
             * @memberof Buttplug.DeviceMessage.VibrateCmd
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            VibrateCmd.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return VibrateCmd;
        })();

        DeviceMessage.RotateComponent = (function() {

            /**
             * Properties of a RotateComponent.
             * @memberof Buttplug.DeviceMessage
             * @interface IRotateComponent
             * @property {number|null} [index] RotateComponent index
             * @property {number|null} [speed] RotateComponent speed
             * @property {boolean|null} [clockwise] RotateComponent clockwise
             */

            /**
             * Constructs a new RotateComponent.
             * @memberof Buttplug.DeviceMessage
             * @classdesc Represents a RotateComponent.
             * @implements IRotateComponent
             * @constructor
             * @param {Buttplug.DeviceMessage.IRotateComponent=} [properties] Properties to set
             */
            function RotateComponent(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * RotateComponent index.
             * @member {number} index
             * @memberof Buttplug.DeviceMessage.RotateComponent
             * @instance
             */
            RotateComponent.prototype.index = 0;

            /**
             * RotateComponent speed.
             * @member {number} speed
             * @memberof Buttplug.DeviceMessage.RotateComponent
             * @instance
             */
            RotateComponent.prototype.speed = 0;

            /**
             * RotateComponent clockwise.
             * @member {boolean} clockwise
             * @memberof Buttplug.DeviceMessage.RotateComponent
             * @instance
             */
            RotateComponent.prototype.clockwise = false;

            /**
             * Creates a new RotateComponent instance using the specified properties.
             * @function create
             * @memberof Buttplug.DeviceMessage.RotateComponent
             * @static
             * @param {Buttplug.DeviceMessage.IRotateComponent=} [properties] Properties to set
             * @returns {Buttplug.DeviceMessage.RotateComponent} RotateComponent instance
             */
            RotateComponent.create = function create(properties) {
                return new RotateComponent(properties);
            };

            /**
             * Encodes the specified RotateComponent message. Does not implicitly {@link Buttplug.DeviceMessage.RotateComponent.verify|verify} messages.
             * @function encode
             * @memberof Buttplug.DeviceMessage.RotateComponent
             * @static
             * @param {Buttplug.DeviceMessage.IRotateComponent} message RotateComponent message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RotateComponent.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.index != null && Object.hasOwnProperty.call(message, "index"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.index);
                if (message.speed != null && Object.hasOwnProperty.call(message, "speed"))
                    writer.uint32(/* id 2, wireType 1 =*/17).double(message.speed);
                if (message.clockwise != null && Object.hasOwnProperty.call(message, "clockwise"))
                    writer.uint32(/* id 3, wireType 0 =*/24).bool(message.clockwise);
                return writer;
            };

            /**
             * Encodes the specified RotateComponent message, length delimited. Does not implicitly {@link Buttplug.DeviceMessage.RotateComponent.verify|verify} messages.
             * @function encodeDelimited
             * @memberof Buttplug.DeviceMessage.RotateComponent
             * @static
             * @param {Buttplug.DeviceMessage.IRotateComponent} message RotateComponent message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RotateComponent.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a RotateComponent message from the specified reader or buffer.
             * @function decode
             * @memberof Buttplug.DeviceMessage.RotateComponent
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {Buttplug.DeviceMessage.RotateComponent} RotateComponent
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RotateComponent.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Buttplug.DeviceMessage.RotateComponent();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.index = reader.uint32();
                        break;
                    case 2:
                        message.speed = reader.double();
                        break;
                    case 3:
                        message.clockwise = reader.bool();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a RotateComponent message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof Buttplug.DeviceMessage.RotateComponent
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {Buttplug.DeviceMessage.RotateComponent} RotateComponent
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RotateComponent.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a RotateComponent message.
             * @function verify
             * @memberof Buttplug.DeviceMessage.RotateComponent
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            RotateComponent.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.index != null && message.hasOwnProperty("index"))
                    if (!$util.isInteger(message.index))
                        return "index: integer expected";
                if (message.speed != null && message.hasOwnProperty("speed"))
                    if (typeof message.speed !== "number")
                        return "speed: number expected";
                if (message.clockwise != null && message.hasOwnProperty("clockwise"))
                    if (typeof message.clockwise !== "boolean")
                        return "clockwise: boolean expected";
                return null;
            };

            /**
             * Creates a RotateComponent message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof Buttplug.DeviceMessage.RotateComponent
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {Buttplug.DeviceMessage.RotateComponent} RotateComponent
             */
            RotateComponent.fromObject = function fromObject(object) {
                if (object instanceof $root.Buttplug.DeviceMessage.RotateComponent)
                    return object;
                var message = new $root.Buttplug.DeviceMessage.RotateComponent();
                if (object.index != null)
                    message.index = object.index >>> 0;
                if (object.speed != null)
                    message.speed = Number(object.speed);
                if (object.clockwise != null)
                    message.clockwise = Boolean(object.clockwise);
                return message;
            };

            /**
             * Creates a plain object from a RotateComponent message. Also converts values to other types if specified.
             * @function toObject
             * @memberof Buttplug.DeviceMessage.RotateComponent
             * @static
             * @param {Buttplug.DeviceMessage.RotateComponent} message RotateComponent
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            RotateComponent.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.index = 0;
                    object.speed = 0;
                    object.clockwise = false;
                }
                if (message.index != null && message.hasOwnProperty("index"))
                    object.index = message.index;
                if (message.speed != null && message.hasOwnProperty("speed"))
                    object.speed = options.json && !isFinite(message.speed) ? String(message.speed) : message.speed;
                if (message.clockwise != null && message.hasOwnProperty("clockwise"))
                    object.clockwise = message.clockwise;
                return object;
            };

            /**
             * Converts this RotateComponent to JSON.
             * @function toJSON
             * @memberof Buttplug.DeviceMessage.RotateComponent
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            RotateComponent.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return RotateComponent;
        })();

        DeviceMessage.RotateCmd = (function() {

            /**
             * Properties of a RotateCmd.
             * @memberof Buttplug.DeviceMessage
             * @interface IRotateCmd
             * @property {Array.<Buttplug.DeviceMessage.IRotateComponent>|null} [rotations] RotateCmd rotations
             */

            /**
             * Constructs a new RotateCmd.
             * @memberof Buttplug.DeviceMessage
             * @classdesc Represents a RotateCmd.
             * @implements IRotateCmd
             * @constructor
             * @param {Buttplug.DeviceMessage.IRotateCmd=} [properties] Properties to set
             */
            function RotateCmd(properties) {
                this.rotations = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * RotateCmd rotations.
             * @member {Array.<Buttplug.DeviceMessage.IRotateComponent>} rotations
             * @memberof Buttplug.DeviceMessage.RotateCmd
             * @instance
             */
            RotateCmd.prototype.rotations = $util.emptyArray;

            /**
             * Creates a new RotateCmd instance using the specified properties.
             * @function create
             * @memberof Buttplug.DeviceMessage.RotateCmd
             * @static
             * @param {Buttplug.DeviceMessage.IRotateCmd=} [properties] Properties to set
             * @returns {Buttplug.DeviceMessage.RotateCmd} RotateCmd instance
             */
            RotateCmd.create = function create(properties) {
                return new RotateCmd(properties);
            };

            /**
             * Encodes the specified RotateCmd message. Does not implicitly {@link Buttplug.DeviceMessage.RotateCmd.verify|verify} messages.
             * @function encode
             * @memberof Buttplug.DeviceMessage.RotateCmd
             * @static
             * @param {Buttplug.DeviceMessage.IRotateCmd} message RotateCmd message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RotateCmd.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.rotations != null && message.rotations.length)
                    for (var i = 0; i < message.rotations.length; ++i)
                        $root.Buttplug.DeviceMessage.RotateComponent.encode(message.rotations[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified RotateCmd message, length delimited. Does not implicitly {@link Buttplug.DeviceMessage.RotateCmd.verify|verify} messages.
             * @function encodeDelimited
             * @memberof Buttplug.DeviceMessage.RotateCmd
             * @static
             * @param {Buttplug.DeviceMessage.IRotateCmd} message RotateCmd message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RotateCmd.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a RotateCmd message from the specified reader or buffer.
             * @function decode
             * @memberof Buttplug.DeviceMessage.RotateCmd
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {Buttplug.DeviceMessage.RotateCmd} RotateCmd
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RotateCmd.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Buttplug.DeviceMessage.RotateCmd();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        if (!(message.rotations && message.rotations.length))
                            message.rotations = [];
                        message.rotations.push($root.Buttplug.DeviceMessage.RotateComponent.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a RotateCmd message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof Buttplug.DeviceMessage.RotateCmd
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {Buttplug.DeviceMessage.RotateCmd} RotateCmd
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RotateCmd.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a RotateCmd message.
             * @function verify
             * @memberof Buttplug.DeviceMessage.RotateCmd
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            RotateCmd.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.rotations != null && message.hasOwnProperty("rotations")) {
                    if (!Array.isArray(message.rotations))
                        return "rotations: array expected";
                    for (var i = 0; i < message.rotations.length; ++i) {
                        var error = $root.Buttplug.DeviceMessage.RotateComponent.verify(message.rotations[i]);
                        if (error)
                            return "rotations." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a RotateCmd message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof Buttplug.DeviceMessage.RotateCmd
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {Buttplug.DeviceMessage.RotateCmd} RotateCmd
             */
            RotateCmd.fromObject = function fromObject(object) {
                if (object instanceof $root.Buttplug.DeviceMessage.RotateCmd)
                    return object;
                var message = new $root.Buttplug.DeviceMessage.RotateCmd();
                if (object.rotations) {
                    if (!Array.isArray(object.rotations))
                        throw TypeError(".Buttplug.DeviceMessage.RotateCmd.rotations: array expected");
                    message.rotations = [];
                    for (var i = 0; i < object.rotations.length; ++i) {
                        if (typeof object.rotations[i] !== "object")
                            throw TypeError(".Buttplug.DeviceMessage.RotateCmd.rotations: object expected");
                        message.rotations[i] = $root.Buttplug.DeviceMessage.RotateComponent.fromObject(object.rotations[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a RotateCmd message. Also converts values to other types if specified.
             * @function toObject
             * @memberof Buttplug.DeviceMessage.RotateCmd
             * @static
             * @param {Buttplug.DeviceMessage.RotateCmd} message RotateCmd
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            RotateCmd.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.rotations = [];
                if (message.rotations && message.rotations.length) {
                    object.rotations = [];
                    for (var j = 0; j < message.rotations.length; ++j)
                        object.rotations[j] = $root.Buttplug.DeviceMessage.RotateComponent.toObject(message.rotations[j], options);
                }
                return object;
            };

            /**
             * Converts this RotateCmd to JSON.
             * @function toJSON
             * @memberof Buttplug.DeviceMessage.RotateCmd
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            RotateCmd.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return RotateCmd;
        })();

        DeviceMessage.LinearComponent = (function() {

            /**
             * Properties of a LinearComponent.
             * @memberof Buttplug.DeviceMessage
             * @interface ILinearComponent
             * @property {number|null} [index] LinearComponent index
             * @property {number|null} [duration] LinearComponent duration
             * @property {number|null} [position] LinearComponent position
             */

            /**
             * Constructs a new LinearComponent.
             * @memberof Buttplug.DeviceMessage
             * @classdesc Represents a LinearComponent.
             * @implements ILinearComponent
             * @constructor
             * @param {Buttplug.DeviceMessage.ILinearComponent=} [properties] Properties to set
             */
            function LinearComponent(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * LinearComponent index.
             * @member {number} index
             * @memberof Buttplug.DeviceMessage.LinearComponent
             * @instance
             */
            LinearComponent.prototype.index = 0;

            /**
             * LinearComponent duration.
             * @member {number} duration
             * @memberof Buttplug.DeviceMessage.LinearComponent
             * @instance
             */
            LinearComponent.prototype.duration = 0;

            /**
             * LinearComponent position.
             * @member {number} position
             * @memberof Buttplug.DeviceMessage.LinearComponent
             * @instance
             */
            LinearComponent.prototype.position = 0;

            /**
             * Creates a new LinearComponent instance using the specified properties.
             * @function create
             * @memberof Buttplug.DeviceMessage.LinearComponent
             * @static
             * @param {Buttplug.DeviceMessage.ILinearComponent=} [properties] Properties to set
             * @returns {Buttplug.DeviceMessage.LinearComponent} LinearComponent instance
             */
            LinearComponent.create = function create(properties) {
                return new LinearComponent(properties);
            };

            /**
             * Encodes the specified LinearComponent message. Does not implicitly {@link Buttplug.DeviceMessage.LinearComponent.verify|verify} messages.
             * @function encode
             * @memberof Buttplug.DeviceMessage.LinearComponent
             * @static
             * @param {Buttplug.DeviceMessage.ILinearComponent} message LinearComponent message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LinearComponent.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.index != null && Object.hasOwnProperty.call(message, "index"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.index);
                if (message.duration != null && Object.hasOwnProperty.call(message, "duration"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.duration);
                if (message.position != null && Object.hasOwnProperty.call(message, "position"))
                    writer.uint32(/* id 3, wireType 1 =*/25).double(message.position);
                return writer;
            };

            /**
             * Encodes the specified LinearComponent message, length delimited. Does not implicitly {@link Buttplug.DeviceMessage.LinearComponent.verify|verify} messages.
             * @function encodeDelimited
             * @memberof Buttplug.DeviceMessage.LinearComponent
             * @static
             * @param {Buttplug.DeviceMessage.ILinearComponent} message LinearComponent message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LinearComponent.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a LinearComponent message from the specified reader or buffer.
             * @function decode
             * @memberof Buttplug.DeviceMessage.LinearComponent
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {Buttplug.DeviceMessage.LinearComponent} LinearComponent
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LinearComponent.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Buttplug.DeviceMessage.LinearComponent();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.index = reader.uint32();
                        break;
                    case 2:
                        message.duration = reader.uint32();
                        break;
                    case 3:
                        message.position = reader.double();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a LinearComponent message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof Buttplug.DeviceMessage.LinearComponent
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {Buttplug.DeviceMessage.LinearComponent} LinearComponent
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LinearComponent.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a LinearComponent message.
             * @function verify
             * @memberof Buttplug.DeviceMessage.LinearComponent
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            LinearComponent.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.index != null && message.hasOwnProperty("index"))
                    if (!$util.isInteger(message.index))
                        return "index: integer expected";
                if (message.duration != null && message.hasOwnProperty("duration"))
                    if (!$util.isInteger(message.duration))
                        return "duration: integer expected";
                if (message.position != null && message.hasOwnProperty("position"))
                    if (typeof message.position !== "number")
                        return "position: number expected";
                return null;
            };

            /**
             * Creates a LinearComponent message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof Buttplug.DeviceMessage.LinearComponent
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {Buttplug.DeviceMessage.LinearComponent} LinearComponent
             */
            LinearComponent.fromObject = function fromObject(object) {
                if (object instanceof $root.Buttplug.DeviceMessage.LinearComponent)
                    return object;
                var message = new $root.Buttplug.DeviceMessage.LinearComponent();
                if (object.index != null)
                    message.index = object.index >>> 0;
                if (object.duration != null)
                    message.duration = object.duration >>> 0;
                if (object.position != null)
                    message.position = Number(object.position);
                return message;
            };

            /**
             * Creates a plain object from a LinearComponent message. Also converts values to other types if specified.
             * @function toObject
             * @memberof Buttplug.DeviceMessage.LinearComponent
             * @static
             * @param {Buttplug.DeviceMessage.LinearComponent} message LinearComponent
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            LinearComponent.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.index = 0;
                    object.duration = 0;
                    object.position = 0;
                }
                if (message.index != null && message.hasOwnProperty("index"))
                    object.index = message.index;
                if (message.duration != null && message.hasOwnProperty("duration"))
                    object.duration = message.duration;
                if (message.position != null && message.hasOwnProperty("position"))
                    object.position = options.json && !isFinite(message.position) ? String(message.position) : message.position;
                return object;
            };

            /**
             * Converts this LinearComponent to JSON.
             * @function toJSON
             * @memberof Buttplug.DeviceMessage.LinearComponent
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            LinearComponent.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return LinearComponent;
        })();

        DeviceMessage.LinearCmd = (function() {

            /**
             * Properties of a LinearCmd.
             * @memberof Buttplug.DeviceMessage
             * @interface ILinearCmd
             * @property {Array.<Buttplug.DeviceMessage.ILinearComponent>|null} [movements] LinearCmd movements
             */

            /**
             * Constructs a new LinearCmd.
             * @memberof Buttplug.DeviceMessage
             * @classdesc Represents a LinearCmd.
             * @implements ILinearCmd
             * @constructor
             * @param {Buttplug.DeviceMessage.ILinearCmd=} [properties] Properties to set
             */
            function LinearCmd(properties) {
                this.movements = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * LinearCmd movements.
             * @member {Array.<Buttplug.DeviceMessage.ILinearComponent>} movements
             * @memberof Buttplug.DeviceMessage.LinearCmd
             * @instance
             */
            LinearCmd.prototype.movements = $util.emptyArray;

            /**
             * Creates a new LinearCmd instance using the specified properties.
             * @function create
             * @memberof Buttplug.DeviceMessage.LinearCmd
             * @static
             * @param {Buttplug.DeviceMessage.ILinearCmd=} [properties] Properties to set
             * @returns {Buttplug.DeviceMessage.LinearCmd} LinearCmd instance
             */
            LinearCmd.create = function create(properties) {
                return new LinearCmd(properties);
            };

            /**
             * Encodes the specified LinearCmd message. Does not implicitly {@link Buttplug.DeviceMessage.LinearCmd.verify|verify} messages.
             * @function encode
             * @memberof Buttplug.DeviceMessage.LinearCmd
             * @static
             * @param {Buttplug.DeviceMessage.ILinearCmd} message LinearCmd message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LinearCmd.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.movements != null && message.movements.length)
                    for (var i = 0; i < message.movements.length; ++i)
                        $root.Buttplug.DeviceMessage.LinearComponent.encode(message.movements[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified LinearCmd message, length delimited. Does not implicitly {@link Buttplug.DeviceMessage.LinearCmd.verify|verify} messages.
             * @function encodeDelimited
             * @memberof Buttplug.DeviceMessage.LinearCmd
             * @static
             * @param {Buttplug.DeviceMessage.ILinearCmd} message LinearCmd message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LinearCmd.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a LinearCmd message from the specified reader or buffer.
             * @function decode
             * @memberof Buttplug.DeviceMessage.LinearCmd
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {Buttplug.DeviceMessage.LinearCmd} LinearCmd
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LinearCmd.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Buttplug.DeviceMessage.LinearCmd();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        if (!(message.movements && message.movements.length))
                            message.movements = [];
                        message.movements.push($root.Buttplug.DeviceMessage.LinearComponent.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a LinearCmd message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof Buttplug.DeviceMessage.LinearCmd
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {Buttplug.DeviceMessage.LinearCmd} LinearCmd
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LinearCmd.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a LinearCmd message.
             * @function verify
             * @memberof Buttplug.DeviceMessage.LinearCmd
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            LinearCmd.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.movements != null && message.hasOwnProperty("movements")) {
                    if (!Array.isArray(message.movements))
                        return "movements: array expected";
                    for (var i = 0; i < message.movements.length; ++i) {
                        var error = $root.Buttplug.DeviceMessage.LinearComponent.verify(message.movements[i]);
                        if (error)
                            return "movements." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a LinearCmd message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof Buttplug.DeviceMessage.LinearCmd
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {Buttplug.DeviceMessage.LinearCmd} LinearCmd
             */
            LinearCmd.fromObject = function fromObject(object) {
                if (object instanceof $root.Buttplug.DeviceMessage.LinearCmd)
                    return object;
                var message = new $root.Buttplug.DeviceMessage.LinearCmd();
                if (object.movements) {
                    if (!Array.isArray(object.movements))
                        throw TypeError(".Buttplug.DeviceMessage.LinearCmd.movements: array expected");
                    message.movements = [];
                    for (var i = 0; i < object.movements.length; ++i) {
                        if (typeof object.movements[i] !== "object")
                            throw TypeError(".Buttplug.DeviceMessage.LinearCmd.movements: object expected");
                        message.movements[i] = $root.Buttplug.DeviceMessage.LinearComponent.fromObject(object.movements[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a LinearCmd message. Also converts values to other types if specified.
             * @function toObject
             * @memberof Buttplug.DeviceMessage.LinearCmd
             * @static
             * @param {Buttplug.DeviceMessage.LinearCmd} message LinearCmd
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            LinearCmd.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.movements = [];
                if (message.movements && message.movements.length) {
                    object.movements = [];
                    for (var j = 0; j < message.movements.length; ++j)
                        object.movements[j] = $root.Buttplug.DeviceMessage.LinearComponent.toObject(message.movements[j], options);
                }
                return object;
            };

            /**
             * Converts this LinearCmd to JSON.
             * @function toJSON
             * @memberof Buttplug.DeviceMessage.LinearCmd
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            LinearCmd.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return LinearCmd;
        })();

        DeviceMessage.StopDeviceCmd = (function() {

            /**
             * Properties of a StopDeviceCmd.
             * @memberof Buttplug.DeviceMessage
             * @interface IStopDeviceCmd
             */

            /**
             * Constructs a new StopDeviceCmd.
             * @memberof Buttplug.DeviceMessage
             * @classdesc Represents a StopDeviceCmd.
             * @implements IStopDeviceCmd
             * @constructor
             * @param {Buttplug.DeviceMessage.IStopDeviceCmd=} [properties] Properties to set
             */
            function StopDeviceCmd(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Creates a new StopDeviceCmd instance using the specified properties.
             * @function create
             * @memberof Buttplug.DeviceMessage.StopDeviceCmd
             * @static
             * @param {Buttplug.DeviceMessage.IStopDeviceCmd=} [properties] Properties to set
             * @returns {Buttplug.DeviceMessage.StopDeviceCmd} StopDeviceCmd instance
             */
            StopDeviceCmd.create = function create(properties) {
                return new StopDeviceCmd(properties);
            };

            /**
             * Encodes the specified StopDeviceCmd message. Does not implicitly {@link Buttplug.DeviceMessage.StopDeviceCmd.verify|verify} messages.
             * @function encode
             * @memberof Buttplug.DeviceMessage.StopDeviceCmd
             * @static
             * @param {Buttplug.DeviceMessage.IStopDeviceCmd} message StopDeviceCmd message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            StopDeviceCmd.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                return writer;
            };

            /**
             * Encodes the specified StopDeviceCmd message, length delimited. Does not implicitly {@link Buttplug.DeviceMessage.StopDeviceCmd.verify|verify} messages.
             * @function encodeDelimited
             * @memberof Buttplug.DeviceMessage.StopDeviceCmd
             * @static
             * @param {Buttplug.DeviceMessage.IStopDeviceCmd} message StopDeviceCmd message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            StopDeviceCmd.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a StopDeviceCmd message from the specified reader or buffer.
             * @function decode
             * @memberof Buttplug.DeviceMessage.StopDeviceCmd
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {Buttplug.DeviceMessage.StopDeviceCmd} StopDeviceCmd
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            StopDeviceCmd.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Buttplug.DeviceMessage.StopDeviceCmd();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a StopDeviceCmd message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof Buttplug.DeviceMessage.StopDeviceCmd
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {Buttplug.DeviceMessage.StopDeviceCmd} StopDeviceCmd
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            StopDeviceCmd.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a StopDeviceCmd message.
             * @function verify
             * @memberof Buttplug.DeviceMessage.StopDeviceCmd
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            StopDeviceCmd.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                return null;
            };

            /**
             * Creates a StopDeviceCmd message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof Buttplug.DeviceMessage.StopDeviceCmd
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {Buttplug.DeviceMessage.StopDeviceCmd} StopDeviceCmd
             */
            StopDeviceCmd.fromObject = function fromObject(object) {
                if (object instanceof $root.Buttplug.DeviceMessage.StopDeviceCmd)
                    return object;
                return new $root.Buttplug.DeviceMessage.StopDeviceCmd();
            };

            /**
             * Creates a plain object from a StopDeviceCmd message. Also converts values to other types if specified.
             * @function toObject
             * @memberof Buttplug.DeviceMessage.StopDeviceCmd
             * @static
             * @param {Buttplug.DeviceMessage.StopDeviceCmd} message StopDeviceCmd
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            StopDeviceCmd.toObject = function toObject() {
                return {};
            };

            /**
             * Converts this StopDeviceCmd to JSON.
             * @function toJSON
             * @memberof Buttplug.DeviceMessage.StopDeviceCmd
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            StopDeviceCmd.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return StopDeviceCmd;
        })();

        DeviceMessage.RawReadCmd = (function() {

            /**
             * Properties of a RawReadCmd.
             * @memberof Buttplug.DeviceMessage
             * @interface IRawReadCmd
             * @property {Buttplug.Endpoint|null} [endpoint] RawReadCmd endpoint
             * @property {Uint8Array|null} [data] RawReadCmd data
             * @property {number|null} [expectedLength] RawReadCmd expectedLength
             * @property {number|null} [timeout] RawReadCmd timeout
             */

            /**
             * Constructs a new RawReadCmd.
             * @memberof Buttplug.DeviceMessage
             * @classdesc Represents a RawReadCmd.
             * @implements IRawReadCmd
             * @constructor
             * @param {Buttplug.DeviceMessage.IRawReadCmd=} [properties] Properties to set
             */
            function RawReadCmd(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * RawReadCmd endpoint.
             * @member {Buttplug.Endpoint} endpoint
             * @memberof Buttplug.DeviceMessage.RawReadCmd
             * @instance
             */
            RawReadCmd.prototype.endpoint = 0;

            /**
             * RawReadCmd data.
             * @member {Uint8Array} data
             * @memberof Buttplug.DeviceMessage.RawReadCmd
             * @instance
             */
            RawReadCmd.prototype.data = $util.newBuffer([]);

            /**
             * RawReadCmd expectedLength.
             * @member {number} expectedLength
             * @memberof Buttplug.DeviceMessage.RawReadCmd
             * @instance
             */
            RawReadCmd.prototype.expectedLength = 0;

            /**
             * RawReadCmd timeout.
             * @member {number} timeout
             * @memberof Buttplug.DeviceMessage.RawReadCmd
             * @instance
             */
            RawReadCmd.prototype.timeout = 0;

            /**
             * Creates a new RawReadCmd instance using the specified properties.
             * @function create
             * @memberof Buttplug.DeviceMessage.RawReadCmd
             * @static
             * @param {Buttplug.DeviceMessage.IRawReadCmd=} [properties] Properties to set
             * @returns {Buttplug.DeviceMessage.RawReadCmd} RawReadCmd instance
             */
            RawReadCmd.create = function create(properties) {
                return new RawReadCmd(properties);
            };

            /**
             * Encodes the specified RawReadCmd message. Does not implicitly {@link Buttplug.DeviceMessage.RawReadCmd.verify|verify} messages.
             * @function encode
             * @memberof Buttplug.DeviceMessage.RawReadCmd
             * @static
             * @param {Buttplug.DeviceMessage.IRawReadCmd} message RawReadCmd message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RawReadCmd.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.endpoint != null && Object.hasOwnProperty.call(message, "endpoint"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.endpoint);
                if (message.data != null && Object.hasOwnProperty.call(message, "data"))
                    writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.data);
                if (message.expectedLength != null && Object.hasOwnProperty.call(message, "expectedLength"))
                    writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.expectedLength);
                if (message.timeout != null && Object.hasOwnProperty.call(message, "timeout"))
                    writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.timeout);
                return writer;
            };

            /**
             * Encodes the specified RawReadCmd message, length delimited. Does not implicitly {@link Buttplug.DeviceMessage.RawReadCmd.verify|verify} messages.
             * @function encodeDelimited
             * @memberof Buttplug.DeviceMessage.RawReadCmd
             * @static
             * @param {Buttplug.DeviceMessage.IRawReadCmd} message RawReadCmd message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RawReadCmd.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a RawReadCmd message from the specified reader or buffer.
             * @function decode
             * @memberof Buttplug.DeviceMessage.RawReadCmd
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {Buttplug.DeviceMessage.RawReadCmd} RawReadCmd
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RawReadCmd.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Buttplug.DeviceMessage.RawReadCmd();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.endpoint = reader.int32();
                        break;
                    case 2:
                        message.data = reader.bytes();
                        break;
                    case 3:
                        message.expectedLength = reader.uint32();
                        break;
                    case 4:
                        message.timeout = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a RawReadCmd message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof Buttplug.DeviceMessage.RawReadCmd
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {Buttplug.DeviceMessage.RawReadCmd} RawReadCmd
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RawReadCmd.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a RawReadCmd message.
             * @function verify
             * @memberof Buttplug.DeviceMessage.RawReadCmd
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            RawReadCmd.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.endpoint != null && message.hasOwnProperty("endpoint"))
                    switch (message.endpoint) {
                    default:
                        return "endpoint: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                    case 6:
                    case 7:
                    case 8:
                    case 9:
                    case 10:
                    case 11:
                    case 12:
                    case 13:
                    case 14:
                    case 15:
                    case 16:
                    case 17:
                    case 18:
                    case 19:
                    case 20:
                    case 21:
                    case 22:
                    case 23:
                    case 24:
                    case 25:
                    case 26:
                    case 27:
                    case 28:
                    case 29:
                    case 30:
                    case 31:
                    case 32:
                    case 33:
                    case 34:
                    case 35:
                    case 36:
                    case 37:
                    case 38:
                    case 39:
                    case 40:
                    case 41:
                    case 42:
                    case 43:
                    case 44:
                        break;
                    }
                if (message.data != null && message.hasOwnProperty("data"))
                    if (!(message.data && typeof message.data.length === "number" || $util.isString(message.data)))
                        return "data: buffer expected";
                if (message.expectedLength != null && message.hasOwnProperty("expectedLength"))
                    if (!$util.isInteger(message.expectedLength))
                        return "expectedLength: integer expected";
                if (message.timeout != null && message.hasOwnProperty("timeout"))
                    if (!$util.isInteger(message.timeout))
                        return "timeout: integer expected";
                return null;
            };

            /**
             * Creates a RawReadCmd message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof Buttplug.DeviceMessage.RawReadCmd
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {Buttplug.DeviceMessage.RawReadCmd} RawReadCmd
             */
            RawReadCmd.fromObject = function fromObject(object) {
                if (object instanceof $root.Buttplug.DeviceMessage.RawReadCmd)
                    return object;
                var message = new $root.Buttplug.DeviceMessage.RawReadCmd();
                switch (object.endpoint) {
                case "Command":
                case 0:
                    message.endpoint = 0;
                    break;
                case "Firmware":
                case 1:
                    message.endpoint = 1;
                    break;
                case "Rx":
                case 2:
                    message.endpoint = 2;
                    break;
                case "RxAccel":
                case 3:
                    message.endpoint = 3;
                    break;
                case "RxBLEBattery":
                case 4:
                    message.endpoint = 4;
                    break;
                case "RxPressure":
                case 5:
                    message.endpoint = 5;
                    break;
                case "RxTouch":
                case 6:
                    message.endpoint = 6;
                    break;
                case "Tx":
                case 7:
                    message.endpoint = 7;
                    break;
                case "TxMode":
                case 8:
                    message.endpoint = 8;
                    break;
                case "TxShock":
                case 9:
                    message.endpoint = 9;
                    break;
                case "TxVibrate":
                case 10:
                    message.endpoint = 10;
                    break;
                case "TxVendorControl":
                case 11:
                    message.endpoint = 11;
                    break;
                case "Whitelist":
                case 12:
                    message.endpoint = 12;
                    break;
                case "Generic0":
                case 13:
                    message.endpoint = 13;
                    break;
                case "Generic1":
                case 14:
                    message.endpoint = 14;
                    break;
                case "Generic2":
                case 15:
                    message.endpoint = 15;
                    break;
                case "Generic3":
                case 16:
                    message.endpoint = 16;
                    break;
                case "Generic4":
                case 17:
                    message.endpoint = 17;
                    break;
                case "Generic5":
                case 18:
                    message.endpoint = 18;
                    break;
                case "Generic6":
                case 19:
                    message.endpoint = 19;
                    break;
                case "Generic7":
                case 20:
                    message.endpoint = 20;
                    break;
                case "Generic8":
                case 21:
                    message.endpoint = 21;
                    break;
                case "Generic9":
                case 22:
                    message.endpoint = 22;
                    break;
                case "Generic10":
                case 23:
                    message.endpoint = 23;
                    break;
                case "Generic11":
                case 24:
                    message.endpoint = 24;
                    break;
                case "Generic12":
                case 25:
                    message.endpoint = 25;
                    break;
                case "Generic13":
                case 26:
                    message.endpoint = 26;
                    break;
                case "Generic14":
                case 27:
                    message.endpoint = 27;
                    break;
                case "Generic15":
                case 28:
                    message.endpoint = 28;
                    break;
                case "Generic16":
                case 29:
                    message.endpoint = 29;
                    break;
                case "Generic17":
                case 30:
                    message.endpoint = 30;
                    break;
                case "Generic18":
                case 31:
                    message.endpoint = 31;
                    break;
                case "Generic19":
                case 32:
                    message.endpoint = 32;
                    break;
                case "Generic20":
                case 33:
                    message.endpoint = 33;
                    break;
                case "Generic21":
                case 34:
                    message.endpoint = 34;
                    break;
                case "Generic22":
                case 35:
                    message.endpoint = 35;
                    break;
                case "Generic23":
                case 36:
                    message.endpoint = 36;
                    break;
                case "Generic24":
                case 37:
                    message.endpoint = 37;
                    break;
                case "Generic25":
                case 38:
                    message.endpoint = 38;
                    break;
                case "Generic26":
                case 39:
                    message.endpoint = 39;
                    break;
                case "Generic27":
                case 40:
                    message.endpoint = 40;
                    break;
                case "Generic28":
                case 41:
                    message.endpoint = 41;
                    break;
                case "Generic29":
                case 42:
                    message.endpoint = 42;
                    break;
                case "Generic30":
                case 43:
                    message.endpoint = 43;
                    break;
                case "Generic31":
                case 44:
                    message.endpoint = 44;
                    break;
                }
                if (object.data != null)
                    if (typeof object.data === "string")
                        $util.base64.decode(object.data, message.data = $util.newBuffer($util.base64.length(object.data)), 0);
                    else if (object.data.length)
                        message.data = object.data;
                if (object.expectedLength != null)
                    message.expectedLength = object.expectedLength >>> 0;
                if (object.timeout != null)
                    message.timeout = object.timeout >>> 0;
                return message;
            };

            /**
             * Creates a plain object from a RawReadCmd message. Also converts values to other types if specified.
             * @function toObject
             * @memberof Buttplug.DeviceMessage.RawReadCmd
             * @static
             * @param {Buttplug.DeviceMessage.RawReadCmd} message RawReadCmd
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            RawReadCmd.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.endpoint = options.enums === String ? "Command" : 0;
                    if (options.bytes === String)
                        object.data = "";
                    else {
                        object.data = [];
                        if (options.bytes !== Array)
                            object.data = $util.newBuffer(object.data);
                    }
                    object.expectedLength = 0;
                    object.timeout = 0;
                }
                if (message.endpoint != null && message.hasOwnProperty("endpoint"))
                    object.endpoint = options.enums === String ? $root.Buttplug.Endpoint[message.endpoint] : message.endpoint;
                if (message.data != null && message.hasOwnProperty("data"))
                    object.data = options.bytes === String ? $util.base64.encode(message.data, 0, message.data.length) : options.bytes === Array ? Array.prototype.slice.call(message.data) : message.data;
                if (message.expectedLength != null && message.hasOwnProperty("expectedLength"))
                    object.expectedLength = message.expectedLength;
                if (message.timeout != null && message.hasOwnProperty("timeout"))
                    object.timeout = message.timeout;
                return object;
            };

            /**
             * Converts this RawReadCmd to JSON.
             * @function toJSON
             * @memberof Buttplug.DeviceMessage.RawReadCmd
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            RawReadCmd.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return RawReadCmd;
        })();

        DeviceMessage.RawWriteCmd = (function() {

            /**
             * Properties of a RawWriteCmd.
             * @memberof Buttplug.DeviceMessage
             * @interface IRawWriteCmd
             * @property {Buttplug.Endpoint|null} [endpoint] RawWriteCmd endpoint
             * @property {Uint8Array|null} [data] RawWriteCmd data
             * @property {boolean|null} [writeWithResponse] RawWriteCmd writeWithResponse
             */

            /**
             * Constructs a new RawWriteCmd.
             * @memberof Buttplug.DeviceMessage
             * @classdesc Represents a RawWriteCmd.
             * @implements IRawWriteCmd
             * @constructor
             * @param {Buttplug.DeviceMessage.IRawWriteCmd=} [properties] Properties to set
             */
            function RawWriteCmd(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * RawWriteCmd endpoint.
             * @member {Buttplug.Endpoint} endpoint
             * @memberof Buttplug.DeviceMessage.RawWriteCmd
             * @instance
             */
            RawWriteCmd.prototype.endpoint = 0;

            /**
             * RawWriteCmd data.
             * @member {Uint8Array} data
             * @memberof Buttplug.DeviceMessage.RawWriteCmd
             * @instance
             */
            RawWriteCmd.prototype.data = $util.newBuffer([]);

            /**
             * RawWriteCmd writeWithResponse.
             * @member {boolean} writeWithResponse
             * @memberof Buttplug.DeviceMessage.RawWriteCmd
             * @instance
             */
            RawWriteCmd.prototype.writeWithResponse = false;

            /**
             * Creates a new RawWriteCmd instance using the specified properties.
             * @function create
             * @memberof Buttplug.DeviceMessage.RawWriteCmd
             * @static
             * @param {Buttplug.DeviceMessage.IRawWriteCmd=} [properties] Properties to set
             * @returns {Buttplug.DeviceMessage.RawWriteCmd} RawWriteCmd instance
             */
            RawWriteCmd.create = function create(properties) {
                return new RawWriteCmd(properties);
            };

            /**
             * Encodes the specified RawWriteCmd message. Does not implicitly {@link Buttplug.DeviceMessage.RawWriteCmd.verify|verify} messages.
             * @function encode
             * @memberof Buttplug.DeviceMessage.RawWriteCmd
             * @static
             * @param {Buttplug.DeviceMessage.IRawWriteCmd} message RawWriteCmd message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RawWriteCmd.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.endpoint != null && Object.hasOwnProperty.call(message, "endpoint"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.endpoint);
                if (message.data != null && Object.hasOwnProperty.call(message, "data"))
                    writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.data);
                if (message.writeWithResponse != null && Object.hasOwnProperty.call(message, "writeWithResponse"))
                    writer.uint32(/* id 3, wireType 0 =*/24).bool(message.writeWithResponse);
                return writer;
            };

            /**
             * Encodes the specified RawWriteCmd message, length delimited. Does not implicitly {@link Buttplug.DeviceMessage.RawWriteCmd.verify|verify} messages.
             * @function encodeDelimited
             * @memberof Buttplug.DeviceMessage.RawWriteCmd
             * @static
             * @param {Buttplug.DeviceMessage.IRawWriteCmd} message RawWriteCmd message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RawWriteCmd.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a RawWriteCmd message from the specified reader or buffer.
             * @function decode
             * @memberof Buttplug.DeviceMessage.RawWriteCmd
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {Buttplug.DeviceMessage.RawWriteCmd} RawWriteCmd
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RawWriteCmd.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Buttplug.DeviceMessage.RawWriteCmd();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.endpoint = reader.int32();
                        break;
                    case 2:
                        message.data = reader.bytes();
                        break;
                    case 3:
                        message.writeWithResponse = reader.bool();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a RawWriteCmd message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof Buttplug.DeviceMessage.RawWriteCmd
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {Buttplug.DeviceMessage.RawWriteCmd} RawWriteCmd
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RawWriteCmd.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a RawWriteCmd message.
             * @function verify
             * @memberof Buttplug.DeviceMessage.RawWriteCmd
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            RawWriteCmd.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.endpoint != null && message.hasOwnProperty("endpoint"))
                    switch (message.endpoint) {
                    default:
                        return "endpoint: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                    case 6:
                    case 7:
                    case 8:
                    case 9:
                    case 10:
                    case 11:
                    case 12:
                    case 13:
                    case 14:
                    case 15:
                    case 16:
                    case 17:
                    case 18:
                    case 19:
                    case 20:
                    case 21:
                    case 22:
                    case 23:
                    case 24:
                    case 25:
                    case 26:
                    case 27:
                    case 28:
                    case 29:
                    case 30:
                    case 31:
                    case 32:
                    case 33:
                    case 34:
                    case 35:
                    case 36:
                    case 37:
                    case 38:
                    case 39:
                    case 40:
                    case 41:
                    case 42:
                    case 43:
                    case 44:
                        break;
                    }
                if (message.data != null && message.hasOwnProperty("data"))
                    if (!(message.data && typeof message.data.length === "number" || $util.isString(message.data)))
                        return "data: buffer expected";
                if (message.writeWithResponse != null && message.hasOwnProperty("writeWithResponse"))
                    if (typeof message.writeWithResponse !== "boolean")
                        return "writeWithResponse: boolean expected";
                return null;
            };

            /**
             * Creates a RawWriteCmd message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof Buttplug.DeviceMessage.RawWriteCmd
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {Buttplug.DeviceMessage.RawWriteCmd} RawWriteCmd
             */
            RawWriteCmd.fromObject = function fromObject(object) {
                if (object instanceof $root.Buttplug.DeviceMessage.RawWriteCmd)
                    return object;
                var message = new $root.Buttplug.DeviceMessage.RawWriteCmd();
                switch (object.endpoint) {
                case "Command":
                case 0:
                    message.endpoint = 0;
                    break;
                case "Firmware":
                case 1:
                    message.endpoint = 1;
                    break;
                case "Rx":
                case 2:
                    message.endpoint = 2;
                    break;
                case "RxAccel":
                case 3:
                    message.endpoint = 3;
                    break;
                case "RxBLEBattery":
                case 4:
                    message.endpoint = 4;
                    break;
                case "RxPressure":
                case 5:
                    message.endpoint = 5;
                    break;
                case "RxTouch":
                case 6:
                    message.endpoint = 6;
                    break;
                case "Tx":
                case 7:
                    message.endpoint = 7;
                    break;
                case "TxMode":
                case 8:
                    message.endpoint = 8;
                    break;
                case "TxShock":
                case 9:
                    message.endpoint = 9;
                    break;
                case "TxVibrate":
                case 10:
                    message.endpoint = 10;
                    break;
                case "TxVendorControl":
                case 11:
                    message.endpoint = 11;
                    break;
                case "Whitelist":
                case 12:
                    message.endpoint = 12;
                    break;
                case "Generic0":
                case 13:
                    message.endpoint = 13;
                    break;
                case "Generic1":
                case 14:
                    message.endpoint = 14;
                    break;
                case "Generic2":
                case 15:
                    message.endpoint = 15;
                    break;
                case "Generic3":
                case 16:
                    message.endpoint = 16;
                    break;
                case "Generic4":
                case 17:
                    message.endpoint = 17;
                    break;
                case "Generic5":
                case 18:
                    message.endpoint = 18;
                    break;
                case "Generic6":
                case 19:
                    message.endpoint = 19;
                    break;
                case "Generic7":
                case 20:
                    message.endpoint = 20;
                    break;
                case "Generic8":
                case 21:
                    message.endpoint = 21;
                    break;
                case "Generic9":
                case 22:
                    message.endpoint = 22;
                    break;
                case "Generic10":
                case 23:
                    message.endpoint = 23;
                    break;
                case "Generic11":
                case 24:
                    message.endpoint = 24;
                    break;
                case "Generic12":
                case 25:
                    message.endpoint = 25;
                    break;
                case "Generic13":
                case 26:
                    message.endpoint = 26;
                    break;
                case "Generic14":
                case 27:
                    message.endpoint = 27;
                    break;
                case "Generic15":
                case 28:
                    message.endpoint = 28;
                    break;
                case "Generic16":
                case 29:
                    message.endpoint = 29;
                    break;
                case "Generic17":
                case 30:
                    message.endpoint = 30;
                    break;
                case "Generic18":
                case 31:
                    message.endpoint = 31;
                    break;
                case "Generic19":
                case 32:
                    message.endpoint = 32;
                    break;
                case "Generic20":
                case 33:
                    message.endpoint = 33;
                    break;
                case "Generic21":
                case 34:
                    message.endpoint = 34;
                    break;
                case "Generic22":
                case 35:
                    message.endpoint = 35;
                    break;
                case "Generic23":
                case 36:
                    message.endpoint = 36;
                    break;
                case "Generic24":
                case 37:
                    message.endpoint = 37;
                    break;
                case "Generic25":
                case 38:
                    message.endpoint = 38;
                    break;
                case "Generic26":
                case 39:
                    message.endpoint = 39;
                    break;
                case "Generic27":
                case 40:
                    message.endpoint = 40;
                    break;
                case "Generic28":
                case 41:
                    message.endpoint = 41;
                    break;
                case "Generic29":
                case 42:
                    message.endpoint = 42;
                    break;
                case "Generic30":
                case 43:
                    message.endpoint = 43;
                    break;
                case "Generic31":
                case 44:
                    message.endpoint = 44;
                    break;
                }
                if (object.data != null)
                    if (typeof object.data === "string")
                        $util.base64.decode(object.data, message.data = $util.newBuffer($util.base64.length(object.data)), 0);
                    else if (object.data.length)
                        message.data = object.data;
                if (object.writeWithResponse != null)
                    message.writeWithResponse = Boolean(object.writeWithResponse);
                return message;
            };

            /**
             * Creates a plain object from a RawWriteCmd message. Also converts values to other types if specified.
             * @function toObject
             * @memberof Buttplug.DeviceMessage.RawWriteCmd
             * @static
             * @param {Buttplug.DeviceMessage.RawWriteCmd} message RawWriteCmd
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            RawWriteCmd.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.endpoint = options.enums === String ? "Command" : 0;
                    if (options.bytes === String)
                        object.data = "";
                    else {
                        object.data = [];
                        if (options.bytes !== Array)
                            object.data = $util.newBuffer(object.data);
                    }
                    object.writeWithResponse = false;
                }
                if (message.endpoint != null && message.hasOwnProperty("endpoint"))
                    object.endpoint = options.enums === String ? $root.Buttplug.Endpoint[message.endpoint] : message.endpoint;
                if (message.data != null && message.hasOwnProperty("data"))
                    object.data = options.bytes === String ? $util.base64.encode(message.data, 0, message.data.length) : options.bytes === Array ? Array.prototype.slice.call(message.data) : message.data;
                if (message.writeWithResponse != null && message.hasOwnProperty("writeWithResponse"))
                    object.writeWithResponse = message.writeWithResponse;
                return object;
            };

            /**
             * Converts this RawWriteCmd to JSON.
             * @function toJSON
             * @memberof Buttplug.DeviceMessage.RawWriteCmd
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            RawWriteCmd.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return RawWriteCmd;
        })();

        DeviceMessage.RawSubscribeCmd = (function() {

            /**
             * Properties of a RawSubscribeCmd.
             * @memberof Buttplug.DeviceMessage
             * @interface IRawSubscribeCmd
             * @property {Buttplug.Endpoint|null} [endpoint] RawSubscribeCmd endpoint
             */

            /**
             * Constructs a new RawSubscribeCmd.
             * @memberof Buttplug.DeviceMessage
             * @classdesc Represents a RawSubscribeCmd.
             * @implements IRawSubscribeCmd
             * @constructor
             * @param {Buttplug.DeviceMessage.IRawSubscribeCmd=} [properties] Properties to set
             */
            function RawSubscribeCmd(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * RawSubscribeCmd endpoint.
             * @member {Buttplug.Endpoint} endpoint
             * @memberof Buttplug.DeviceMessage.RawSubscribeCmd
             * @instance
             */
            RawSubscribeCmd.prototype.endpoint = 0;

            /**
             * Creates a new RawSubscribeCmd instance using the specified properties.
             * @function create
             * @memberof Buttplug.DeviceMessage.RawSubscribeCmd
             * @static
             * @param {Buttplug.DeviceMessage.IRawSubscribeCmd=} [properties] Properties to set
             * @returns {Buttplug.DeviceMessage.RawSubscribeCmd} RawSubscribeCmd instance
             */
            RawSubscribeCmd.create = function create(properties) {
                return new RawSubscribeCmd(properties);
            };

            /**
             * Encodes the specified RawSubscribeCmd message. Does not implicitly {@link Buttplug.DeviceMessage.RawSubscribeCmd.verify|verify} messages.
             * @function encode
             * @memberof Buttplug.DeviceMessage.RawSubscribeCmd
             * @static
             * @param {Buttplug.DeviceMessage.IRawSubscribeCmd} message RawSubscribeCmd message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RawSubscribeCmd.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.endpoint != null && Object.hasOwnProperty.call(message, "endpoint"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.endpoint);
                return writer;
            };

            /**
             * Encodes the specified RawSubscribeCmd message, length delimited. Does not implicitly {@link Buttplug.DeviceMessage.RawSubscribeCmd.verify|verify} messages.
             * @function encodeDelimited
             * @memberof Buttplug.DeviceMessage.RawSubscribeCmd
             * @static
             * @param {Buttplug.DeviceMessage.IRawSubscribeCmd} message RawSubscribeCmd message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RawSubscribeCmd.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a RawSubscribeCmd message from the specified reader or buffer.
             * @function decode
             * @memberof Buttplug.DeviceMessage.RawSubscribeCmd
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {Buttplug.DeviceMessage.RawSubscribeCmd} RawSubscribeCmd
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RawSubscribeCmd.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Buttplug.DeviceMessage.RawSubscribeCmd();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.endpoint = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a RawSubscribeCmd message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof Buttplug.DeviceMessage.RawSubscribeCmd
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {Buttplug.DeviceMessage.RawSubscribeCmd} RawSubscribeCmd
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RawSubscribeCmd.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a RawSubscribeCmd message.
             * @function verify
             * @memberof Buttplug.DeviceMessage.RawSubscribeCmd
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            RawSubscribeCmd.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.endpoint != null && message.hasOwnProperty("endpoint"))
                    switch (message.endpoint) {
                    default:
                        return "endpoint: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                    case 6:
                    case 7:
                    case 8:
                    case 9:
                    case 10:
                    case 11:
                    case 12:
                    case 13:
                    case 14:
                    case 15:
                    case 16:
                    case 17:
                    case 18:
                    case 19:
                    case 20:
                    case 21:
                    case 22:
                    case 23:
                    case 24:
                    case 25:
                    case 26:
                    case 27:
                    case 28:
                    case 29:
                    case 30:
                    case 31:
                    case 32:
                    case 33:
                    case 34:
                    case 35:
                    case 36:
                    case 37:
                    case 38:
                    case 39:
                    case 40:
                    case 41:
                    case 42:
                    case 43:
                    case 44:
                        break;
                    }
                return null;
            };

            /**
             * Creates a RawSubscribeCmd message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof Buttplug.DeviceMessage.RawSubscribeCmd
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {Buttplug.DeviceMessage.RawSubscribeCmd} RawSubscribeCmd
             */
            RawSubscribeCmd.fromObject = function fromObject(object) {
                if (object instanceof $root.Buttplug.DeviceMessage.RawSubscribeCmd)
                    return object;
                var message = new $root.Buttplug.DeviceMessage.RawSubscribeCmd();
                switch (object.endpoint) {
                case "Command":
                case 0:
                    message.endpoint = 0;
                    break;
                case "Firmware":
                case 1:
                    message.endpoint = 1;
                    break;
                case "Rx":
                case 2:
                    message.endpoint = 2;
                    break;
                case "RxAccel":
                case 3:
                    message.endpoint = 3;
                    break;
                case "RxBLEBattery":
                case 4:
                    message.endpoint = 4;
                    break;
                case "RxPressure":
                case 5:
                    message.endpoint = 5;
                    break;
                case "RxTouch":
                case 6:
                    message.endpoint = 6;
                    break;
                case "Tx":
                case 7:
                    message.endpoint = 7;
                    break;
                case "TxMode":
                case 8:
                    message.endpoint = 8;
                    break;
                case "TxShock":
                case 9:
                    message.endpoint = 9;
                    break;
                case "TxVibrate":
                case 10:
                    message.endpoint = 10;
                    break;
                case "TxVendorControl":
                case 11:
                    message.endpoint = 11;
                    break;
                case "Whitelist":
                case 12:
                    message.endpoint = 12;
                    break;
                case "Generic0":
                case 13:
                    message.endpoint = 13;
                    break;
                case "Generic1":
                case 14:
                    message.endpoint = 14;
                    break;
                case "Generic2":
                case 15:
                    message.endpoint = 15;
                    break;
                case "Generic3":
                case 16:
                    message.endpoint = 16;
                    break;
                case "Generic4":
                case 17:
                    message.endpoint = 17;
                    break;
                case "Generic5":
                case 18:
                    message.endpoint = 18;
                    break;
                case "Generic6":
                case 19:
                    message.endpoint = 19;
                    break;
                case "Generic7":
                case 20:
                    message.endpoint = 20;
                    break;
                case "Generic8":
                case 21:
                    message.endpoint = 21;
                    break;
                case "Generic9":
                case 22:
                    message.endpoint = 22;
                    break;
                case "Generic10":
                case 23:
                    message.endpoint = 23;
                    break;
                case "Generic11":
                case 24:
                    message.endpoint = 24;
                    break;
                case "Generic12":
                case 25:
                    message.endpoint = 25;
                    break;
                case "Generic13":
                case 26:
                    message.endpoint = 26;
                    break;
                case "Generic14":
                case 27:
                    message.endpoint = 27;
                    break;
                case "Generic15":
                case 28:
                    message.endpoint = 28;
                    break;
                case "Generic16":
                case 29:
                    message.endpoint = 29;
                    break;
                case "Generic17":
                case 30:
                    message.endpoint = 30;
                    break;
                case "Generic18":
                case 31:
                    message.endpoint = 31;
                    break;
                case "Generic19":
                case 32:
                    message.endpoint = 32;
                    break;
                case "Generic20":
                case 33:
                    message.endpoint = 33;
                    break;
                case "Generic21":
                case 34:
                    message.endpoint = 34;
                    break;
                case "Generic22":
                case 35:
                    message.endpoint = 35;
                    break;
                case "Generic23":
                case 36:
                    message.endpoint = 36;
                    break;
                case "Generic24":
                case 37:
                    message.endpoint = 37;
                    break;
                case "Generic25":
                case 38:
                    message.endpoint = 38;
                    break;
                case "Generic26":
                case 39:
                    message.endpoint = 39;
                    break;
                case "Generic27":
                case 40:
                    message.endpoint = 40;
                    break;
                case "Generic28":
                case 41:
                    message.endpoint = 41;
                    break;
                case "Generic29":
                case 42:
                    message.endpoint = 42;
                    break;
                case "Generic30":
                case 43:
                    message.endpoint = 43;
                    break;
                case "Generic31":
                case 44:
                    message.endpoint = 44;
                    break;
                }
                return message;
            };

            /**
             * Creates a plain object from a RawSubscribeCmd message. Also converts values to other types if specified.
             * @function toObject
             * @memberof Buttplug.DeviceMessage.RawSubscribeCmd
             * @static
             * @param {Buttplug.DeviceMessage.RawSubscribeCmd} message RawSubscribeCmd
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            RawSubscribeCmd.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.endpoint = options.enums === String ? "Command" : 0;
                if (message.endpoint != null && message.hasOwnProperty("endpoint"))
                    object.endpoint = options.enums === String ? $root.Buttplug.Endpoint[message.endpoint] : message.endpoint;
                return object;
            };

            /**
             * Converts this RawSubscribeCmd to JSON.
             * @function toJSON
             * @memberof Buttplug.DeviceMessage.RawSubscribeCmd
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            RawSubscribeCmd.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return RawSubscribeCmd;
        })();

        DeviceMessage.RawUnsubscribeCmd = (function() {

            /**
             * Properties of a RawUnsubscribeCmd.
             * @memberof Buttplug.DeviceMessage
             * @interface IRawUnsubscribeCmd
             * @property {Buttplug.Endpoint|null} [endpoint] RawUnsubscribeCmd endpoint
             */

            /**
             * Constructs a new RawUnsubscribeCmd.
             * @memberof Buttplug.DeviceMessage
             * @classdesc Represents a RawUnsubscribeCmd.
             * @implements IRawUnsubscribeCmd
             * @constructor
             * @param {Buttplug.DeviceMessage.IRawUnsubscribeCmd=} [properties] Properties to set
             */
            function RawUnsubscribeCmd(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * RawUnsubscribeCmd endpoint.
             * @member {Buttplug.Endpoint} endpoint
             * @memberof Buttplug.DeviceMessage.RawUnsubscribeCmd
             * @instance
             */
            RawUnsubscribeCmd.prototype.endpoint = 0;

            /**
             * Creates a new RawUnsubscribeCmd instance using the specified properties.
             * @function create
             * @memberof Buttplug.DeviceMessage.RawUnsubscribeCmd
             * @static
             * @param {Buttplug.DeviceMessage.IRawUnsubscribeCmd=} [properties] Properties to set
             * @returns {Buttplug.DeviceMessage.RawUnsubscribeCmd} RawUnsubscribeCmd instance
             */
            RawUnsubscribeCmd.create = function create(properties) {
                return new RawUnsubscribeCmd(properties);
            };

            /**
             * Encodes the specified RawUnsubscribeCmd message. Does not implicitly {@link Buttplug.DeviceMessage.RawUnsubscribeCmd.verify|verify} messages.
             * @function encode
             * @memberof Buttplug.DeviceMessage.RawUnsubscribeCmd
             * @static
             * @param {Buttplug.DeviceMessage.IRawUnsubscribeCmd} message RawUnsubscribeCmd message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RawUnsubscribeCmd.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.endpoint != null && Object.hasOwnProperty.call(message, "endpoint"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.endpoint);
                return writer;
            };

            /**
             * Encodes the specified RawUnsubscribeCmd message, length delimited. Does not implicitly {@link Buttplug.DeviceMessage.RawUnsubscribeCmd.verify|verify} messages.
             * @function encodeDelimited
             * @memberof Buttplug.DeviceMessage.RawUnsubscribeCmd
             * @static
             * @param {Buttplug.DeviceMessage.IRawUnsubscribeCmd} message RawUnsubscribeCmd message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RawUnsubscribeCmd.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a RawUnsubscribeCmd message from the specified reader or buffer.
             * @function decode
             * @memberof Buttplug.DeviceMessage.RawUnsubscribeCmd
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {Buttplug.DeviceMessage.RawUnsubscribeCmd} RawUnsubscribeCmd
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RawUnsubscribeCmd.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Buttplug.DeviceMessage.RawUnsubscribeCmd();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.endpoint = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a RawUnsubscribeCmd message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof Buttplug.DeviceMessage.RawUnsubscribeCmd
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {Buttplug.DeviceMessage.RawUnsubscribeCmd} RawUnsubscribeCmd
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RawUnsubscribeCmd.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a RawUnsubscribeCmd message.
             * @function verify
             * @memberof Buttplug.DeviceMessage.RawUnsubscribeCmd
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            RawUnsubscribeCmd.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.endpoint != null && message.hasOwnProperty("endpoint"))
                    switch (message.endpoint) {
                    default:
                        return "endpoint: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                    case 6:
                    case 7:
                    case 8:
                    case 9:
                    case 10:
                    case 11:
                    case 12:
                    case 13:
                    case 14:
                    case 15:
                    case 16:
                    case 17:
                    case 18:
                    case 19:
                    case 20:
                    case 21:
                    case 22:
                    case 23:
                    case 24:
                    case 25:
                    case 26:
                    case 27:
                    case 28:
                    case 29:
                    case 30:
                    case 31:
                    case 32:
                    case 33:
                    case 34:
                    case 35:
                    case 36:
                    case 37:
                    case 38:
                    case 39:
                    case 40:
                    case 41:
                    case 42:
                    case 43:
                    case 44:
                        break;
                    }
                return null;
            };

            /**
             * Creates a RawUnsubscribeCmd message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof Buttplug.DeviceMessage.RawUnsubscribeCmd
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {Buttplug.DeviceMessage.RawUnsubscribeCmd} RawUnsubscribeCmd
             */
            RawUnsubscribeCmd.fromObject = function fromObject(object) {
                if (object instanceof $root.Buttplug.DeviceMessage.RawUnsubscribeCmd)
                    return object;
                var message = new $root.Buttplug.DeviceMessage.RawUnsubscribeCmd();
                switch (object.endpoint) {
                case "Command":
                case 0:
                    message.endpoint = 0;
                    break;
                case "Firmware":
                case 1:
                    message.endpoint = 1;
                    break;
                case "Rx":
                case 2:
                    message.endpoint = 2;
                    break;
                case "RxAccel":
                case 3:
                    message.endpoint = 3;
                    break;
                case "RxBLEBattery":
                case 4:
                    message.endpoint = 4;
                    break;
                case "RxPressure":
                case 5:
                    message.endpoint = 5;
                    break;
                case "RxTouch":
                case 6:
                    message.endpoint = 6;
                    break;
                case "Tx":
                case 7:
                    message.endpoint = 7;
                    break;
                case "TxMode":
                case 8:
                    message.endpoint = 8;
                    break;
                case "TxShock":
                case 9:
                    message.endpoint = 9;
                    break;
                case "TxVibrate":
                case 10:
                    message.endpoint = 10;
                    break;
                case "TxVendorControl":
                case 11:
                    message.endpoint = 11;
                    break;
                case "Whitelist":
                case 12:
                    message.endpoint = 12;
                    break;
                case "Generic0":
                case 13:
                    message.endpoint = 13;
                    break;
                case "Generic1":
                case 14:
                    message.endpoint = 14;
                    break;
                case "Generic2":
                case 15:
                    message.endpoint = 15;
                    break;
                case "Generic3":
                case 16:
                    message.endpoint = 16;
                    break;
                case "Generic4":
                case 17:
                    message.endpoint = 17;
                    break;
                case "Generic5":
                case 18:
                    message.endpoint = 18;
                    break;
                case "Generic6":
                case 19:
                    message.endpoint = 19;
                    break;
                case "Generic7":
                case 20:
                    message.endpoint = 20;
                    break;
                case "Generic8":
                case 21:
                    message.endpoint = 21;
                    break;
                case "Generic9":
                case 22:
                    message.endpoint = 22;
                    break;
                case "Generic10":
                case 23:
                    message.endpoint = 23;
                    break;
                case "Generic11":
                case 24:
                    message.endpoint = 24;
                    break;
                case "Generic12":
                case 25:
                    message.endpoint = 25;
                    break;
                case "Generic13":
                case 26:
                    message.endpoint = 26;
                    break;
                case "Generic14":
                case 27:
                    message.endpoint = 27;
                    break;
                case "Generic15":
                case 28:
                    message.endpoint = 28;
                    break;
                case "Generic16":
                case 29:
                    message.endpoint = 29;
                    break;
                case "Generic17":
                case 30:
                    message.endpoint = 30;
                    break;
                case "Generic18":
                case 31:
                    message.endpoint = 31;
                    break;
                case "Generic19":
                case 32:
                    message.endpoint = 32;
                    break;
                case "Generic20":
                case 33:
                    message.endpoint = 33;
                    break;
                case "Generic21":
                case 34:
                    message.endpoint = 34;
                    break;
                case "Generic22":
                case 35:
                    message.endpoint = 35;
                    break;
                case "Generic23":
                case 36:
                    message.endpoint = 36;
                    break;
                case "Generic24":
                case 37:
                    message.endpoint = 37;
                    break;
                case "Generic25":
                case 38:
                    message.endpoint = 38;
                    break;
                case "Generic26":
                case 39:
                    message.endpoint = 39;
                    break;
                case "Generic27":
                case 40:
                    message.endpoint = 40;
                    break;
                case "Generic28":
                case 41:
                    message.endpoint = 41;
                    break;
                case "Generic29":
                case 42:
                    message.endpoint = 42;
                    break;
                case "Generic30":
                case 43:
                    message.endpoint = 43;
                    break;
                case "Generic31":
                case 44:
                    message.endpoint = 44;
                    break;
                }
                return message;
            };

            /**
             * Creates a plain object from a RawUnsubscribeCmd message. Also converts values to other types if specified.
             * @function toObject
             * @memberof Buttplug.DeviceMessage.RawUnsubscribeCmd
             * @static
             * @param {Buttplug.DeviceMessage.RawUnsubscribeCmd} message RawUnsubscribeCmd
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            RawUnsubscribeCmd.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.endpoint = options.enums === String ? "Command" : 0;
                if (message.endpoint != null && message.hasOwnProperty("endpoint"))
                    object.endpoint = options.enums === String ? $root.Buttplug.Endpoint[message.endpoint] : message.endpoint;
                return object;
            };

            /**
             * Converts this RawUnsubscribeCmd to JSON.
             * @function toJSON
             * @memberof Buttplug.DeviceMessage.RawUnsubscribeCmd
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            RawUnsubscribeCmd.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return RawUnsubscribeCmd;
        })();

        DeviceMessage.BatteryLevelCmd = (function() {

            /**
             * Properties of a BatteryLevelCmd.
             * @memberof Buttplug.DeviceMessage
             * @interface IBatteryLevelCmd
             */

            /**
             * Constructs a new BatteryLevelCmd.
             * @memberof Buttplug.DeviceMessage
             * @classdesc Represents a BatteryLevelCmd.
             * @implements IBatteryLevelCmd
             * @constructor
             * @param {Buttplug.DeviceMessage.IBatteryLevelCmd=} [properties] Properties to set
             */
            function BatteryLevelCmd(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Creates a new BatteryLevelCmd instance using the specified properties.
             * @function create
             * @memberof Buttplug.DeviceMessage.BatteryLevelCmd
             * @static
             * @param {Buttplug.DeviceMessage.IBatteryLevelCmd=} [properties] Properties to set
             * @returns {Buttplug.DeviceMessage.BatteryLevelCmd} BatteryLevelCmd instance
             */
            BatteryLevelCmd.create = function create(properties) {
                return new BatteryLevelCmd(properties);
            };

            /**
             * Encodes the specified BatteryLevelCmd message. Does not implicitly {@link Buttplug.DeviceMessage.BatteryLevelCmd.verify|verify} messages.
             * @function encode
             * @memberof Buttplug.DeviceMessage.BatteryLevelCmd
             * @static
             * @param {Buttplug.DeviceMessage.IBatteryLevelCmd} message BatteryLevelCmd message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BatteryLevelCmd.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                return writer;
            };

            /**
             * Encodes the specified BatteryLevelCmd message, length delimited. Does not implicitly {@link Buttplug.DeviceMessage.BatteryLevelCmd.verify|verify} messages.
             * @function encodeDelimited
             * @memberof Buttplug.DeviceMessage.BatteryLevelCmd
             * @static
             * @param {Buttplug.DeviceMessage.IBatteryLevelCmd} message BatteryLevelCmd message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BatteryLevelCmd.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a BatteryLevelCmd message from the specified reader or buffer.
             * @function decode
             * @memberof Buttplug.DeviceMessage.BatteryLevelCmd
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {Buttplug.DeviceMessage.BatteryLevelCmd} BatteryLevelCmd
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BatteryLevelCmd.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Buttplug.DeviceMessage.BatteryLevelCmd();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a BatteryLevelCmd message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof Buttplug.DeviceMessage.BatteryLevelCmd
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {Buttplug.DeviceMessage.BatteryLevelCmd} BatteryLevelCmd
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BatteryLevelCmd.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a BatteryLevelCmd message.
             * @function verify
             * @memberof Buttplug.DeviceMessage.BatteryLevelCmd
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            BatteryLevelCmd.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                return null;
            };

            /**
             * Creates a BatteryLevelCmd message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof Buttplug.DeviceMessage.BatteryLevelCmd
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {Buttplug.DeviceMessage.BatteryLevelCmd} BatteryLevelCmd
             */
            BatteryLevelCmd.fromObject = function fromObject(object) {
                if (object instanceof $root.Buttplug.DeviceMessage.BatteryLevelCmd)
                    return object;
                return new $root.Buttplug.DeviceMessage.BatteryLevelCmd();
            };

            /**
             * Creates a plain object from a BatteryLevelCmd message. Also converts values to other types if specified.
             * @function toObject
             * @memberof Buttplug.DeviceMessage.BatteryLevelCmd
             * @static
             * @param {Buttplug.DeviceMessage.BatteryLevelCmd} message BatteryLevelCmd
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            BatteryLevelCmd.toObject = function toObject() {
                return {};
            };

            /**
             * Converts this BatteryLevelCmd to JSON.
             * @function toJSON
             * @memberof Buttplug.DeviceMessage.BatteryLevelCmd
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            BatteryLevelCmd.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return BatteryLevelCmd;
        })();

        DeviceMessage.RSSILevelCmd = (function() {

            /**
             * Properties of a RSSILevelCmd.
             * @memberof Buttplug.DeviceMessage
             * @interface IRSSILevelCmd
             */

            /**
             * Constructs a new RSSILevelCmd.
             * @memberof Buttplug.DeviceMessage
             * @classdesc Represents a RSSILevelCmd.
             * @implements IRSSILevelCmd
             * @constructor
             * @param {Buttplug.DeviceMessage.IRSSILevelCmd=} [properties] Properties to set
             */
            function RSSILevelCmd(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Creates a new RSSILevelCmd instance using the specified properties.
             * @function create
             * @memberof Buttplug.DeviceMessage.RSSILevelCmd
             * @static
             * @param {Buttplug.DeviceMessage.IRSSILevelCmd=} [properties] Properties to set
             * @returns {Buttplug.DeviceMessage.RSSILevelCmd} RSSILevelCmd instance
             */
            RSSILevelCmd.create = function create(properties) {
                return new RSSILevelCmd(properties);
            };

            /**
             * Encodes the specified RSSILevelCmd message. Does not implicitly {@link Buttplug.DeviceMessage.RSSILevelCmd.verify|verify} messages.
             * @function encode
             * @memberof Buttplug.DeviceMessage.RSSILevelCmd
             * @static
             * @param {Buttplug.DeviceMessage.IRSSILevelCmd} message RSSILevelCmd message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RSSILevelCmd.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                return writer;
            };

            /**
             * Encodes the specified RSSILevelCmd message, length delimited. Does not implicitly {@link Buttplug.DeviceMessage.RSSILevelCmd.verify|verify} messages.
             * @function encodeDelimited
             * @memberof Buttplug.DeviceMessage.RSSILevelCmd
             * @static
             * @param {Buttplug.DeviceMessage.IRSSILevelCmd} message RSSILevelCmd message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RSSILevelCmd.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a RSSILevelCmd message from the specified reader or buffer.
             * @function decode
             * @memberof Buttplug.DeviceMessage.RSSILevelCmd
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {Buttplug.DeviceMessage.RSSILevelCmd} RSSILevelCmd
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RSSILevelCmd.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Buttplug.DeviceMessage.RSSILevelCmd();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a RSSILevelCmd message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof Buttplug.DeviceMessage.RSSILevelCmd
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {Buttplug.DeviceMessage.RSSILevelCmd} RSSILevelCmd
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RSSILevelCmd.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a RSSILevelCmd message.
             * @function verify
             * @memberof Buttplug.DeviceMessage.RSSILevelCmd
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            RSSILevelCmd.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                return null;
            };

            /**
             * Creates a RSSILevelCmd message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof Buttplug.DeviceMessage.RSSILevelCmd
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {Buttplug.DeviceMessage.RSSILevelCmd} RSSILevelCmd
             */
            RSSILevelCmd.fromObject = function fromObject(object) {
                if (object instanceof $root.Buttplug.DeviceMessage.RSSILevelCmd)
                    return object;
                return new $root.Buttplug.DeviceMessage.RSSILevelCmd();
            };

            /**
             * Creates a plain object from a RSSILevelCmd message. Also converts values to other types if specified.
             * @function toObject
             * @memberof Buttplug.DeviceMessage.RSSILevelCmd
             * @static
             * @param {Buttplug.DeviceMessage.RSSILevelCmd} message RSSILevelCmd
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            RSSILevelCmd.toObject = function toObject() {
                return {};
            };

            /**
             * Converts this RSSILevelCmd to JSON.
             * @function toJSON
             * @memberof Buttplug.DeviceMessage.RSSILevelCmd
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            RSSILevelCmd.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return RSSILevelCmd;
        })();

        DeviceMessage.FFIMessage = (function() {

            /**
             * Properties of a FFIMessage.
             * @memberof Buttplug.DeviceMessage
             * @interface IFFIMessage
             * @property {Buttplug.DeviceMessage.IVibrateCmd|null} [vibrateCmd] FFIMessage vibrateCmd
             * @property {Buttplug.DeviceMessage.IRotateCmd|null} [rotateCmd] FFIMessage rotateCmd
             * @property {Buttplug.DeviceMessage.ILinearCmd|null} [linearCmd] FFIMessage linearCmd
             * @property {Buttplug.DeviceMessage.IStopDeviceCmd|null} [stopDeviceCmd] FFIMessage stopDeviceCmd
             * @property {Buttplug.DeviceMessage.IRawReadCmd|null} [rawReadCmd] FFIMessage rawReadCmd
             * @property {Buttplug.DeviceMessage.IRawWriteCmd|null} [rawWriteCmd] FFIMessage rawWriteCmd
             * @property {Buttplug.DeviceMessage.IRawSubscribeCmd|null} [rawSubscribeCmd] FFIMessage rawSubscribeCmd
             * @property {Buttplug.DeviceMessage.IRawUnsubscribeCmd|null} [rawUnsubscribeCmd] FFIMessage rawUnsubscribeCmd
             * @property {Buttplug.DeviceMessage.IBatteryLevelCmd|null} [batteryLevelCmd] FFIMessage batteryLevelCmd
             * @property {Buttplug.DeviceMessage.IRSSILevelCmd|null} [rssiLevelCmd] FFIMessage rssiLevelCmd
             */

            /**
             * Constructs a new FFIMessage.
             * @memberof Buttplug.DeviceMessage
             * @classdesc Represents a FFIMessage.
             * @implements IFFIMessage
             * @constructor
             * @param {Buttplug.DeviceMessage.IFFIMessage=} [properties] Properties to set
             */
            function FFIMessage(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * FFIMessage vibrateCmd.
             * @member {Buttplug.DeviceMessage.IVibrateCmd|null|undefined} vibrateCmd
             * @memberof Buttplug.DeviceMessage.FFIMessage
             * @instance
             */
            FFIMessage.prototype.vibrateCmd = null;

            /**
             * FFIMessage rotateCmd.
             * @member {Buttplug.DeviceMessage.IRotateCmd|null|undefined} rotateCmd
             * @memberof Buttplug.DeviceMessage.FFIMessage
             * @instance
             */
            FFIMessage.prototype.rotateCmd = null;

            /**
             * FFIMessage linearCmd.
             * @member {Buttplug.DeviceMessage.ILinearCmd|null|undefined} linearCmd
             * @memberof Buttplug.DeviceMessage.FFIMessage
             * @instance
             */
            FFIMessage.prototype.linearCmd = null;

            /**
             * FFIMessage stopDeviceCmd.
             * @member {Buttplug.DeviceMessage.IStopDeviceCmd|null|undefined} stopDeviceCmd
             * @memberof Buttplug.DeviceMessage.FFIMessage
             * @instance
             */
            FFIMessage.prototype.stopDeviceCmd = null;

            /**
             * FFIMessage rawReadCmd.
             * @member {Buttplug.DeviceMessage.IRawReadCmd|null|undefined} rawReadCmd
             * @memberof Buttplug.DeviceMessage.FFIMessage
             * @instance
             */
            FFIMessage.prototype.rawReadCmd = null;

            /**
             * FFIMessage rawWriteCmd.
             * @member {Buttplug.DeviceMessage.IRawWriteCmd|null|undefined} rawWriteCmd
             * @memberof Buttplug.DeviceMessage.FFIMessage
             * @instance
             */
            FFIMessage.prototype.rawWriteCmd = null;

            /**
             * FFIMessage rawSubscribeCmd.
             * @member {Buttplug.DeviceMessage.IRawSubscribeCmd|null|undefined} rawSubscribeCmd
             * @memberof Buttplug.DeviceMessage.FFIMessage
             * @instance
             */
            FFIMessage.prototype.rawSubscribeCmd = null;

            /**
             * FFIMessage rawUnsubscribeCmd.
             * @member {Buttplug.DeviceMessage.IRawUnsubscribeCmd|null|undefined} rawUnsubscribeCmd
             * @memberof Buttplug.DeviceMessage.FFIMessage
             * @instance
             */
            FFIMessage.prototype.rawUnsubscribeCmd = null;

            /**
             * FFIMessage batteryLevelCmd.
             * @member {Buttplug.DeviceMessage.IBatteryLevelCmd|null|undefined} batteryLevelCmd
             * @memberof Buttplug.DeviceMessage.FFIMessage
             * @instance
             */
            FFIMessage.prototype.batteryLevelCmd = null;

            /**
             * FFIMessage rssiLevelCmd.
             * @member {Buttplug.DeviceMessage.IRSSILevelCmd|null|undefined} rssiLevelCmd
             * @memberof Buttplug.DeviceMessage.FFIMessage
             * @instance
             */
            FFIMessage.prototype.rssiLevelCmd = null;

            // OneOf field names bound to virtual getters and setters
            var $oneOfFields;

            /**
             * FFIMessage msg.
             * @member {"vibrateCmd"|"rotateCmd"|"linearCmd"|"stopDeviceCmd"|"rawReadCmd"|"rawWriteCmd"|"rawSubscribeCmd"|"rawUnsubscribeCmd"|"batteryLevelCmd"|"rssiLevelCmd"|undefined} msg
             * @memberof Buttplug.DeviceMessage.FFIMessage
             * @instance
             */
            Object.defineProperty(FFIMessage.prototype, "msg", {
                get: $util.oneOfGetter($oneOfFields = ["vibrateCmd", "rotateCmd", "linearCmd", "stopDeviceCmd", "rawReadCmd", "rawWriteCmd", "rawSubscribeCmd", "rawUnsubscribeCmd", "batteryLevelCmd", "rssiLevelCmd"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            /**
             * Creates a new FFIMessage instance using the specified properties.
             * @function create
             * @memberof Buttplug.DeviceMessage.FFIMessage
             * @static
             * @param {Buttplug.DeviceMessage.IFFIMessage=} [properties] Properties to set
             * @returns {Buttplug.DeviceMessage.FFIMessage} FFIMessage instance
             */
            FFIMessage.create = function create(properties) {
                return new FFIMessage(properties);
            };

            /**
             * Encodes the specified FFIMessage message. Does not implicitly {@link Buttplug.DeviceMessage.FFIMessage.verify|verify} messages.
             * @function encode
             * @memberof Buttplug.DeviceMessage.FFIMessage
             * @static
             * @param {Buttplug.DeviceMessage.IFFIMessage} message FFIMessage message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FFIMessage.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.vibrateCmd != null && Object.hasOwnProperty.call(message, "vibrateCmd"))
                    $root.Buttplug.DeviceMessage.VibrateCmd.encode(message.vibrateCmd, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.rotateCmd != null && Object.hasOwnProperty.call(message, "rotateCmd"))
                    $root.Buttplug.DeviceMessage.RotateCmd.encode(message.rotateCmd, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.linearCmd != null && Object.hasOwnProperty.call(message, "linearCmd"))
                    $root.Buttplug.DeviceMessage.LinearCmd.encode(message.linearCmd, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                if (message.stopDeviceCmd != null && Object.hasOwnProperty.call(message, "stopDeviceCmd"))
                    $root.Buttplug.DeviceMessage.StopDeviceCmd.encode(message.stopDeviceCmd, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                if (message.rawReadCmd != null && Object.hasOwnProperty.call(message, "rawReadCmd"))
                    $root.Buttplug.DeviceMessage.RawReadCmd.encode(message.rawReadCmd, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                if (message.rawWriteCmd != null && Object.hasOwnProperty.call(message, "rawWriteCmd"))
                    $root.Buttplug.DeviceMessage.RawWriteCmd.encode(message.rawWriteCmd, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                if (message.rawSubscribeCmd != null && Object.hasOwnProperty.call(message, "rawSubscribeCmd"))
                    $root.Buttplug.DeviceMessage.RawSubscribeCmd.encode(message.rawSubscribeCmd, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                if (message.rawUnsubscribeCmd != null && Object.hasOwnProperty.call(message, "rawUnsubscribeCmd"))
                    $root.Buttplug.DeviceMessage.RawUnsubscribeCmd.encode(message.rawUnsubscribeCmd, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                if (message.batteryLevelCmd != null && Object.hasOwnProperty.call(message, "batteryLevelCmd"))
                    $root.Buttplug.DeviceMessage.BatteryLevelCmd.encode(message.batteryLevelCmd, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
                if (message.rssiLevelCmd != null && Object.hasOwnProperty.call(message, "rssiLevelCmd"))
                    $root.Buttplug.DeviceMessage.RSSILevelCmd.encode(message.rssiLevelCmd, writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified FFIMessage message, length delimited. Does not implicitly {@link Buttplug.DeviceMessage.FFIMessage.verify|verify} messages.
             * @function encodeDelimited
             * @memberof Buttplug.DeviceMessage.FFIMessage
             * @static
             * @param {Buttplug.DeviceMessage.IFFIMessage} message FFIMessage message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FFIMessage.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a FFIMessage message from the specified reader or buffer.
             * @function decode
             * @memberof Buttplug.DeviceMessage.FFIMessage
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {Buttplug.DeviceMessage.FFIMessage} FFIMessage
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FFIMessage.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Buttplug.DeviceMessage.FFIMessage();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.vibrateCmd = $root.Buttplug.DeviceMessage.VibrateCmd.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.rotateCmd = $root.Buttplug.DeviceMessage.RotateCmd.decode(reader, reader.uint32());
                        break;
                    case 3:
                        message.linearCmd = $root.Buttplug.DeviceMessage.LinearCmd.decode(reader, reader.uint32());
                        break;
                    case 4:
                        message.stopDeviceCmd = $root.Buttplug.DeviceMessage.StopDeviceCmd.decode(reader, reader.uint32());
                        break;
                    case 5:
                        message.rawReadCmd = $root.Buttplug.DeviceMessage.RawReadCmd.decode(reader, reader.uint32());
                        break;
                    case 6:
                        message.rawWriteCmd = $root.Buttplug.DeviceMessage.RawWriteCmd.decode(reader, reader.uint32());
                        break;
                    case 7:
                        message.rawSubscribeCmd = $root.Buttplug.DeviceMessage.RawSubscribeCmd.decode(reader, reader.uint32());
                        break;
                    case 8:
                        message.rawUnsubscribeCmd = $root.Buttplug.DeviceMessage.RawUnsubscribeCmd.decode(reader, reader.uint32());
                        break;
                    case 9:
                        message.batteryLevelCmd = $root.Buttplug.DeviceMessage.BatteryLevelCmd.decode(reader, reader.uint32());
                        break;
                    case 10:
                        message.rssiLevelCmd = $root.Buttplug.DeviceMessage.RSSILevelCmd.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a FFIMessage message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof Buttplug.DeviceMessage.FFIMessage
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {Buttplug.DeviceMessage.FFIMessage} FFIMessage
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FFIMessage.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a FFIMessage message.
             * @function verify
             * @memberof Buttplug.DeviceMessage.FFIMessage
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            FFIMessage.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                var properties = {};
                if (message.vibrateCmd != null && message.hasOwnProperty("vibrateCmd")) {
                    properties.msg = 1;
                    {
                        var error = $root.Buttplug.DeviceMessage.VibrateCmd.verify(message.vibrateCmd);
                        if (error)
                            return "vibrateCmd." + error;
                    }
                }
                if (message.rotateCmd != null && message.hasOwnProperty("rotateCmd")) {
                    if (properties.msg === 1)
                        return "msg: multiple values";
                    properties.msg = 1;
                    {
                        var error = $root.Buttplug.DeviceMessage.RotateCmd.verify(message.rotateCmd);
                        if (error)
                            return "rotateCmd." + error;
                    }
                }
                if (message.linearCmd != null && message.hasOwnProperty("linearCmd")) {
                    if (properties.msg === 1)
                        return "msg: multiple values";
                    properties.msg = 1;
                    {
                        var error = $root.Buttplug.DeviceMessage.LinearCmd.verify(message.linearCmd);
                        if (error)
                            return "linearCmd." + error;
                    }
                }
                if (message.stopDeviceCmd != null && message.hasOwnProperty("stopDeviceCmd")) {
                    if (properties.msg === 1)
                        return "msg: multiple values";
                    properties.msg = 1;
                    {
                        var error = $root.Buttplug.DeviceMessage.StopDeviceCmd.verify(message.stopDeviceCmd);
                        if (error)
                            return "stopDeviceCmd." + error;
                    }
                }
                if (message.rawReadCmd != null && message.hasOwnProperty("rawReadCmd")) {
                    if (properties.msg === 1)
                        return "msg: multiple values";
                    properties.msg = 1;
                    {
                        var error = $root.Buttplug.DeviceMessage.RawReadCmd.verify(message.rawReadCmd);
                        if (error)
                            return "rawReadCmd." + error;
                    }
                }
                if (message.rawWriteCmd != null && message.hasOwnProperty("rawWriteCmd")) {
                    if (properties.msg === 1)
                        return "msg: multiple values";
                    properties.msg = 1;
                    {
                        var error = $root.Buttplug.DeviceMessage.RawWriteCmd.verify(message.rawWriteCmd);
                        if (error)
                            return "rawWriteCmd." + error;
                    }
                }
                if (message.rawSubscribeCmd != null && message.hasOwnProperty("rawSubscribeCmd")) {
                    if (properties.msg === 1)
                        return "msg: multiple values";
                    properties.msg = 1;
                    {
                        var error = $root.Buttplug.DeviceMessage.RawSubscribeCmd.verify(message.rawSubscribeCmd);
                        if (error)
                            return "rawSubscribeCmd." + error;
                    }
                }
                if (message.rawUnsubscribeCmd != null && message.hasOwnProperty("rawUnsubscribeCmd")) {
                    if (properties.msg === 1)
                        return "msg: multiple values";
                    properties.msg = 1;
                    {
                        var error = $root.Buttplug.DeviceMessage.RawUnsubscribeCmd.verify(message.rawUnsubscribeCmd);
                        if (error)
                            return "rawUnsubscribeCmd." + error;
                    }
                }
                if (message.batteryLevelCmd != null && message.hasOwnProperty("batteryLevelCmd")) {
                    if (properties.msg === 1)
                        return "msg: multiple values";
                    properties.msg = 1;
                    {
                        var error = $root.Buttplug.DeviceMessage.BatteryLevelCmd.verify(message.batteryLevelCmd);
                        if (error)
                            return "batteryLevelCmd." + error;
                    }
                }
                if (message.rssiLevelCmd != null && message.hasOwnProperty("rssiLevelCmd")) {
                    if (properties.msg === 1)
                        return "msg: multiple values";
                    properties.msg = 1;
                    {
                        var error = $root.Buttplug.DeviceMessage.RSSILevelCmd.verify(message.rssiLevelCmd);
                        if (error)
                            return "rssiLevelCmd." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a FFIMessage message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof Buttplug.DeviceMessage.FFIMessage
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {Buttplug.DeviceMessage.FFIMessage} FFIMessage
             */
            FFIMessage.fromObject = function fromObject(object) {
                if (object instanceof $root.Buttplug.DeviceMessage.FFIMessage)
                    return object;
                var message = new $root.Buttplug.DeviceMessage.FFIMessage();
                if (object.vibrateCmd != null) {
                    if (typeof object.vibrateCmd !== "object")
                        throw TypeError(".Buttplug.DeviceMessage.FFIMessage.vibrateCmd: object expected");
                    message.vibrateCmd = $root.Buttplug.DeviceMessage.VibrateCmd.fromObject(object.vibrateCmd);
                }
                if (object.rotateCmd != null) {
                    if (typeof object.rotateCmd !== "object")
                        throw TypeError(".Buttplug.DeviceMessage.FFIMessage.rotateCmd: object expected");
                    message.rotateCmd = $root.Buttplug.DeviceMessage.RotateCmd.fromObject(object.rotateCmd);
                }
                if (object.linearCmd != null) {
                    if (typeof object.linearCmd !== "object")
                        throw TypeError(".Buttplug.DeviceMessage.FFIMessage.linearCmd: object expected");
                    message.linearCmd = $root.Buttplug.DeviceMessage.LinearCmd.fromObject(object.linearCmd);
                }
                if (object.stopDeviceCmd != null) {
                    if (typeof object.stopDeviceCmd !== "object")
                        throw TypeError(".Buttplug.DeviceMessage.FFIMessage.stopDeviceCmd: object expected");
                    message.stopDeviceCmd = $root.Buttplug.DeviceMessage.StopDeviceCmd.fromObject(object.stopDeviceCmd);
                }
                if (object.rawReadCmd != null) {
                    if (typeof object.rawReadCmd !== "object")
                        throw TypeError(".Buttplug.DeviceMessage.FFIMessage.rawReadCmd: object expected");
                    message.rawReadCmd = $root.Buttplug.DeviceMessage.RawReadCmd.fromObject(object.rawReadCmd);
                }
                if (object.rawWriteCmd != null) {
                    if (typeof object.rawWriteCmd !== "object")
                        throw TypeError(".Buttplug.DeviceMessage.FFIMessage.rawWriteCmd: object expected");
                    message.rawWriteCmd = $root.Buttplug.DeviceMessage.RawWriteCmd.fromObject(object.rawWriteCmd);
                }
                if (object.rawSubscribeCmd != null) {
                    if (typeof object.rawSubscribeCmd !== "object")
                        throw TypeError(".Buttplug.DeviceMessage.FFIMessage.rawSubscribeCmd: object expected");
                    message.rawSubscribeCmd = $root.Buttplug.DeviceMessage.RawSubscribeCmd.fromObject(object.rawSubscribeCmd);
                }
                if (object.rawUnsubscribeCmd != null) {
                    if (typeof object.rawUnsubscribeCmd !== "object")
                        throw TypeError(".Buttplug.DeviceMessage.FFIMessage.rawUnsubscribeCmd: object expected");
                    message.rawUnsubscribeCmd = $root.Buttplug.DeviceMessage.RawUnsubscribeCmd.fromObject(object.rawUnsubscribeCmd);
                }
                if (object.batteryLevelCmd != null) {
                    if (typeof object.batteryLevelCmd !== "object")
                        throw TypeError(".Buttplug.DeviceMessage.FFIMessage.batteryLevelCmd: object expected");
                    message.batteryLevelCmd = $root.Buttplug.DeviceMessage.BatteryLevelCmd.fromObject(object.batteryLevelCmd);
                }
                if (object.rssiLevelCmd != null) {
                    if (typeof object.rssiLevelCmd !== "object")
                        throw TypeError(".Buttplug.DeviceMessage.FFIMessage.rssiLevelCmd: object expected");
                    message.rssiLevelCmd = $root.Buttplug.DeviceMessage.RSSILevelCmd.fromObject(object.rssiLevelCmd);
                }
                return message;
            };

            /**
             * Creates a plain object from a FFIMessage message. Also converts values to other types if specified.
             * @function toObject
             * @memberof Buttplug.DeviceMessage.FFIMessage
             * @static
             * @param {Buttplug.DeviceMessage.FFIMessage} message FFIMessage
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            FFIMessage.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (message.vibrateCmd != null && message.hasOwnProperty("vibrateCmd")) {
                    object.vibrateCmd = $root.Buttplug.DeviceMessage.VibrateCmd.toObject(message.vibrateCmd, options);
                    if (options.oneofs)
                        object.msg = "vibrateCmd";
                }
                if (message.rotateCmd != null && message.hasOwnProperty("rotateCmd")) {
                    object.rotateCmd = $root.Buttplug.DeviceMessage.RotateCmd.toObject(message.rotateCmd, options);
                    if (options.oneofs)
                        object.msg = "rotateCmd";
                }
                if (message.linearCmd != null && message.hasOwnProperty("linearCmd")) {
                    object.linearCmd = $root.Buttplug.DeviceMessage.LinearCmd.toObject(message.linearCmd, options);
                    if (options.oneofs)
                        object.msg = "linearCmd";
                }
                if (message.stopDeviceCmd != null && message.hasOwnProperty("stopDeviceCmd")) {
                    object.stopDeviceCmd = $root.Buttplug.DeviceMessage.StopDeviceCmd.toObject(message.stopDeviceCmd, options);
                    if (options.oneofs)
                        object.msg = "stopDeviceCmd";
                }
                if (message.rawReadCmd != null && message.hasOwnProperty("rawReadCmd")) {
                    object.rawReadCmd = $root.Buttplug.DeviceMessage.RawReadCmd.toObject(message.rawReadCmd, options);
                    if (options.oneofs)
                        object.msg = "rawReadCmd";
                }
                if (message.rawWriteCmd != null && message.hasOwnProperty("rawWriteCmd")) {
                    object.rawWriteCmd = $root.Buttplug.DeviceMessage.RawWriteCmd.toObject(message.rawWriteCmd, options);
                    if (options.oneofs)
                        object.msg = "rawWriteCmd";
                }
                if (message.rawSubscribeCmd != null && message.hasOwnProperty("rawSubscribeCmd")) {
                    object.rawSubscribeCmd = $root.Buttplug.DeviceMessage.RawSubscribeCmd.toObject(message.rawSubscribeCmd, options);
                    if (options.oneofs)
                        object.msg = "rawSubscribeCmd";
                }
                if (message.rawUnsubscribeCmd != null && message.hasOwnProperty("rawUnsubscribeCmd")) {
                    object.rawUnsubscribeCmd = $root.Buttplug.DeviceMessage.RawUnsubscribeCmd.toObject(message.rawUnsubscribeCmd, options);
                    if (options.oneofs)
                        object.msg = "rawUnsubscribeCmd";
                }
                if (message.batteryLevelCmd != null && message.hasOwnProperty("batteryLevelCmd")) {
                    object.batteryLevelCmd = $root.Buttplug.DeviceMessage.BatteryLevelCmd.toObject(message.batteryLevelCmd, options);
                    if (options.oneofs)
                        object.msg = "batteryLevelCmd";
                }
                if (message.rssiLevelCmd != null && message.hasOwnProperty("rssiLevelCmd")) {
                    object.rssiLevelCmd = $root.Buttplug.DeviceMessage.RSSILevelCmd.toObject(message.rssiLevelCmd, options);
                    if (options.oneofs)
                        object.msg = "rssiLevelCmd";
                }
                return object;
            };

            /**
             * Converts this FFIMessage to JSON.
             * @function toJSON
             * @memberof Buttplug.DeviceMessage.FFIMessage
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            FFIMessage.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return FFIMessage;
        })();

        return DeviceMessage;
    })();

    Buttplug.ServerMessage = (function() {

        /**
         * Properties of a ServerMessage.
         * @memberof Buttplug
         * @interface IServerMessage
         * @property {Buttplug.ServerMessage.IOk|null} [ok] ServerMessage ok
         * @property {Buttplug.ServerMessage.IError|null} [error] ServerMessage error
         * @property {Buttplug.ServerMessage.IScanningFinished|null} [scanningFinished] ServerMessage scanningFinished
         * @property {Buttplug.ServerMessage.IDeviceAdded|null} [deviceAdded] ServerMessage deviceAdded
         * @property {Buttplug.ServerMessage.IDeviceRemoved|null} [deviceRemoved] ServerMessage deviceRemoved
         * @property {Buttplug.ServerMessage.IDisconnect|null} [disconnect] ServerMessage disconnect
         */

        /**
         * Constructs a new ServerMessage.
         * @memberof Buttplug
         * @classdesc Represents a ServerMessage.
         * @implements IServerMessage
         * @constructor
         * @param {Buttplug.IServerMessage=} [properties] Properties to set
         */
        function ServerMessage(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ServerMessage ok.
         * @member {Buttplug.ServerMessage.IOk|null|undefined} ok
         * @memberof Buttplug.ServerMessage
         * @instance
         */
        ServerMessage.prototype.ok = null;

        /**
         * ServerMessage error.
         * @member {Buttplug.ServerMessage.IError|null|undefined} error
         * @memberof Buttplug.ServerMessage
         * @instance
         */
        ServerMessage.prototype.error = null;

        /**
         * ServerMessage scanningFinished.
         * @member {Buttplug.ServerMessage.IScanningFinished|null|undefined} scanningFinished
         * @memberof Buttplug.ServerMessage
         * @instance
         */
        ServerMessage.prototype.scanningFinished = null;

        /**
         * ServerMessage deviceAdded.
         * @member {Buttplug.ServerMessage.IDeviceAdded|null|undefined} deviceAdded
         * @memberof Buttplug.ServerMessage
         * @instance
         */
        ServerMessage.prototype.deviceAdded = null;

        /**
         * ServerMessage deviceRemoved.
         * @member {Buttplug.ServerMessage.IDeviceRemoved|null|undefined} deviceRemoved
         * @memberof Buttplug.ServerMessage
         * @instance
         */
        ServerMessage.prototype.deviceRemoved = null;

        /**
         * ServerMessage disconnect.
         * @member {Buttplug.ServerMessage.IDisconnect|null|undefined} disconnect
         * @memberof Buttplug.ServerMessage
         * @instance
         */
        ServerMessage.prototype.disconnect = null;

        // OneOf field names bound to virtual getters and setters
        var $oneOfFields;

        /**
         * ServerMessage msg.
         * @member {"ok"|"error"|"scanningFinished"|"deviceAdded"|"deviceRemoved"|"disconnect"|undefined} msg
         * @memberof Buttplug.ServerMessage
         * @instance
         */
        Object.defineProperty(ServerMessage.prototype, "msg", {
            get: $util.oneOfGetter($oneOfFields = ["ok", "error", "scanningFinished", "deviceAdded", "deviceRemoved", "disconnect"]),
            set: $util.oneOfSetter($oneOfFields)
        });

        /**
         * Creates a new ServerMessage instance using the specified properties.
         * @function create
         * @memberof Buttplug.ServerMessage
         * @static
         * @param {Buttplug.IServerMessage=} [properties] Properties to set
         * @returns {Buttplug.ServerMessage} ServerMessage instance
         */
        ServerMessage.create = function create(properties) {
            return new ServerMessage(properties);
        };

        /**
         * Encodes the specified ServerMessage message. Does not implicitly {@link Buttplug.ServerMessage.verify|verify} messages.
         * @function encode
         * @memberof Buttplug.ServerMessage
         * @static
         * @param {Buttplug.IServerMessage} message ServerMessage message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ServerMessage.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.ok != null && Object.hasOwnProperty.call(message, "ok"))
                $root.Buttplug.ServerMessage.Ok.encode(message.ok, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.error != null && Object.hasOwnProperty.call(message, "error"))
                $root.Buttplug.ServerMessage.Error.encode(message.error, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.scanningFinished != null && Object.hasOwnProperty.call(message, "scanningFinished"))
                $root.Buttplug.ServerMessage.ScanningFinished.encode(message.scanningFinished, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.deviceAdded != null && Object.hasOwnProperty.call(message, "deviceAdded"))
                $root.Buttplug.ServerMessage.DeviceAdded.encode(message.deviceAdded, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            if (message.deviceRemoved != null && Object.hasOwnProperty.call(message, "deviceRemoved"))
                $root.Buttplug.ServerMessage.DeviceRemoved.encode(message.deviceRemoved, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
            if (message.disconnect != null && Object.hasOwnProperty.call(message, "disconnect"))
                $root.Buttplug.ServerMessage.Disconnect.encode(message.disconnect, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified ServerMessage message, length delimited. Does not implicitly {@link Buttplug.ServerMessage.verify|verify} messages.
         * @function encodeDelimited
         * @memberof Buttplug.ServerMessage
         * @static
         * @param {Buttplug.IServerMessage} message ServerMessage message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ServerMessage.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ServerMessage message from the specified reader or buffer.
         * @function decode
         * @memberof Buttplug.ServerMessage
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {Buttplug.ServerMessage} ServerMessage
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ServerMessage.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Buttplug.ServerMessage();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.ok = $root.Buttplug.ServerMessage.Ok.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.error = $root.Buttplug.ServerMessage.Error.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.scanningFinished = $root.Buttplug.ServerMessage.ScanningFinished.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.deviceAdded = $root.Buttplug.ServerMessage.DeviceAdded.decode(reader, reader.uint32());
                    break;
                case 5:
                    message.deviceRemoved = $root.Buttplug.ServerMessage.DeviceRemoved.decode(reader, reader.uint32());
                    break;
                case 6:
                    message.disconnect = $root.Buttplug.ServerMessage.Disconnect.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ServerMessage message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof Buttplug.ServerMessage
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {Buttplug.ServerMessage} ServerMessage
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ServerMessage.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ServerMessage message.
         * @function verify
         * @memberof Buttplug.ServerMessage
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ServerMessage.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            var properties = {};
            if (message.ok != null && message.hasOwnProperty("ok")) {
                properties.msg = 1;
                {
                    var error = $root.Buttplug.ServerMessage.Ok.verify(message.ok);
                    if (error)
                        return "ok." + error;
                }
            }
            if (message.error != null && message.hasOwnProperty("error")) {
                if (properties.msg === 1)
                    return "msg: multiple values";
                properties.msg = 1;
                {
                    var error = $root.Buttplug.ServerMessage.Error.verify(message.error);
                    if (error)
                        return "error." + error;
                }
            }
            if (message.scanningFinished != null && message.hasOwnProperty("scanningFinished")) {
                if (properties.msg === 1)
                    return "msg: multiple values";
                properties.msg = 1;
                {
                    var error = $root.Buttplug.ServerMessage.ScanningFinished.verify(message.scanningFinished);
                    if (error)
                        return "scanningFinished." + error;
                }
            }
            if (message.deviceAdded != null && message.hasOwnProperty("deviceAdded")) {
                if (properties.msg === 1)
                    return "msg: multiple values";
                properties.msg = 1;
                {
                    var error = $root.Buttplug.ServerMessage.DeviceAdded.verify(message.deviceAdded);
                    if (error)
                        return "deviceAdded." + error;
                }
            }
            if (message.deviceRemoved != null && message.hasOwnProperty("deviceRemoved")) {
                if (properties.msg === 1)
                    return "msg: multiple values";
                properties.msg = 1;
                {
                    var error = $root.Buttplug.ServerMessage.DeviceRemoved.verify(message.deviceRemoved);
                    if (error)
                        return "deviceRemoved." + error;
                }
            }
            if (message.disconnect != null && message.hasOwnProperty("disconnect")) {
                if (properties.msg === 1)
                    return "msg: multiple values";
                properties.msg = 1;
                {
                    var error = $root.Buttplug.ServerMessage.Disconnect.verify(message.disconnect);
                    if (error)
                        return "disconnect." + error;
                }
            }
            return null;
        };

        /**
         * Creates a ServerMessage message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof Buttplug.ServerMessage
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {Buttplug.ServerMessage} ServerMessage
         */
        ServerMessage.fromObject = function fromObject(object) {
            if (object instanceof $root.Buttplug.ServerMessage)
                return object;
            var message = new $root.Buttplug.ServerMessage();
            if (object.ok != null) {
                if (typeof object.ok !== "object")
                    throw TypeError(".Buttplug.ServerMessage.ok: object expected");
                message.ok = $root.Buttplug.ServerMessage.Ok.fromObject(object.ok);
            }
            if (object.error != null) {
                if (typeof object.error !== "object")
                    throw TypeError(".Buttplug.ServerMessage.error: object expected");
                message.error = $root.Buttplug.ServerMessage.Error.fromObject(object.error);
            }
            if (object.scanningFinished != null) {
                if (typeof object.scanningFinished !== "object")
                    throw TypeError(".Buttplug.ServerMessage.scanningFinished: object expected");
                message.scanningFinished = $root.Buttplug.ServerMessage.ScanningFinished.fromObject(object.scanningFinished);
            }
            if (object.deviceAdded != null) {
                if (typeof object.deviceAdded !== "object")
                    throw TypeError(".Buttplug.ServerMessage.deviceAdded: object expected");
                message.deviceAdded = $root.Buttplug.ServerMessage.DeviceAdded.fromObject(object.deviceAdded);
            }
            if (object.deviceRemoved != null) {
                if (typeof object.deviceRemoved !== "object")
                    throw TypeError(".Buttplug.ServerMessage.deviceRemoved: object expected");
                message.deviceRemoved = $root.Buttplug.ServerMessage.DeviceRemoved.fromObject(object.deviceRemoved);
            }
            if (object.disconnect != null) {
                if (typeof object.disconnect !== "object")
                    throw TypeError(".Buttplug.ServerMessage.disconnect: object expected");
                message.disconnect = $root.Buttplug.ServerMessage.Disconnect.fromObject(object.disconnect);
            }
            return message;
        };

        /**
         * Creates a plain object from a ServerMessage message. Also converts values to other types if specified.
         * @function toObject
         * @memberof Buttplug.ServerMessage
         * @static
         * @param {Buttplug.ServerMessage} message ServerMessage
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ServerMessage.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (message.ok != null && message.hasOwnProperty("ok")) {
                object.ok = $root.Buttplug.ServerMessage.Ok.toObject(message.ok, options);
                if (options.oneofs)
                    object.msg = "ok";
            }
            if (message.error != null && message.hasOwnProperty("error")) {
                object.error = $root.Buttplug.ServerMessage.Error.toObject(message.error, options);
                if (options.oneofs)
                    object.msg = "error";
            }
            if (message.scanningFinished != null && message.hasOwnProperty("scanningFinished")) {
                object.scanningFinished = $root.Buttplug.ServerMessage.ScanningFinished.toObject(message.scanningFinished, options);
                if (options.oneofs)
                    object.msg = "scanningFinished";
            }
            if (message.deviceAdded != null && message.hasOwnProperty("deviceAdded")) {
                object.deviceAdded = $root.Buttplug.ServerMessage.DeviceAdded.toObject(message.deviceAdded, options);
                if (options.oneofs)
                    object.msg = "deviceAdded";
            }
            if (message.deviceRemoved != null && message.hasOwnProperty("deviceRemoved")) {
                object.deviceRemoved = $root.Buttplug.ServerMessage.DeviceRemoved.toObject(message.deviceRemoved, options);
                if (options.oneofs)
                    object.msg = "deviceRemoved";
            }
            if (message.disconnect != null && message.hasOwnProperty("disconnect")) {
                object.disconnect = $root.Buttplug.ServerMessage.Disconnect.toObject(message.disconnect, options);
                if (options.oneofs)
                    object.msg = "disconnect";
            }
            return object;
        };

        /**
         * Converts this ServerMessage to JSON.
         * @function toJSON
         * @memberof Buttplug.ServerMessage
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ServerMessage.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * ButtplugErrorType enum.
         * @name Buttplug.ServerMessage.ButtplugErrorType
         * @enum {number}
         * @property {number} ButtplugConnectorError=0 ButtplugConnectorError value
         * @property {number} ButtplugHandshakeError=1 ButtplugHandshakeError value
         * @property {number} ButtplugDeviceError=2 ButtplugDeviceError value
         * @property {number} ButtplugPingError=3 ButtplugPingError value
         * @property {number} ButtplugMessageError=4 ButtplugMessageError value
         * @property {number} ButtplugUnknownError=5 ButtplugUnknownError value
         */
        ServerMessage.ButtplugErrorType = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "ButtplugConnectorError"] = 0;
            values[valuesById[1] = "ButtplugHandshakeError"] = 1;
            values[valuesById[2] = "ButtplugDeviceError"] = 2;
            values[valuesById[3] = "ButtplugPingError"] = 3;
            values[valuesById[4] = "ButtplugMessageError"] = 4;
            values[valuesById[5] = "ButtplugUnknownError"] = 5;
            return values;
        })();

        /**
         * MessageAttributeType enum.
         * @name Buttplug.ServerMessage.MessageAttributeType
         * @enum {number}
         * @property {number} VibrateCmd=0 VibrateCmd value
         * @property {number} RotateCmd=1 RotateCmd value
         * @property {number} LinearCmd=2 LinearCmd value
         * @property {number} StopDeviceCmd=3 StopDeviceCmd value
         * @property {number} RawReadCmd=4 RawReadCmd value
         * @property {number} RawWriteCmd=5 RawWriteCmd value
         * @property {number} RawSubscribeCmd=6 RawSubscribeCmd value
         * @property {number} RawUnsubscribeCmd=7 RawUnsubscribeCmd value
         * @property {number} BatteryLevelCmd=8 BatteryLevelCmd value
         * @property {number} RSSILevelCmd=9 RSSILevelCmd value
         */
        ServerMessage.MessageAttributeType = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "VibrateCmd"] = 0;
            values[valuesById[1] = "RotateCmd"] = 1;
            values[valuesById[2] = "LinearCmd"] = 2;
            values[valuesById[3] = "StopDeviceCmd"] = 3;
            values[valuesById[4] = "RawReadCmd"] = 4;
            values[valuesById[5] = "RawWriteCmd"] = 5;
            values[valuesById[6] = "RawSubscribeCmd"] = 6;
            values[valuesById[7] = "RawUnsubscribeCmd"] = 7;
            values[valuesById[8] = "BatteryLevelCmd"] = 8;
            values[valuesById[9] = "RSSILevelCmd"] = 9;
            return values;
        })();

        ServerMessage.MessageAttributes = (function() {

            /**
             * Properties of a MessageAttributes.
             * @memberof Buttplug.ServerMessage
             * @interface IMessageAttributes
             * @property {Buttplug.ServerMessage.MessageAttributeType|null} [messageType] MessageAttributes messageType
             * @property {number|null} [featureCount] MessageAttributes featureCount
             * @property {Array.<number>|null} [stepCount] MessageAttributes stepCount
             * @property {Array.<Buttplug.Endpoint>|null} [endpoints] MessageAttributes endpoints
             * @property {Array.<number>|null} [maxDuration] MessageAttributes maxDuration
             */

            /**
             * Constructs a new MessageAttributes.
             * @memberof Buttplug.ServerMessage
             * @classdesc Represents a MessageAttributes.
             * @implements IMessageAttributes
             * @constructor
             * @param {Buttplug.ServerMessage.IMessageAttributes=} [properties] Properties to set
             */
            function MessageAttributes(properties) {
                this.stepCount = [];
                this.endpoints = [];
                this.maxDuration = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * MessageAttributes messageType.
             * @member {Buttplug.ServerMessage.MessageAttributeType} messageType
             * @memberof Buttplug.ServerMessage.MessageAttributes
             * @instance
             */
            MessageAttributes.prototype.messageType = 0;

            /**
             * MessageAttributes featureCount.
             * @member {number} featureCount
             * @memberof Buttplug.ServerMessage.MessageAttributes
             * @instance
             */
            MessageAttributes.prototype.featureCount = 0;

            /**
             * MessageAttributes stepCount.
             * @member {Array.<number>} stepCount
             * @memberof Buttplug.ServerMessage.MessageAttributes
             * @instance
             */
            MessageAttributes.prototype.stepCount = $util.emptyArray;

            /**
             * MessageAttributes endpoints.
             * @member {Array.<Buttplug.Endpoint>} endpoints
             * @memberof Buttplug.ServerMessage.MessageAttributes
             * @instance
             */
            MessageAttributes.prototype.endpoints = $util.emptyArray;

            /**
             * MessageAttributes maxDuration.
             * @member {Array.<number>} maxDuration
             * @memberof Buttplug.ServerMessage.MessageAttributes
             * @instance
             */
            MessageAttributes.prototype.maxDuration = $util.emptyArray;

            /**
             * Creates a new MessageAttributes instance using the specified properties.
             * @function create
             * @memberof Buttplug.ServerMessage.MessageAttributes
             * @static
             * @param {Buttplug.ServerMessage.IMessageAttributes=} [properties] Properties to set
             * @returns {Buttplug.ServerMessage.MessageAttributes} MessageAttributes instance
             */
            MessageAttributes.create = function create(properties) {
                return new MessageAttributes(properties);
            };

            /**
             * Encodes the specified MessageAttributes message. Does not implicitly {@link Buttplug.ServerMessage.MessageAttributes.verify|verify} messages.
             * @function encode
             * @memberof Buttplug.ServerMessage.MessageAttributes
             * @static
             * @param {Buttplug.ServerMessage.IMessageAttributes} message MessageAttributes message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MessageAttributes.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.messageType != null && Object.hasOwnProperty.call(message, "messageType"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.messageType);
                if (message.featureCount != null && Object.hasOwnProperty.call(message, "featureCount"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.featureCount);
                if (message.stepCount != null && message.stepCount.length) {
                    writer.uint32(/* id 3, wireType 2 =*/26).fork();
                    for (var i = 0; i < message.stepCount.length; ++i)
                        writer.uint32(message.stepCount[i]);
                    writer.ldelim();
                }
                if (message.endpoints != null && message.endpoints.length) {
                    writer.uint32(/* id 4, wireType 2 =*/34).fork();
                    for (var i = 0; i < message.endpoints.length; ++i)
                        writer.int32(message.endpoints[i]);
                    writer.ldelim();
                }
                if (message.maxDuration != null && message.maxDuration.length) {
                    writer.uint32(/* id 5, wireType 2 =*/42).fork();
                    for (var i = 0; i < message.maxDuration.length; ++i)
                        writer.uint32(message.maxDuration[i]);
                    writer.ldelim();
                }
                return writer;
            };

            /**
             * Encodes the specified MessageAttributes message, length delimited. Does not implicitly {@link Buttplug.ServerMessage.MessageAttributes.verify|verify} messages.
             * @function encodeDelimited
             * @memberof Buttplug.ServerMessage.MessageAttributes
             * @static
             * @param {Buttplug.ServerMessage.IMessageAttributes} message MessageAttributes message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MessageAttributes.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a MessageAttributes message from the specified reader or buffer.
             * @function decode
             * @memberof Buttplug.ServerMessage.MessageAttributes
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {Buttplug.ServerMessage.MessageAttributes} MessageAttributes
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MessageAttributes.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Buttplug.ServerMessage.MessageAttributes();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.messageType = reader.int32();
                        break;
                    case 2:
                        message.featureCount = reader.uint32();
                        break;
                    case 3:
                        if (!(message.stepCount && message.stepCount.length))
                            message.stepCount = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.stepCount.push(reader.uint32());
                        } else
                            message.stepCount.push(reader.uint32());
                        break;
                    case 4:
                        if (!(message.endpoints && message.endpoints.length))
                            message.endpoints = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.endpoints.push(reader.int32());
                        } else
                            message.endpoints.push(reader.int32());
                        break;
                    case 5:
                        if (!(message.maxDuration && message.maxDuration.length))
                            message.maxDuration = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.maxDuration.push(reader.uint32());
                        } else
                            message.maxDuration.push(reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a MessageAttributes message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof Buttplug.ServerMessage.MessageAttributes
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {Buttplug.ServerMessage.MessageAttributes} MessageAttributes
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MessageAttributes.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a MessageAttributes message.
             * @function verify
             * @memberof Buttplug.ServerMessage.MessageAttributes
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            MessageAttributes.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.messageType != null && message.hasOwnProperty("messageType"))
                    switch (message.messageType) {
                    default:
                        return "messageType: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                    case 6:
                    case 7:
                    case 8:
                    case 9:
                        break;
                    }
                if (message.featureCount != null && message.hasOwnProperty("featureCount"))
                    if (!$util.isInteger(message.featureCount))
                        return "featureCount: integer expected";
                if (message.stepCount != null && message.hasOwnProperty("stepCount")) {
                    if (!Array.isArray(message.stepCount))
                        return "stepCount: array expected";
                    for (var i = 0; i < message.stepCount.length; ++i)
                        if (!$util.isInteger(message.stepCount[i]))
                            return "stepCount: integer[] expected";
                }
                if (message.endpoints != null && message.hasOwnProperty("endpoints")) {
                    if (!Array.isArray(message.endpoints))
                        return "endpoints: array expected";
                    for (var i = 0; i < message.endpoints.length; ++i)
                        switch (message.endpoints[i]) {
                        default:
                            return "endpoints: enum value[] expected";
                        case 0:
                        case 1:
                        case 2:
                        case 3:
                        case 4:
                        case 5:
                        case 6:
                        case 7:
                        case 8:
                        case 9:
                        case 10:
                        case 11:
                        case 12:
                        case 13:
                        case 14:
                        case 15:
                        case 16:
                        case 17:
                        case 18:
                        case 19:
                        case 20:
                        case 21:
                        case 22:
                        case 23:
                        case 24:
                        case 25:
                        case 26:
                        case 27:
                        case 28:
                        case 29:
                        case 30:
                        case 31:
                        case 32:
                        case 33:
                        case 34:
                        case 35:
                        case 36:
                        case 37:
                        case 38:
                        case 39:
                        case 40:
                        case 41:
                        case 42:
                        case 43:
                        case 44:
                            break;
                        }
                }
                if (message.maxDuration != null && message.hasOwnProperty("maxDuration")) {
                    if (!Array.isArray(message.maxDuration))
                        return "maxDuration: array expected";
                    for (var i = 0; i < message.maxDuration.length; ++i)
                        if (!$util.isInteger(message.maxDuration[i]))
                            return "maxDuration: integer[] expected";
                }
                return null;
            };

            /**
             * Creates a MessageAttributes message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof Buttplug.ServerMessage.MessageAttributes
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {Buttplug.ServerMessage.MessageAttributes} MessageAttributes
             */
            MessageAttributes.fromObject = function fromObject(object) {
                if (object instanceof $root.Buttplug.ServerMessage.MessageAttributes)
                    return object;
                var message = new $root.Buttplug.ServerMessage.MessageAttributes();
                switch (object.messageType) {
                case "VibrateCmd":
                case 0:
                    message.messageType = 0;
                    break;
                case "RotateCmd":
                case 1:
                    message.messageType = 1;
                    break;
                case "LinearCmd":
                case 2:
                    message.messageType = 2;
                    break;
                case "StopDeviceCmd":
                case 3:
                    message.messageType = 3;
                    break;
                case "RawReadCmd":
                case 4:
                    message.messageType = 4;
                    break;
                case "RawWriteCmd":
                case 5:
                    message.messageType = 5;
                    break;
                case "RawSubscribeCmd":
                case 6:
                    message.messageType = 6;
                    break;
                case "RawUnsubscribeCmd":
                case 7:
                    message.messageType = 7;
                    break;
                case "BatteryLevelCmd":
                case 8:
                    message.messageType = 8;
                    break;
                case "RSSILevelCmd":
                case 9:
                    message.messageType = 9;
                    break;
                }
                if (object.featureCount != null)
                    message.featureCount = object.featureCount >>> 0;
                if (object.stepCount) {
                    if (!Array.isArray(object.stepCount))
                        throw TypeError(".Buttplug.ServerMessage.MessageAttributes.stepCount: array expected");
                    message.stepCount = [];
                    for (var i = 0; i < object.stepCount.length; ++i)
                        message.stepCount[i] = object.stepCount[i] >>> 0;
                }
                if (object.endpoints) {
                    if (!Array.isArray(object.endpoints))
                        throw TypeError(".Buttplug.ServerMessage.MessageAttributes.endpoints: array expected");
                    message.endpoints = [];
                    for (var i = 0; i < object.endpoints.length; ++i)
                        switch (object.endpoints[i]) {
                        default:
                        case "Command":
                        case 0:
                            message.endpoints[i] = 0;
                            break;
                        case "Firmware":
                        case 1:
                            message.endpoints[i] = 1;
                            break;
                        case "Rx":
                        case 2:
                            message.endpoints[i] = 2;
                            break;
                        case "RxAccel":
                        case 3:
                            message.endpoints[i] = 3;
                            break;
                        case "RxBLEBattery":
                        case 4:
                            message.endpoints[i] = 4;
                            break;
                        case "RxPressure":
                        case 5:
                            message.endpoints[i] = 5;
                            break;
                        case "RxTouch":
                        case 6:
                            message.endpoints[i] = 6;
                            break;
                        case "Tx":
                        case 7:
                            message.endpoints[i] = 7;
                            break;
                        case "TxMode":
                        case 8:
                            message.endpoints[i] = 8;
                            break;
                        case "TxShock":
                        case 9:
                            message.endpoints[i] = 9;
                            break;
                        case "TxVibrate":
                        case 10:
                            message.endpoints[i] = 10;
                            break;
                        case "TxVendorControl":
                        case 11:
                            message.endpoints[i] = 11;
                            break;
                        case "Whitelist":
                        case 12:
                            message.endpoints[i] = 12;
                            break;
                        case "Generic0":
                        case 13:
                            message.endpoints[i] = 13;
                            break;
                        case "Generic1":
                        case 14:
                            message.endpoints[i] = 14;
                            break;
                        case "Generic2":
                        case 15:
                            message.endpoints[i] = 15;
                            break;
                        case "Generic3":
                        case 16:
                            message.endpoints[i] = 16;
                            break;
                        case "Generic4":
                        case 17:
                            message.endpoints[i] = 17;
                            break;
                        case "Generic5":
                        case 18:
                            message.endpoints[i] = 18;
                            break;
                        case "Generic6":
                        case 19:
                            message.endpoints[i] = 19;
                            break;
                        case "Generic7":
                        case 20:
                            message.endpoints[i] = 20;
                            break;
                        case "Generic8":
                        case 21:
                            message.endpoints[i] = 21;
                            break;
                        case "Generic9":
                        case 22:
                            message.endpoints[i] = 22;
                            break;
                        case "Generic10":
                        case 23:
                            message.endpoints[i] = 23;
                            break;
                        case "Generic11":
                        case 24:
                            message.endpoints[i] = 24;
                            break;
                        case "Generic12":
                        case 25:
                            message.endpoints[i] = 25;
                            break;
                        case "Generic13":
                        case 26:
                            message.endpoints[i] = 26;
                            break;
                        case "Generic14":
                        case 27:
                            message.endpoints[i] = 27;
                            break;
                        case "Generic15":
                        case 28:
                            message.endpoints[i] = 28;
                            break;
                        case "Generic16":
                        case 29:
                            message.endpoints[i] = 29;
                            break;
                        case "Generic17":
                        case 30:
                            message.endpoints[i] = 30;
                            break;
                        case "Generic18":
                        case 31:
                            message.endpoints[i] = 31;
                            break;
                        case "Generic19":
                        case 32:
                            message.endpoints[i] = 32;
                            break;
                        case "Generic20":
                        case 33:
                            message.endpoints[i] = 33;
                            break;
                        case "Generic21":
                        case 34:
                            message.endpoints[i] = 34;
                            break;
                        case "Generic22":
                        case 35:
                            message.endpoints[i] = 35;
                            break;
                        case "Generic23":
                        case 36:
                            message.endpoints[i] = 36;
                            break;
                        case "Generic24":
                        case 37:
                            message.endpoints[i] = 37;
                            break;
                        case "Generic25":
                        case 38:
                            message.endpoints[i] = 38;
                            break;
                        case "Generic26":
                        case 39:
                            message.endpoints[i] = 39;
                            break;
                        case "Generic27":
                        case 40:
                            message.endpoints[i] = 40;
                            break;
                        case "Generic28":
                        case 41:
                            message.endpoints[i] = 41;
                            break;
                        case "Generic29":
                        case 42:
                            message.endpoints[i] = 42;
                            break;
                        case "Generic30":
                        case 43:
                            message.endpoints[i] = 43;
                            break;
                        case "Generic31":
                        case 44:
                            message.endpoints[i] = 44;
                            break;
                        }
                }
                if (object.maxDuration) {
                    if (!Array.isArray(object.maxDuration))
                        throw TypeError(".Buttplug.ServerMessage.MessageAttributes.maxDuration: array expected");
                    message.maxDuration = [];
                    for (var i = 0; i < object.maxDuration.length; ++i)
                        message.maxDuration[i] = object.maxDuration[i] >>> 0;
                }
                return message;
            };

            /**
             * Creates a plain object from a MessageAttributes message. Also converts values to other types if specified.
             * @function toObject
             * @memberof Buttplug.ServerMessage.MessageAttributes
             * @static
             * @param {Buttplug.ServerMessage.MessageAttributes} message MessageAttributes
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            MessageAttributes.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults) {
                    object.stepCount = [];
                    object.endpoints = [];
                    object.maxDuration = [];
                }
                if (options.defaults) {
                    object.messageType = options.enums === String ? "VibrateCmd" : 0;
                    object.featureCount = 0;
                }
                if (message.messageType != null && message.hasOwnProperty("messageType"))
                    object.messageType = options.enums === String ? $root.Buttplug.ServerMessage.MessageAttributeType[message.messageType] : message.messageType;
                if (message.featureCount != null && message.hasOwnProperty("featureCount"))
                    object.featureCount = message.featureCount;
                if (message.stepCount && message.stepCount.length) {
                    object.stepCount = [];
                    for (var j = 0; j < message.stepCount.length; ++j)
                        object.stepCount[j] = message.stepCount[j];
                }
                if (message.endpoints && message.endpoints.length) {
                    object.endpoints = [];
                    for (var j = 0; j < message.endpoints.length; ++j)
                        object.endpoints[j] = options.enums === String ? $root.Buttplug.Endpoint[message.endpoints[j]] : message.endpoints[j];
                }
                if (message.maxDuration && message.maxDuration.length) {
                    object.maxDuration = [];
                    for (var j = 0; j < message.maxDuration.length; ++j)
                        object.maxDuration[j] = message.maxDuration[j];
                }
                return object;
            };

            /**
             * Converts this MessageAttributes to JSON.
             * @function toJSON
             * @memberof Buttplug.ServerMessage.MessageAttributes
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            MessageAttributes.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return MessageAttributes;
        })();

        ServerMessage.Ok = (function() {

            /**
             * Properties of an Ok.
             * @memberof Buttplug.ServerMessage
             * @interface IOk
             */

            /**
             * Constructs a new Ok.
             * @memberof Buttplug.ServerMessage
             * @classdesc Represents an Ok.
             * @implements IOk
             * @constructor
             * @param {Buttplug.ServerMessage.IOk=} [properties] Properties to set
             */
            function Ok(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Creates a new Ok instance using the specified properties.
             * @function create
             * @memberof Buttplug.ServerMessage.Ok
             * @static
             * @param {Buttplug.ServerMessage.IOk=} [properties] Properties to set
             * @returns {Buttplug.ServerMessage.Ok} Ok instance
             */
            Ok.create = function create(properties) {
                return new Ok(properties);
            };

            /**
             * Encodes the specified Ok message. Does not implicitly {@link Buttplug.ServerMessage.Ok.verify|verify} messages.
             * @function encode
             * @memberof Buttplug.ServerMessage.Ok
             * @static
             * @param {Buttplug.ServerMessage.IOk} message Ok message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Ok.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                return writer;
            };

            /**
             * Encodes the specified Ok message, length delimited. Does not implicitly {@link Buttplug.ServerMessage.Ok.verify|verify} messages.
             * @function encodeDelimited
             * @memberof Buttplug.ServerMessage.Ok
             * @static
             * @param {Buttplug.ServerMessage.IOk} message Ok message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Ok.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an Ok message from the specified reader or buffer.
             * @function decode
             * @memberof Buttplug.ServerMessage.Ok
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {Buttplug.ServerMessage.Ok} Ok
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Ok.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Buttplug.ServerMessage.Ok();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an Ok message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof Buttplug.ServerMessage.Ok
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {Buttplug.ServerMessage.Ok} Ok
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Ok.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an Ok message.
             * @function verify
             * @memberof Buttplug.ServerMessage.Ok
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Ok.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                return null;
            };

            /**
             * Creates an Ok message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof Buttplug.ServerMessage.Ok
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {Buttplug.ServerMessage.Ok} Ok
             */
            Ok.fromObject = function fromObject(object) {
                if (object instanceof $root.Buttplug.ServerMessage.Ok)
                    return object;
                return new $root.Buttplug.ServerMessage.Ok();
            };

            /**
             * Creates a plain object from an Ok message. Also converts values to other types if specified.
             * @function toObject
             * @memberof Buttplug.ServerMessage.Ok
             * @static
             * @param {Buttplug.ServerMessage.Ok} message Ok
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Ok.toObject = function toObject() {
                return {};
            };

            /**
             * Converts this Ok to JSON.
             * @function toJSON
             * @memberof Buttplug.ServerMessage.Ok
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Ok.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return Ok;
        })();

        ServerMessage.Error = (function() {

            /**
             * Properties of an Error.
             * @memberof Buttplug.ServerMessage
             * @interface IError
             * @property {Buttplug.ServerMessage.ButtplugErrorType|null} [errorType] Error errorType
             * @property {string|null} [message] Error message
             * @property {string|null} [backtrace] Error backtrace
             */

            /**
             * Constructs a new Error.
             * @memberof Buttplug.ServerMessage
             * @classdesc Represents an Error.
             * @implements IError
             * @constructor
             * @param {Buttplug.ServerMessage.IError=} [properties] Properties to set
             */
            function Error(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Error errorType.
             * @member {Buttplug.ServerMessage.ButtplugErrorType} errorType
             * @memberof Buttplug.ServerMessage.Error
             * @instance
             */
            Error.prototype.errorType = 0;

            /**
             * Error message.
             * @member {string} message
             * @memberof Buttplug.ServerMessage.Error
             * @instance
             */
            Error.prototype.message = "";

            /**
             * Error backtrace.
             * @member {string} backtrace
             * @memberof Buttplug.ServerMessage.Error
             * @instance
             */
            Error.prototype.backtrace = "";

            /**
             * Creates a new Error instance using the specified properties.
             * @function create
             * @memberof Buttplug.ServerMessage.Error
             * @static
             * @param {Buttplug.ServerMessage.IError=} [properties] Properties to set
             * @returns {Buttplug.ServerMessage.Error} Error instance
             */
            Error.create = function create(properties) {
                return new Error(properties);
            };

            /**
             * Encodes the specified Error message. Does not implicitly {@link Buttplug.ServerMessage.Error.verify|verify} messages.
             * @function encode
             * @memberof Buttplug.ServerMessage.Error
             * @static
             * @param {Buttplug.ServerMessage.IError} message Error message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Error.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.errorType != null && Object.hasOwnProperty.call(message, "errorType"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.errorType);
                if (message.message != null && Object.hasOwnProperty.call(message, "message"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.message);
                if (message.backtrace != null && Object.hasOwnProperty.call(message, "backtrace"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.backtrace);
                return writer;
            };

            /**
             * Encodes the specified Error message, length delimited. Does not implicitly {@link Buttplug.ServerMessage.Error.verify|verify} messages.
             * @function encodeDelimited
             * @memberof Buttplug.ServerMessage.Error
             * @static
             * @param {Buttplug.ServerMessage.IError} message Error message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Error.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an Error message from the specified reader or buffer.
             * @function decode
             * @memberof Buttplug.ServerMessage.Error
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {Buttplug.ServerMessage.Error} Error
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Error.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Buttplug.ServerMessage.Error();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.errorType = reader.int32();
                        break;
                    case 2:
                        message.message = reader.string();
                        break;
                    case 3:
                        message.backtrace = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an Error message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof Buttplug.ServerMessage.Error
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {Buttplug.ServerMessage.Error} Error
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Error.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an Error message.
             * @function verify
             * @memberof Buttplug.ServerMessage.Error
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Error.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.errorType != null && message.hasOwnProperty("errorType"))
                    switch (message.errorType) {
                    default:
                        return "errorType: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                        break;
                    }
                if (message.message != null && message.hasOwnProperty("message"))
                    if (!$util.isString(message.message))
                        return "message: string expected";
                if (message.backtrace != null && message.hasOwnProperty("backtrace"))
                    if (!$util.isString(message.backtrace))
                        return "backtrace: string expected";
                return null;
            };

            /**
             * Creates an Error message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof Buttplug.ServerMessage.Error
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {Buttplug.ServerMessage.Error} Error
             */
            Error.fromObject = function fromObject(object) {
                if (object instanceof $root.Buttplug.ServerMessage.Error)
                    return object;
                var message = new $root.Buttplug.ServerMessage.Error();
                switch (object.errorType) {
                case "ButtplugConnectorError":
                case 0:
                    message.errorType = 0;
                    break;
                case "ButtplugHandshakeError":
                case 1:
                    message.errorType = 1;
                    break;
                case "ButtplugDeviceError":
                case 2:
                    message.errorType = 2;
                    break;
                case "ButtplugPingError":
                case 3:
                    message.errorType = 3;
                    break;
                case "ButtplugMessageError":
                case 4:
                    message.errorType = 4;
                    break;
                case "ButtplugUnknownError":
                case 5:
                    message.errorType = 5;
                    break;
                }
                if (object.message != null)
                    message.message = String(object.message);
                if (object.backtrace != null)
                    message.backtrace = String(object.backtrace);
                return message;
            };

            /**
             * Creates a plain object from an Error message. Also converts values to other types if specified.
             * @function toObject
             * @memberof Buttplug.ServerMessage.Error
             * @static
             * @param {Buttplug.ServerMessage.Error} message Error
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Error.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.errorType = options.enums === String ? "ButtplugConnectorError" : 0;
                    object.message = "";
                    object.backtrace = "";
                }
                if (message.errorType != null && message.hasOwnProperty("errorType"))
                    object.errorType = options.enums === String ? $root.Buttplug.ServerMessage.ButtplugErrorType[message.errorType] : message.errorType;
                if (message.message != null && message.hasOwnProperty("message"))
                    object.message = message.message;
                if (message.backtrace != null && message.hasOwnProperty("backtrace"))
                    object.backtrace = message.backtrace;
                return object;
            };

            /**
             * Converts this Error to JSON.
             * @function toJSON
             * @memberof Buttplug.ServerMessage.Error
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Error.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return Error;
        })();

        ServerMessage.ScanningFinished = (function() {

            /**
             * Properties of a ScanningFinished.
             * @memberof Buttplug.ServerMessage
             * @interface IScanningFinished
             */

            /**
             * Constructs a new ScanningFinished.
             * @memberof Buttplug.ServerMessage
             * @classdesc Represents a ScanningFinished.
             * @implements IScanningFinished
             * @constructor
             * @param {Buttplug.ServerMessage.IScanningFinished=} [properties] Properties to set
             */
            function ScanningFinished(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Creates a new ScanningFinished instance using the specified properties.
             * @function create
             * @memberof Buttplug.ServerMessage.ScanningFinished
             * @static
             * @param {Buttplug.ServerMessage.IScanningFinished=} [properties] Properties to set
             * @returns {Buttplug.ServerMessage.ScanningFinished} ScanningFinished instance
             */
            ScanningFinished.create = function create(properties) {
                return new ScanningFinished(properties);
            };

            /**
             * Encodes the specified ScanningFinished message. Does not implicitly {@link Buttplug.ServerMessage.ScanningFinished.verify|verify} messages.
             * @function encode
             * @memberof Buttplug.ServerMessage.ScanningFinished
             * @static
             * @param {Buttplug.ServerMessage.IScanningFinished} message ScanningFinished message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ScanningFinished.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                return writer;
            };

            /**
             * Encodes the specified ScanningFinished message, length delimited. Does not implicitly {@link Buttplug.ServerMessage.ScanningFinished.verify|verify} messages.
             * @function encodeDelimited
             * @memberof Buttplug.ServerMessage.ScanningFinished
             * @static
             * @param {Buttplug.ServerMessage.IScanningFinished} message ScanningFinished message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ScanningFinished.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a ScanningFinished message from the specified reader or buffer.
             * @function decode
             * @memberof Buttplug.ServerMessage.ScanningFinished
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {Buttplug.ServerMessage.ScanningFinished} ScanningFinished
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ScanningFinished.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Buttplug.ServerMessage.ScanningFinished();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a ScanningFinished message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof Buttplug.ServerMessage.ScanningFinished
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {Buttplug.ServerMessage.ScanningFinished} ScanningFinished
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ScanningFinished.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a ScanningFinished message.
             * @function verify
             * @memberof Buttplug.ServerMessage.ScanningFinished
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ScanningFinished.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                return null;
            };

            /**
             * Creates a ScanningFinished message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof Buttplug.ServerMessage.ScanningFinished
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {Buttplug.ServerMessage.ScanningFinished} ScanningFinished
             */
            ScanningFinished.fromObject = function fromObject(object) {
                if (object instanceof $root.Buttplug.ServerMessage.ScanningFinished)
                    return object;
                return new $root.Buttplug.ServerMessage.ScanningFinished();
            };

            /**
             * Creates a plain object from a ScanningFinished message. Also converts values to other types if specified.
             * @function toObject
             * @memberof Buttplug.ServerMessage.ScanningFinished
             * @static
             * @param {Buttplug.ServerMessage.ScanningFinished} message ScanningFinished
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ScanningFinished.toObject = function toObject() {
                return {};
            };

            /**
             * Converts this ScanningFinished to JSON.
             * @function toJSON
             * @memberof Buttplug.ServerMessage.ScanningFinished
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ScanningFinished.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return ScanningFinished;
        })();

        ServerMessage.DeviceAdded = (function() {

            /**
             * Properties of a DeviceAdded.
             * @memberof Buttplug.ServerMessage
             * @interface IDeviceAdded
             * @property {string|null} [name] DeviceAdded name
             * @property {number|null} [index] DeviceAdded index
             * @property {Array.<Buttplug.ServerMessage.IMessageAttributes>|null} [messageAttributes] DeviceAdded messageAttributes
             */

            /**
             * Constructs a new DeviceAdded.
             * @memberof Buttplug.ServerMessage
             * @classdesc Represents a DeviceAdded.
             * @implements IDeviceAdded
             * @constructor
             * @param {Buttplug.ServerMessage.IDeviceAdded=} [properties] Properties to set
             */
            function DeviceAdded(properties) {
                this.messageAttributes = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * DeviceAdded name.
             * @member {string} name
             * @memberof Buttplug.ServerMessage.DeviceAdded
             * @instance
             */
            DeviceAdded.prototype.name = "";

            /**
             * DeviceAdded index.
             * @member {number} index
             * @memberof Buttplug.ServerMessage.DeviceAdded
             * @instance
             */
            DeviceAdded.prototype.index = 0;

            /**
             * DeviceAdded messageAttributes.
             * @member {Array.<Buttplug.ServerMessage.IMessageAttributes>} messageAttributes
             * @memberof Buttplug.ServerMessage.DeviceAdded
             * @instance
             */
            DeviceAdded.prototype.messageAttributes = $util.emptyArray;

            /**
             * Creates a new DeviceAdded instance using the specified properties.
             * @function create
             * @memberof Buttplug.ServerMessage.DeviceAdded
             * @static
             * @param {Buttplug.ServerMessage.IDeviceAdded=} [properties] Properties to set
             * @returns {Buttplug.ServerMessage.DeviceAdded} DeviceAdded instance
             */
            DeviceAdded.create = function create(properties) {
                return new DeviceAdded(properties);
            };

            /**
             * Encodes the specified DeviceAdded message. Does not implicitly {@link Buttplug.ServerMessage.DeviceAdded.verify|verify} messages.
             * @function encode
             * @memberof Buttplug.ServerMessage.DeviceAdded
             * @static
             * @param {Buttplug.ServerMessage.IDeviceAdded} message DeviceAdded message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            DeviceAdded.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                if (message.index != null && Object.hasOwnProperty.call(message, "index"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.index);
                if (message.messageAttributes != null && message.messageAttributes.length)
                    for (var i = 0; i < message.messageAttributes.length; ++i)
                        $root.Buttplug.ServerMessage.MessageAttributes.encode(message.messageAttributes[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified DeviceAdded message, length delimited. Does not implicitly {@link Buttplug.ServerMessage.DeviceAdded.verify|verify} messages.
             * @function encodeDelimited
             * @memberof Buttplug.ServerMessage.DeviceAdded
             * @static
             * @param {Buttplug.ServerMessage.IDeviceAdded} message DeviceAdded message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            DeviceAdded.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a DeviceAdded message from the specified reader or buffer.
             * @function decode
             * @memberof Buttplug.ServerMessage.DeviceAdded
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {Buttplug.ServerMessage.DeviceAdded} DeviceAdded
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            DeviceAdded.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Buttplug.ServerMessage.DeviceAdded();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.name = reader.string();
                        break;
                    case 2:
                        message.index = reader.uint32();
                        break;
                    case 3:
                        if (!(message.messageAttributes && message.messageAttributes.length))
                            message.messageAttributes = [];
                        message.messageAttributes.push($root.Buttplug.ServerMessage.MessageAttributes.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a DeviceAdded message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof Buttplug.ServerMessage.DeviceAdded
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {Buttplug.ServerMessage.DeviceAdded} DeviceAdded
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            DeviceAdded.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a DeviceAdded message.
             * @function verify
             * @memberof Buttplug.ServerMessage.DeviceAdded
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            DeviceAdded.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                if (message.index != null && message.hasOwnProperty("index"))
                    if (!$util.isInteger(message.index))
                        return "index: integer expected";
                if (message.messageAttributes != null && message.hasOwnProperty("messageAttributes")) {
                    if (!Array.isArray(message.messageAttributes))
                        return "messageAttributes: array expected";
                    for (var i = 0; i < message.messageAttributes.length; ++i) {
                        var error = $root.Buttplug.ServerMessage.MessageAttributes.verify(message.messageAttributes[i]);
                        if (error)
                            return "messageAttributes." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a DeviceAdded message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof Buttplug.ServerMessage.DeviceAdded
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {Buttplug.ServerMessage.DeviceAdded} DeviceAdded
             */
            DeviceAdded.fromObject = function fromObject(object) {
                if (object instanceof $root.Buttplug.ServerMessage.DeviceAdded)
                    return object;
                var message = new $root.Buttplug.ServerMessage.DeviceAdded();
                if (object.name != null)
                    message.name = String(object.name);
                if (object.index != null)
                    message.index = object.index >>> 0;
                if (object.messageAttributes) {
                    if (!Array.isArray(object.messageAttributes))
                        throw TypeError(".Buttplug.ServerMessage.DeviceAdded.messageAttributes: array expected");
                    message.messageAttributes = [];
                    for (var i = 0; i < object.messageAttributes.length; ++i) {
                        if (typeof object.messageAttributes[i] !== "object")
                            throw TypeError(".Buttplug.ServerMessage.DeviceAdded.messageAttributes: object expected");
                        message.messageAttributes[i] = $root.Buttplug.ServerMessage.MessageAttributes.fromObject(object.messageAttributes[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a DeviceAdded message. Also converts values to other types if specified.
             * @function toObject
             * @memberof Buttplug.ServerMessage.DeviceAdded
             * @static
             * @param {Buttplug.ServerMessage.DeviceAdded} message DeviceAdded
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            DeviceAdded.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.messageAttributes = [];
                if (options.defaults) {
                    object.name = "";
                    object.index = 0;
                }
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message.index != null && message.hasOwnProperty("index"))
                    object.index = message.index;
                if (message.messageAttributes && message.messageAttributes.length) {
                    object.messageAttributes = [];
                    for (var j = 0; j < message.messageAttributes.length; ++j)
                        object.messageAttributes[j] = $root.Buttplug.ServerMessage.MessageAttributes.toObject(message.messageAttributes[j], options);
                }
                return object;
            };

            /**
             * Converts this DeviceAdded to JSON.
             * @function toJSON
             * @memberof Buttplug.ServerMessage.DeviceAdded
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            DeviceAdded.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return DeviceAdded;
        })();

        ServerMessage.DeviceRemoved = (function() {

            /**
             * Properties of a DeviceRemoved.
             * @memberof Buttplug.ServerMessage
             * @interface IDeviceRemoved
             * @property {number|null} [index] DeviceRemoved index
             */

            /**
             * Constructs a new DeviceRemoved.
             * @memberof Buttplug.ServerMessage
             * @classdesc Represents a DeviceRemoved.
             * @implements IDeviceRemoved
             * @constructor
             * @param {Buttplug.ServerMessage.IDeviceRemoved=} [properties] Properties to set
             */
            function DeviceRemoved(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * DeviceRemoved index.
             * @member {number} index
             * @memberof Buttplug.ServerMessage.DeviceRemoved
             * @instance
             */
            DeviceRemoved.prototype.index = 0;

            /**
             * Creates a new DeviceRemoved instance using the specified properties.
             * @function create
             * @memberof Buttplug.ServerMessage.DeviceRemoved
             * @static
             * @param {Buttplug.ServerMessage.IDeviceRemoved=} [properties] Properties to set
             * @returns {Buttplug.ServerMessage.DeviceRemoved} DeviceRemoved instance
             */
            DeviceRemoved.create = function create(properties) {
                return new DeviceRemoved(properties);
            };

            /**
             * Encodes the specified DeviceRemoved message. Does not implicitly {@link Buttplug.ServerMessage.DeviceRemoved.verify|verify} messages.
             * @function encode
             * @memberof Buttplug.ServerMessage.DeviceRemoved
             * @static
             * @param {Buttplug.ServerMessage.IDeviceRemoved} message DeviceRemoved message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            DeviceRemoved.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.index != null && Object.hasOwnProperty.call(message, "index"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.index);
                return writer;
            };

            /**
             * Encodes the specified DeviceRemoved message, length delimited. Does not implicitly {@link Buttplug.ServerMessage.DeviceRemoved.verify|verify} messages.
             * @function encodeDelimited
             * @memberof Buttplug.ServerMessage.DeviceRemoved
             * @static
             * @param {Buttplug.ServerMessage.IDeviceRemoved} message DeviceRemoved message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            DeviceRemoved.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a DeviceRemoved message from the specified reader or buffer.
             * @function decode
             * @memberof Buttplug.ServerMessage.DeviceRemoved
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {Buttplug.ServerMessage.DeviceRemoved} DeviceRemoved
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            DeviceRemoved.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Buttplug.ServerMessage.DeviceRemoved();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.index = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a DeviceRemoved message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof Buttplug.ServerMessage.DeviceRemoved
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {Buttplug.ServerMessage.DeviceRemoved} DeviceRemoved
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            DeviceRemoved.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a DeviceRemoved message.
             * @function verify
             * @memberof Buttplug.ServerMessage.DeviceRemoved
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            DeviceRemoved.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.index != null && message.hasOwnProperty("index"))
                    if (!$util.isInteger(message.index))
                        return "index: integer expected";
                return null;
            };

            /**
             * Creates a DeviceRemoved message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof Buttplug.ServerMessage.DeviceRemoved
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {Buttplug.ServerMessage.DeviceRemoved} DeviceRemoved
             */
            DeviceRemoved.fromObject = function fromObject(object) {
                if (object instanceof $root.Buttplug.ServerMessage.DeviceRemoved)
                    return object;
                var message = new $root.Buttplug.ServerMessage.DeviceRemoved();
                if (object.index != null)
                    message.index = object.index >>> 0;
                return message;
            };

            /**
             * Creates a plain object from a DeviceRemoved message. Also converts values to other types if specified.
             * @function toObject
             * @memberof Buttplug.ServerMessage.DeviceRemoved
             * @static
             * @param {Buttplug.ServerMessage.DeviceRemoved} message DeviceRemoved
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            DeviceRemoved.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.index = 0;
                if (message.index != null && message.hasOwnProperty("index"))
                    object.index = message.index;
                return object;
            };

            /**
             * Converts this DeviceRemoved to JSON.
             * @function toJSON
             * @memberof Buttplug.ServerMessage.DeviceRemoved
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            DeviceRemoved.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return DeviceRemoved;
        })();

        ServerMessage.Disconnect = (function() {

            /**
             * Properties of a Disconnect.
             * @memberof Buttplug.ServerMessage
             * @interface IDisconnect
             */

            /**
             * Constructs a new Disconnect.
             * @memberof Buttplug.ServerMessage
             * @classdesc Represents a Disconnect.
             * @implements IDisconnect
             * @constructor
             * @param {Buttplug.ServerMessage.IDisconnect=} [properties] Properties to set
             */
            function Disconnect(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Creates a new Disconnect instance using the specified properties.
             * @function create
             * @memberof Buttplug.ServerMessage.Disconnect
             * @static
             * @param {Buttplug.ServerMessage.IDisconnect=} [properties] Properties to set
             * @returns {Buttplug.ServerMessage.Disconnect} Disconnect instance
             */
            Disconnect.create = function create(properties) {
                return new Disconnect(properties);
            };

            /**
             * Encodes the specified Disconnect message. Does not implicitly {@link Buttplug.ServerMessage.Disconnect.verify|verify} messages.
             * @function encode
             * @memberof Buttplug.ServerMessage.Disconnect
             * @static
             * @param {Buttplug.ServerMessage.IDisconnect} message Disconnect message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Disconnect.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                return writer;
            };

            /**
             * Encodes the specified Disconnect message, length delimited. Does not implicitly {@link Buttplug.ServerMessage.Disconnect.verify|verify} messages.
             * @function encodeDelimited
             * @memberof Buttplug.ServerMessage.Disconnect
             * @static
             * @param {Buttplug.ServerMessage.IDisconnect} message Disconnect message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Disconnect.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a Disconnect message from the specified reader or buffer.
             * @function decode
             * @memberof Buttplug.ServerMessage.Disconnect
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {Buttplug.ServerMessage.Disconnect} Disconnect
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Disconnect.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Buttplug.ServerMessage.Disconnect();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a Disconnect message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof Buttplug.ServerMessage.Disconnect
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {Buttplug.ServerMessage.Disconnect} Disconnect
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Disconnect.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a Disconnect message.
             * @function verify
             * @memberof Buttplug.ServerMessage.Disconnect
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Disconnect.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                return null;
            };

            /**
             * Creates a Disconnect message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof Buttplug.ServerMessage.Disconnect
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {Buttplug.ServerMessage.Disconnect} Disconnect
             */
            Disconnect.fromObject = function fromObject(object) {
                if (object instanceof $root.Buttplug.ServerMessage.Disconnect)
                    return object;
                return new $root.Buttplug.ServerMessage.Disconnect();
            };

            /**
             * Creates a plain object from a Disconnect message. Also converts values to other types if specified.
             * @function toObject
             * @memberof Buttplug.ServerMessage.Disconnect
             * @static
             * @param {Buttplug.ServerMessage.Disconnect} message Disconnect
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Disconnect.toObject = function toObject() {
                return {};
            };

            /**
             * Converts this Disconnect to JSON.
             * @function toJSON
             * @memberof Buttplug.ServerMessage.Disconnect
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Disconnect.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return Disconnect;
        })();

        return ServerMessage;
    })();

    Buttplug.DeviceEvent = (function() {

        /**
         * Properties of a DeviceEvent.
         * @memberof Buttplug
         * @interface IDeviceEvent
         * @property {Buttplug.DeviceEvent.IDisconnect|null} [disconnect] DeviceEvent disconnect
         * @property {Buttplug.DeviceEvent.IBatteryLevelReading|null} [batteryLevelReading] DeviceEvent batteryLevelReading
         * @property {Buttplug.DeviceEvent.IRSSILevelReading|null} [rssiLevelReading] DeviceEvent rssiLevelReading
         * @property {Buttplug.DeviceEvent.IRawReading|null} [rawReading] DeviceEvent rawReading
         */

        /**
         * Constructs a new DeviceEvent.
         * @memberof Buttplug
         * @classdesc Represents a DeviceEvent.
         * @implements IDeviceEvent
         * @constructor
         * @param {Buttplug.IDeviceEvent=} [properties] Properties to set
         */
        function DeviceEvent(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * DeviceEvent disconnect.
         * @member {Buttplug.DeviceEvent.IDisconnect|null|undefined} disconnect
         * @memberof Buttplug.DeviceEvent
         * @instance
         */
        DeviceEvent.prototype.disconnect = null;

        /**
         * DeviceEvent batteryLevelReading.
         * @member {Buttplug.DeviceEvent.IBatteryLevelReading|null|undefined} batteryLevelReading
         * @memberof Buttplug.DeviceEvent
         * @instance
         */
        DeviceEvent.prototype.batteryLevelReading = null;

        /**
         * DeviceEvent rssiLevelReading.
         * @member {Buttplug.DeviceEvent.IRSSILevelReading|null|undefined} rssiLevelReading
         * @memberof Buttplug.DeviceEvent
         * @instance
         */
        DeviceEvent.prototype.rssiLevelReading = null;

        /**
         * DeviceEvent rawReading.
         * @member {Buttplug.DeviceEvent.IRawReading|null|undefined} rawReading
         * @memberof Buttplug.DeviceEvent
         * @instance
         */
        DeviceEvent.prototype.rawReading = null;

        // OneOf field names bound to virtual getters and setters
        var $oneOfFields;

        /**
         * DeviceEvent msg.
         * @member {"disconnect"|"batteryLevelReading"|"rssiLevelReading"|"rawReading"|undefined} msg
         * @memberof Buttplug.DeviceEvent
         * @instance
         */
        Object.defineProperty(DeviceEvent.prototype, "msg", {
            get: $util.oneOfGetter($oneOfFields = ["disconnect", "batteryLevelReading", "rssiLevelReading", "rawReading"]),
            set: $util.oneOfSetter($oneOfFields)
        });

        /**
         * Creates a new DeviceEvent instance using the specified properties.
         * @function create
         * @memberof Buttplug.DeviceEvent
         * @static
         * @param {Buttplug.IDeviceEvent=} [properties] Properties to set
         * @returns {Buttplug.DeviceEvent} DeviceEvent instance
         */
        DeviceEvent.create = function create(properties) {
            return new DeviceEvent(properties);
        };

        /**
         * Encodes the specified DeviceEvent message. Does not implicitly {@link Buttplug.DeviceEvent.verify|verify} messages.
         * @function encode
         * @memberof Buttplug.DeviceEvent
         * @static
         * @param {Buttplug.IDeviceEvent} message DeviceEvent message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        DeviceEvent.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.disconnect != null && Object.hasOwnProperty.call(message, "disconnect"))
                $root.Buttplug.DeviceEvent.Disconnect.encode(message.disconnect, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.batteryLevelReading != null && Object.hasOwnProperty.call(message, "batteryLevelReading"))
                $root.Buttplug.DeviceEvent.BatteryLevelReading.encode(message.batteryLevelReading, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.rssiLevelReading != null && Object.hasOwnProperty.call(message, "rssiLevelReading"))
                $root.Buttplug.DeviceEvent.RSSILevelReading.encode(message.rssiLevelReading, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.rawReading != null && Object.hasOwnProperty.call(message, "rawReading"))
                $root.Buttplug.DeviceEvent.RawReading.encode(message.rawReading, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified DeviceEvent message, length delimited. Does not implicitly {@link Buttplug.DeviceEvent.verify|verify} messages.
         * @function encodeDelimited
         * @memberof Buttplug.DeviceEvent
         * @static
         * @param {Buttplug.IDeviceEvent} message DeviceEvent message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        DeviceEvent.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a DeviceEvent message from the specified reader or buffer.
         * @function decode
         * @memberof Buttplug.DeviceEvent
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {Buttplug.DeviceEvent} DeviceEvent
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        DeviceEvent.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Buttplug.DeviceEvent();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.disconnect = $root.Buttplug.DeviceEvent.Disconnect.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.batteryLevelReading = $root.Buttplug.DeviceEvent.BatteryLevelReading.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.rssiLevelReading = $root.Buttplug.DeviceEvent.RSSILevelReading.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.rawReading = $root.Buttplug.DeviceEvent.RawReading.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a DeviceEvent message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof Buttplug.DeviceEvent
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {Buttplug.DeviceEvent} DeviceEvent
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        DeviceEvent.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a DeviceEvent message.
         * @function verify
         * @memberof Buttplug.DeviceEvent
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        DeviceEvent.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            var properties = {};
            if (message.disconnect != null && message.hasOwnProperty("disconnect")) {
                properties.msg = 1;
                {
                    var error = $root.Buttplug.DeviceEvent.Disconnect.verify(message.disconnect);
                    if (error)
                        return "disconnect." + error;
                }
            }
            if (message.batteryLevelReading != null && message.hasOwnProperty("batteryLevelReading")) {
                if (properties.msg === 1)
                    return "msg: multiple values";
                properties.msg = 1;
                {
                    var error = $root.Buttplug.DeviceEvent.BatteryLevelReading.verify(message.batteryLevelReading);
                    if (error)
                        return "batteryLevelReading." + error;
                }
            }
            if (message.rssiLevelReading != null && message.hasOwnProperty("rssiLevelReading")) {
                if (properties.msg === 1)
                    return "msg: multiple values";
                properties.msg = 1;
                {
                    var error = $root.Buttplug.DeviceEvent.RSSILevelReading.verify(message.rssiLevelReading);
                    if (error)
                        return "rssiLevelReading." + error;
                }
            }
            if (message.rawReading != null && message.hasOwnProperty("rawReading")) {
                if (properties.msg === 1)
                    return "msg: multiple values";
                properties.msg = 1;
                {
                    var error = $root.Buttplug.DeviceEvent.RawReading.verify(message.rawReading);
                    if (error)
                        return "rawReading." + error;
                }
            }
            return null;
        };

        /**
         * Creates a DeviceEvent message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof Buttplug.DeviceEvent
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {Buttplug.DeviceEvent} DeviceEvent
         */
        DeviceEvent.fromObject = function fromObject(object) {
            if (object instanceof $root.Buttplug.DeviceEvent)
                return object;
            var message = new $root.Buttplug.DeviceEvent();
            if (object.disconnect != null) {
                if (typeof object.disconnect !== "object")
                    throw TypeError(".Buttplug.DeviceEvent.disconnect: object expected");
                message.disconnect = $root.Buttplug.DeviceEvent.Disconnect.fromObject(object.disconnect);
            }
            if (object.batteryLevelReading != null) {
                if (typeof object.batteryLevelReading !== "object")
                    throw TypeError(".Buttplug.DeviceEvent.batteryLevelReading: object expected");
                message.batteryLevelReading = $root.Buttplug.DeviceEvent.BatteryLevelReading.fromObject(object.batteryLevelReading);
            }
            if (object.rssiLevelReading != null) {
                if (typeof object.rssiLevelReading !== "object")
                    throw TypeError(".Buttplug.DeviceEvent.rssiLevelReading: object expected");
                message.rssiLevelReading = $root.Buttplug.DeviceEvent.RSSILevelReading.fromObject(object.rssiLevelReading);
            }
            if (object.rawReading != null) {
                if (typeof object.rawReading !== "object")
                    throw TypeError(".Buttplug.DeviceEvent.rawReading: object expected");
                message.rawReading = $root.Buttplug.DeviceEvent.RawReading.fromObject(object.rawReading);
            }
            return message;
        };

        /**
         * Creates a plain object from a DeviceEvent message. Also converts values to other types if specified.
         * @function toObject
         * @memberof Buttplug.DeviceEvent
         * @static
         * @param {Buttplug.DeviceEvent} message DeviceEvent
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        DeviceEvent.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (message.disconnect != null && message.hasOwnProperty("disconnect")) {
                object.disconnect = $root.Buttplug.DeviceEvent.Disconnect.toObject(message.disconnect, options);
                if (options.oneofs)
                    object.msg = "disconnect";
            }
            if (message.batteryLevelReading != null && message.hasOwnProperty("batteryLevelReading")) {
                object.batteryLevelReading = $root.Buttplug.DeviceEvent.BatteryLevelReading.toObject(message.batteryLevelReading, options);
                if (options.oneofs)
                    object.msg = "batteryLevelReading";
            }
            if (message.rssiLevelReading != null && message.hasOwnProperty("rssiLevelReading")) {
                object.rssiLevelReading = $root.Buttplug.DeviceEvent.RSSILevelReading.toObject(message.rssiLevelReading, options);
                if (options.oneofs)
                    object.msg = "rssiLevelReading";
            }
            if (message.rawReading != null && message.hasOwnProperty("rawReading")) {
                object.rawReading = $root.Buttplug.DeviceEvent.RawReading.toObject(message.rawReading, options);
                if (options.oneofs)
                    object.msg = "rawReading";
            }
            return object;
        };

        /**
         * Converts this DeviceEvent to JSON.
         * @function toJSON
         * @memberof Buttplug.DeviceEvent
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        DeviceEvent.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        DeviceEvent.Disconnect = (function() {

            /**
             * Properties of a Disconnect.
             * @memberof Buttplug.DeviceEvent
             * @interface IDisconnect
             * @property {number|null} [index] Disconnect index
             */

            /**
             * Constructs a new Disconnect.
             * @memberof Buttplug.DeviceEvent
             * @classdesc Represents a Disconnect.
             * @implements IDisconnect
             * @constructor
             * @param {Buttplug.DeviceEvent.IDisconnect=} [properties] Properties to set
             */
            function Disconnect(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Disconnect index.
             * @member {number} index
             * @memberof Buttplug.DeviceEvent.Disconnect
             * @instance
             */
            Disconnect.prototype.index = 0;

            /**
             * Creates a new Disconnect instance using the specified properties.
             * @function create
             * @memberof Buttplug.DeviceEvent.Disconnect
             * @static
             * @param {Buttplug.DeviceEvent.IDisconnect=} [properties] Properties to set
             * @returns {Buttplug.DeviceEvent.Disconnect} Disconnect instance
             */
            Disconnect.create = function create(properties) {
                return new Disconnect(properties);
            };

            /**
             * Encodes the specified Disconnect message. Does not implicitly {@link Buttplug.DeviceEvent.Disconnect.verify|verify} messages.
             * @function encode
             * @memberof Buttplug.DeviceEvent.Disconnect
             * @static
             * @param {Buttplug.DeviceEvent.IDisconnect} message Disconnect message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Disconnect.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.index != null && Object.hasOwnProperty.call(message, "index"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.index);
                return writer;
            };

            /**
             * Encodes the specified Disconnect message, length delimited. Does not implicitly {@link Buttplug.DeviceEvent.Disconnect.verify|verify} messages.
             * @function encodeDelimited
             * @memberof Buttplug.DeviceEvent.Disconnect
             * @static
             * @param {Buttplug.DeviceEvent.IDisconnect} message Disconnect message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Disconnect.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a Disconnect message from the specified reader or buffer.
             * @function decode
             * @memberof Buttplug.DeviceEvent.Disconnect
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {Buttplug.DeviceEvent.Disconnect} Disconnect
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Disconnect.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Buttplug.DeviceEvent.Disconnect();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.index = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a Disconnect message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof Buttplug.DeviceEvent.Disconnect
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {Buttplug.DeviceEvent.Disconnect} Disconnect
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Disconnect.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a Disconnect message.
             * @function verify
             * @memberof Buttplug.DeviceEvent.Disconnect
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Disconnect.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.index != null && message.hasOwnProperty("index"))
                    if (!$util.isInteger(message.index))
                        return "index: integer expected";
                return null;
            };

            /**
             * Creates a Disconnect message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof Buttplug.DeviceEvent.Disconnect
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {Buttplug.DeviceEvent.Disconnect} Disconnect
             */
            Disconnect.fromObject = function fromObject(object) {
                if (object instanceof $root.Buttplug.DeviceEvent.Disconnect)
                    return object;
                var message = new $root.Buttplug.DeviceEvent.Disconnect();
                if (object.index != null)
                    message.index = object.index >>> 0;
                return message;
            };

            /**
             * Creates a plain object from a Disconnect message. Also converts values to other types if specified.
             * @function toObject
             * @memberof Buttplug.DeviceEvent.Disconnect
             * @static
             * @param {Buttplug.DeviceEvent.Disconnect} message Disconnect
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Disconnect.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.index = 0;
                if (message.index != null && message.hasOwnProperty("index"))
                    object.index = message.index;
                return object;
            };

            /**
             * Converts this Disconnect to JSON.
             * @function toJSON
             * @memberof Buttplug.DeviceEvent.Disconnect
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Disconnect.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return Disconnect;
        })();

        DeviceEvent.RawReading = (function() {

            /**
             * Properties of a RawReading.
             * @memberof Buttplug.DeviceEvent
             * @interface IRawReading
             * @property {number|null} [index] RawReading index
             * @property {Buttplug.Endpoint|null} [endpoint] RawReading endpoint
             * @property {Uint8Array|null} [data] RawReading data
             */

            /**
             * Constructs a new RawReading.
             * @memberof Buttplug.DeviceEvent
             * @classdesc Represents a RawReading.
             * @implements IRawReading
             * @constructor
             * @param {Buttplug.DeviceEvent.IRawReading=} [properties] Properties to set
             */
            function RawReading(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * RawReading index.
             * @member {number} index
             * @memberof Buttplug.DeviceEvent.RawReading
             * @instance
             */
            RawReading.prototype.index = 0;

            /**
             * RawReading endpoint.
             * @member {Buttplug.Endpoint} endpoint
             * @memberof Buttplug.DeviceEvent.RawReading
             * @instance
             */
            RawReading.prototype.endpoint = 0;

            /**
             * RawReading data.
             * @member {Uint8Array} data
             * @memberof Buttplug.DeviceEvent.RawReading
             * @instance
             */
            RawReading.prototype.data = $util.newBuffer([]);

            /**
             * Creates a new RawReading instance using the specified properties.
             * @function create
             * @memberof Buttplug.DeviceEvent.RawReading
             * @static
             * @param {Buttplug.DeviceEvent.IRawReading=} [properties] Properties to set
             * @returns {Buttplug.DeviceEvent.RawReading} RawReading instance
             */
            RawReading.create = function create(properties) {
                return new RawReading(properties);
            };

            /**
             * Encodes the specified RawReading message. Does not implicitly {@link Buttplug.DeviceEvent.RawReading.verify|verify} messages.
             * @function encode
             * @memberof Buttplug.DeviceEvent.RawReading
             * @static
             * @param {Buttplug.DeviceEvent.IRawReading} message RawReading message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RawReading.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.index != null && Object.hasOwnProperty.call(message, "index"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.index);
                if (message.endpoint != null && Object.hasOwnProperty.call(message, "endpoint"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.endpoint);
                if (message.data != null && Object.hasOwnProperty.call(message, "data"))
                    writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.data);
                return writer;
            };

            /**
             * Encodes the specified RawReading message, length delimited. Does not implicitly {@link Buttplug.DeviceEvent.RawReading.verify|verify} messages.
             * @function encodeDelimited
             * @memberof Buttplug.DeviceEvent.RawReading
             * @static
             * @param {Buttplug.DeviceEvent.IRawReading} message RawReading message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RawReading.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a RawReading message from the specified reader or buffer.
             * @function decode
             * @memberof Buttplug.DeviceEvent.RawReading
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {Buttplug.DeviceEvent.RawReading} RawReading
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RawReading.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Buttplug.DeviceEvent.RawReading();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.index = reader.uint32();
                        break;
                    case 2:
                        message.endpoint = reader.int32();
                        break;
                    case 3:
                        message.data = reader.bytes();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a RawReading message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof Buttplug.DeviceEvent.RawReading
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {Buttplug.DeviceEvent.RawReading} RawReading
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RawReading.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a RawReading message.
             * @function verify
             * @memberof Buttplug.DeviceEvent.RawReading
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            RawReading.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.index != null && message.hasOwnProperty("index"))
                    if (!$util.isInteger(message.index))
                        return "index: integer expected";
                if (message.endpoint != null && message.hasOwnProperty("endpoint"))
                    switch (message.endpoint) {
                    default:
                        return "endpoint: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                    case 6:
                    case 7:
                    case 8:
                    case 9:
                    case 10:
                    case 11:
                    case 12:
                    case 13:
                    case 14:
                    case 15:
                    case 16:
                    case 17:
                    case 18:
                    case 19:
                    case 20:
                    case 21:
                    case 22:
                    case 23:
                    case 24:
                    case 25:
                    case 26:
                    case 27:
                    case 28:
                    case 29:
                    case 30:
                    case 31:
                    case 32:
                    case 33:
                    case 34:
                    case 35:
                    case 36:
                    case 37:
                    case 38:
                    case 39:
                    case 40:
                    case 41:
                    case 42:
                    case 43:
                    case 44:
                        break;
                    }
                if (message.data != null && message.hasOwnProperty("data"))
                    if (!(message.data && typeof message.data.length === "number" || $util.isString(message.data)))
                        return "data: buffer expected";
                return null;
            };

            /**
             * Creates a RawReading message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof Buttplug.DeviceEvent.RawReading
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {Buttplug.DeviceEvent.RawReading} RawReading
             */
            RawReading.fromObject = function fromObject(object) {
                if (object instanceof $root.Buttplug.DeviceEvent.RawReading)
                    return object;
                var message = new $root.Buttplug.DeviceEvent.RawReading();
                if (object.index != null)
                    message.index = object.index >>> 0;
                switch (object.endpoint) {
                case "Command":
                case 0:
                    message.endpoint = 0;
                    break;
                case "Firmware":
                case 1:
                    message.endpoint = 1;
                    break;
                case "Rx":
                case 2:
                    message.endpoint = 2;
                    break;
                case "RxAccel":
                case 3:
                    message.endpoint = 3;
                    break;
                case "RxBLEBattery":
                case 4:
                    message.endpoint = 4;
                    break;
                case "RxPressure":
                case 5:
                    message.endpoint = 5;
                    break;
                case "RxTouch":
                case 6:
                    message.endpoint = 6;
                    break;
                case "Tx":
                case 7:
                    message.endpoint = 7;
                    break;
                case "TxMode":
                case 8:
                    message.endpoint = 8;
                    break;
                case "TxShock":
                case 9:
                    message.endpoint = 9;
                    break;
                case "TxVibrate":
                case 10:
                    message.endpoint = 10;
                    break;
                case "TxVendorControl":
                case 11:
                    message.endpoint = 11;
                    break;
                case "Whitelist":
                case 12:
                    message.endpoint = 12;
                    break;
                case "Generic0":
                case 13:
                    message.endpoint = 13;
                    break;
                case "Generic1":
                case 14:
                    message.endpoint = 14;
                    break;
                case "Generic2":
                case 15:
                    message.endpoint = 15;
                    break;
                case "Generic3":
                case 16:
                    message.endpoint = 16;
                    break;
                case "Generic4":
                case 17:
                    message.endpoint = 17;
                    break;
                case "Generic5":
                case 18:
                    message.endpoint = 18;
                    break;
                case "Generic6":
                case 19:
                    message.endpoint = 19;
                    break;
                case "Generic7":
                case 20:
                    message.endpoint = 20;
                    break;
                case "Generic8":
                case 21:
                    message.endpoint = 21;
                    break;
                case "Generic9":
                case 22:
                    message.endpoint = 22;
                    break;
                case "Generic10":
                case 23:
                    message.endpoint = 23;
                    break;
                case "Generic11":
                case 24:
                    message.endpoint = 24;
                    break;
                case "Generic12":
                case 25:
                    message.endpoint = 25;
                    break;
                case "Generic13":
                case 26:
                    message.endpoint = 26;
                    break;
                case "Generic14":
                case 27:
                    message.endpoint = 27;
                    break;
                case "Generic15":
                case 28:
                    message.endpoint = 28;
                    break;
                case "Generic16":
                case 29:
                    message.endpoint = 29;
                    break;
                case "Generic17":
                case 30:
                    message.endpoint = 30;
                    break;
                case "Generic18":
                case 31:
                    message.endpoint = 31;
                    break;
                case "Generic19":
                case 32:
                    message.endpoint = 32;
                    break;
                case "Generic20":
                case 33:
                    message.endpoint = 33;
                    break;
                case "Generic21":
                case 34:
                    message.endpoint = 34;
                    break;
                case "Generic22":
                case 35:
                    message.endpoint = 35;
                    break;
                case "Generic23":
                case 36:
                    message.endpoint = 36;
                    break;
                case "Generic24":
                case 37:
                    message.endpoint = 37;
                    break;
                case "Generic25":
                case 38:
                    message.endpoint = 38;
                    break;
                case "Generic26":
                case 39:
                    message.endpoint = 39;
                    break;
                case "Generic27":
                case 40:
                    message.endpoint = 40;
                    break;
                case "Generic28":
                case 41:
                    message.endpoint = 41;
                    break;
                case "Generic29":
                case 42:
                    message.endpoint = 42;
                    break;
                case "Generic30":
                case 43:
                    message.endpoint = 43;
                    break;
                case "Generic31":
                case 44:
                    message.endpoint = 44;
                    break;
                }
                if (object.data != null)
                    if (typeof object.data === "string")
                        $util.base64.decode(object.data, message.data = $util.newBuffer($util.base64.length(object.data)), 0);
                    else if (object.data.length)
                        message.data = object.data;
                return message;
            };

            /**
             * Creates a plain object from a RawReading message. Also converts values to other types if specified.
             * @function toObject
             * @memberof Buttplug.DeviceEvent.RawReading
             * @static
             * @param {Buttplug.DeviceEvent.RawReading} message RawReading
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            RawReading.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.index = 0;
                    object.endpoint = options.enums === String ? "Command" : 0;
                    if (options.bytes === String)
                        object.data = "";
                    else {
                        object.data = [];
                        if (options.bytes !== Array)
                            object.data = $util.newBuffer(object.data);
                    }
                }
                if (message.index != null && message.hasOwnProperty("index"))
                    object.index = message.index;
                if (message.endpoint != null && message.hasOwnProperty("endpoint"))
                    object.endpoint = options.enums === String ? $root.Buttplug.Endpoint[message.endpoint] : message.endpoint;
                if (message.data != null && message.hasOwnProperty("data"))
                    object.data = options.bytes === String ? $util.base64.encode(message.data, 0, message.data.length) : options.bytes === Array ? Array.prototype.slice.call(message.data) : message.data;
                return object;
            };

            /**
             * Converts this RawReading to JSON.
             * @function toJSON
             * @memberof Buttplug.DeviceEvent.RawReading
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            RawReading.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return RawReading;
        })();

        DeviceEvent.BatteryLevelReading = (function() {

            /**
             * Properties of a BatteryLevelReading.
             * @memberof Buttplug.DeviceEvent
             * @interface IBatteryLevelReading
             * @property {number|null} [index] BatteryLevelReading index
             * @property {number|null} [reading] BatteryLevelReading reading
             */

            /**
             * Constructs a new BatteryLevelReading.
             * @memberof Buttplug.DeviceEvent
             * @classdesc Represents a BatteryLevelReading.
             * @implements IBatteryLevelReading
             * @constructor
             * @param {Buttplug.DeviceEvent.IBatteryLevelReading=} [properties] Properties to set
             */
            function BatteryLevelReading(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * BatteryLevelReading index.
             * @member {number} index
             * @memberof Buttplug.DeviceEvent.BatteryLevelReading
             * @instance
             */
            BatteryLevelReading.prototype.index = 0;

            /**
             * BatteryLevelReading reading.
             * @member {number} reading
             * @memberof Buttplug.DeviceEvent.BatteryLevelReading
             * @instance
             */
            BatteryLevelReading.prototype.reading = 0;

            /**
             * Creates a new BatteryLevelReading instance using the specified properties.
             * @function create
             * @memberof Buttplug.DeviceEvent.BatteryLevelReading
             * @static
             * @param {Buttplug.DeviceEvent.IBatteryLevelReading=} [properties] Properties to set
             * @returns {Buttplug.DeviceEvent.BatteryLevelReading} BatteryLevelReading instance
             */
            BatteryLevelReading.create = function create(properties) {
                return new BatteryLevelReading(properties);
            };

            /**
             * Encodes the specified BatteryLevelReading message. Does not implicitly {@link Buttplug.DeviceEvent.BatteryLevelReading.verify|verify} messages.
             * @function encode
             * @memberof Buttplug.DeviceEvent.BatteryLevelReading
             * @static
             * @param {Buttplug.DeviceEvent.IBatteryLevelReading} message BatteryLevelReading message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BatteryLevelReading.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.index != null && Object.hasOwnProperty.call(message, "index"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.index);
                if (message.reading != null && Object.hasOwnProperty.call(message, "reading"))
                    writer.uint32(/* id 2, wireType 1 =*/17).double(message.reading);
                return writer;
            };

            /**
             * Encodes the specified BatteryLevelReading message, length delimited. Does not implicitly {@link Buttplug.DeviceEvent.BatteryLevelReading.verify|verify} messages.
             * @function encodeDelimited
             * @memberof Buttplug.DeviceEvent.BatteryLevelReading
             * @static
             * @param {Buttplug.DeviceEvent.IBatteryLevelReading} message BatteryLevelReading message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BatteryLevelReading.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a BatteryLevelReading message from the specified reader or buffer.
             * @function decode
             * @memberof Buttplug.DeviceEvent.BatteryLevelReading
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {Buttplug.DeviceEvent.BatteryLevelReading} BatteryLevelReading
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BatteryLevelReading.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Buttplug.DeviceEvent.BatteryLevelReading();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.index = reader.uint32();
                        break;
                    case 2:
                        message.reading = reader.double();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a BatteryLevelReading message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof Buttplug.DeviceEvent.BatteryLevelReading
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {Buttplug.DeviceEvent.BatteryLevelReading} BatteryLevelReading
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BatteryLevelReading.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a BatteryLevelReading message.
             * @function verify
             * @memberof Buttplug.DeviceEvent.BatteryLevelReading
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            BatteryLevelReading.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.index != null && message.hasOwnProperty("index"))
                    if (!$util.isInteger(message.index))
                        return "index: integer expected";
                if (message.reading != null && message.hasOwnProperty("reading"))
                    if (typeof message.reading !== "number")
                        return "reading: number expected";
                return null;
            };

            /**
             * Creates a BatteryLevelReading message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof Buttplug.DeviceEvent.BatteryLevelReading
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {Buttplug.DeviceEvent.BatteryLevelReading} BatteryLevelReading
             */
            BatteryLevelReading.fromObject = function fromObject(object) {
                if (object instanceof $root.Buttplug.DeviceEvent.BatteryLevelReading)
                    return object;
                var message = new $root.Buttplug.DeviceEvent.BatteryLevelReading();
                if (object.index != null)
                    message.index = object.index >>> 0;
                if (object.reading != null)
                    message.reading = Number(object.reading);
                return message;
            };

            /**
             * Creates a plain object from a BatteryLevelReading message. Also converts values to other types if specified.
             * @function toObject
             * @memberof Buttplug.DeviceEvent.BatteryLevelReading
             * @static
             * @param {Buttplug.DeviceEvent.BatteryLevelReading} message BatteryLevelReading
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            BatteryLevelReading.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.index = 0;
                    object.reading = 0;
                }
                if (message.index != null && message.hasOwnProperty("index"))
                    object.index = message.index;
                if (message.reading != null && message.hasOwnProperty("reading"))
                    object.reading = options.json && !isFinite(message.reading) ? String(message.reading) : message.reading;
                return object;
            };

            /**
             * Converts this BatteryLevelReading to JSON.
             * @function toJSON
             * @memberof Buttplug.DeviceEvent.BatteryLevelReading
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            BatteryLevelReading.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return BatteryLevelReading;
        })();

        DeviceEvent.RSSILevelReading = (function() {

            /**
             * Properties of a RSSILevelReading.
             * @memberof Buttplug.DeviceEvent
             * @interface IRSSILevelReading
             * @property {number|null} [index] RSSILevelReading index
             * @property {number|null} [reading] RSSILevelReading reading
             */

            /**
             * Constructs a new RSSILevelReading.
             * @memberof Buttplug.DeviceEvent
             * @classdesc Represents a RSSILevelReading.
             * @implements IRSSILevelReading
             * @constructor
             * @param {Buttplug.DeviceEvent.IRSSILevelReading=} [properties] Properties to set
             */
            function RSSILevelReading(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * RSSILevelReading index.
             * @member {number} index
             * @memberof Buttplug.DeviceEvent.RSSILevelReading
             * @instance
             */
            RSSILevelReading.prototype.index = 0;

            /**
             * RSSILevelReading reading.
             * @member {number} reading
             * @memberof Buttplug.DeviceEvent.RSSILevelReading
             * @instance
             */
            RSSILevelReading.prototype.reading = 0;

            /**
             * Creates a new RSSILevelReading instance using the specified properties.
             * @function create
             * @memberof Buttplug.DeviceEvent.RSSILevelReading
             * @static
             * @param {Buttplug.DeviceEvent.IRSSILevelReading=} [properties] Properties to set
             * @returns {Buttplug.DeviceEvent.RSSILevelReading} RSSILevelReading instance
             */
            RSSILevelReading.create = function create(properties) {
                return new RSSILevelReading(properties);
            };

            /**
             * Encodes the specified RSSILevelReading message. Does not implicitly {@link Buttplug.DeviceEvent.RSSILevelReading.verify|verify} messages.
             * @function encode
             * @memberof Buttplug.DeviceEvent.RSSILevelReading
             * @static
             * @param {Buttplug.DeviceEvent.IRSSILevelReading} message RSSILevelReading message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RSSILevelReading.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.index != null && Object.hasOwnProperty.call(message, "index"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.index);
                if (message.reading != null && Object.hasOwnProperty.call(message, "reading"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.reading);
                return writer;
            };

            /**
             * Encodes the specified RSSILevelReading message, length delimited. Does not implicitly {@link Buttplug.DeviceEvent.RSSILevelReading.verify|verify} messages.
             * @function encodeDelimited
             * @memberof Buttplug.DeviceEvent.RSSILevelReading
             * @static
             * @param {Buttplug.DeviceEvent.IRSSILevelReading} message RSSILevelReading message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RSSILevelReading.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a RSSILevelReading message from the specified reader or buffer.
             * @function decode
             * @memberof Buttplug.DeviceEvent.RSSILevelReading
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {Buttplug.DeviceEvent.RSSILevelReading} RSSILevelReading
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RSSILevelReading.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Buttplug.DeviceEvent.RSSILevelReading();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.index = reader.uint32();
                        break;
                    case 2:
                        message.reading = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a RSSILevelReading message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof Buttplug.DeviceEvent.RSSILevelReading
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {Buttplug.DeviceEvent.RSSILevelReading} RSSILevelReading
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RSSILevelReading.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a RSSILevelReading message.
             * @function verify
             * @memberof Buttplug.DeviceEvent.RSSILevelReading
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            RSSILevelReading.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.index != null && message.hasOwnProperty("index"))
                    if (!$util.isInteger(message.index))
                        return "index: integer expected";
                if (message.reading != null && message.hasOwnProperty("reading"))
                    if (!$util.isInteger(message.reading))
                        return "reading: integer expected";
                return null;
            };

            /**
             * Creates a RSSILevelReading message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof Buttplug.DeviceEvent.RSSILevelReading
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {Buttplug.DeviceEvent.RSSILevelReading} RSSILevelReading
             */
            RSSILevelReading.fromObject = function fromObject(object) {
                if (object instanceof $root.Buttplug.DeviceEvent.RSSILevelReading)
                    return object;
                var message = new $root.Buttplug.DeviceEvent.RSSILevelReading();
                if (object.index != null)
                    message.index = object.index >>> 0;
                if (object.reading != null)
                    message.reading = object.reading | 0;
                return message;
            };

            /**
             * Creates a plain object from a RSSILevelReading message. Also converts values to other types if specified.
             * @function toObject
             * @memberof Buttplug.DeviceEvent.RSSILevelReading
             * @static
             * @param {Buttplug.DeviceEvent.RSSILevelReading} message RSSILevelReading
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            RSSILevelReading.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.index = 0;
                    object.reading = 0;
                }
                if (message.index != null && message.hasOwnProperty("index"))
                    object.index = message.index;
                if (message.reading != null && message.hasOwnProperty("reading"))
                    object.reading = message.reading;
                return object;
            };

            /**
             * Converts this RSSILevelReading to JSON.
             * @function toJSON
             * @memberof Buttplug.DeviceEvent.RSSILevelReading
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            RSSILevelReading.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return RSSILevelReading;
        })();

        return DeviceEvent;
    })();

    Buttplug.ButtplugFFIServerMessage = (function() {

        /**
         * Properties of a ButtplugFFIServerMessage.
         * @memberof Buttplug
         * @interface IButtplugFFIServerMessage
         * @property {number|null} [id] ButtplugFFIServerMessage id
         * @property {Buttplug.ButtplugFFIServerMessage.IFFIMessage|null} [message] ButtplugFFIServerMessage message
         */

        /**
         * Constructs a new ButtplugFFIServerMessage.
         * @memberof Buttplug
         * @classdesc Represents a ButtplugFFIServerMessage.
         * @implements IButtplugFFIServerMessage
         * @constructor
         * @param {Buttplug.IButtplugFFIServerMessage=} [properties] Properties to set
         */
        function ButtplugFFIServerMessage(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ButtplugFFIServerMessage id.
         * @member {number} id
         * @memberof Buttplug.ButtplugFFIServerMessage
         * @instance
         */
        ButtplugFFIServerMessage.prototype.id = 0;

        /**
         * ButtplugFFIServerMessage message.
         * @member {Buttplug.ButtplugFFIServerMessage.IFFIMessage|null|undefined} message
         * @memberof Buttplug.ButtplugFFIServerMessage
         * @instance
         */
        ButtplugFFIServerMessage.prototype.message = null;

        /**
         * Creates a new ButtplugFFIServerMessage instance using the specified properties.
         * @function create
         * @memberof Buttplug.ButtplugFFIServerMessage
         * @static
         * @param {Buttplug.IButtplugFFIServerMessage=} [properties] Properties to set
         * @returns {Buttplug.ButtplugFFIServerMessage} ButtplugFFIServerMessage instance
         */
        ButtplugFFIServerMessage.create = function create(properties) {
            return new ButtplugFFIServerMessage(properties);
        };

        /**
         * Encodes the specified ButtplugFFIServerMessage message. Does not implicitly {@link Buttplug.ButtplugFFIServerMessage.verify|verify} messages.
         * @function encode
         * @memberof Buttplug.ButtplugFFIServerMessage
         * @static
         * @param {Buttplug.IButtplugFFIServerMessage} message ButtplugFFIServerMessage message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ButtplugFFIServerMessage.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.id != null && Object.hasOwnProperty.call(message, "id"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.id);
            if (message.message != null && Object.hasOwnProperty.call(message, "message"))
                $root.Buttplug.ButtplugFFIServerMessage.FFIMessage.encode(message.message, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified ButtplugFFIServerMessage message, length delimited. Does not implicitly {@link Buttplug.ButtplugFFIServerMessage.verify|verify} messages.
         * @function encodeDelimited
         * @memberof Buttplug.ButtplugFFIServerMessage
         * @static
         * @param {Buttplug.IButtplugFFIServerMessage} message ButtplugFFIServerMessage message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ButtplugFFIServerMessage.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ButtplugFFIServerMessage message from the specified reader or buffer.
         * @function decode
         * @memberof Buttplug.ButtplugFFIServerMessage
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {Buttplug.ButtplugFFIServerMessage} ButtplugFFIServerMessage
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ButtplugFFIServerMessage.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Buttplug.ButtplugFFIServerMessage();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.id = reader.uint32();
                    break;
                case 2:
                    message.message = $root.Buttplug.ButtplugFFIServerMessage.FFIMessage.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ButtplugFFIServerMessage message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof Buttplug.ButtplugFFIServerMessage
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {Buttplug.ButtplugFFIServerMessage} ButtplugFFIServerMessage
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ButtplugFFIServerMessage.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ButtplugFFIServerMessage message.
         * @function verify
         * @memberof Buttplug.ButtplugFFIServerMessage
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ButtplugFFIServerMessage.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.id != null && message.hasOwnProperty("id"))
                if (!$util.isInteger(message.id))
                    return "id: integer expected";
            if (message.message != null && message.hasOwnProperty("message")) {
                var error = $root.Buttplug.ButtplugFFIServerMessage.FFIMessage.verify(message.message);
                if (error)
                    return "message." + error;
            }
            return null;
        };

        /**
         * Creates a ButtplugFFIServerMessage message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof Buttplug.ButtplugFFIServerMessage
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {Buttplug.ButtplugFFIServerMessage} ButtplugFFIServerMessage
         */
        ButtplugFFIServerMessage.fromObject = function fromObject(object) {
            if (object instanceof $root.Buttplug.ButtplugFFIServerMessage)
                return object;
            var message = new $root.Buttplug.ButtplugFFIServerMessage();
            if (object.id != null)
                message.id = object.id >>> 0;
            if (object.message != null) {
                if (typeof object.message !== "object")
                    throw TypeError(".Buttplug.ButtplugFFIServerMessage.message: object expected");
                message.message = $root.Buttplug.ButtplugFFIServerMessage.FFIMessage.fromObject(object.message);
            }
            return message;
        };

        /**
         * Creates a plain object from a ButtplugFFIServerMessage message. Also converts values to other types if specified.
         * @function toObject
         * @memberof Buttplug.ButtplugFFIServerMessage
         * @static
         * @param {Buttplug.ButtplugFFIServerMessage} message ButtplugFFIServerMessage
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ButtplugFFIServerMessage.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.id = 0;
                object.message = null;
            }
            if (message.id != null && message.hasOwnProperty("id"))
                object.id = message.id;
            if (message.message != null && message.hasOwnProperty("message"))
                object.message = $root.Buttplug.ButtplugFFIServerMessage.FFIMessage.toObject(message.message, options);
            return object;
        };

        /**
         * Converts this ButtplugFFIServerMessage to JSON.
         * @function toJSON
         * @memberof Buttplug.ButtplugFFIServerMessage
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ButtplugFFIServerMessage.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        ButtplugFFIServerMessage.FFIMessage = (function() {

            /**
             * Properties of a FFIMessage.
             * @memberof Buttplug.ButtplugFFIServerMessage
             * @interface IFFIMessage
             * @property {Buttplug.IServerMessage|null} [serverMessage] FFIMessage serverMessage
             * @property {Buttplug.IDeviceEvent|null} [deviceEvent] FFIMessage deviceEvent
             */

            /**
             * Constructs a new FFIMessage.
             * @memberof Buttplug.ButtplugFFIServerMessage
             * @classdesc Represents a FFIMessage.
             * @implements IFFIMessage
             * @constructor
             * @param {Buttplug.ButtplugFFIServerMessage.IFFIMessage=} [properties] Properties to set
             */
            function FFIMessage(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * FFIMessage serverMessage.
             * @member {Buttplug.IServerMessage|null|undefined} serverMessage
             * @memberof Buttplug.ButtplugFFIServerMessage.FFIMessage
             * @instance
             */
            FFIMessage.prototype.serverMessage = null;

            /**
             * FFIMessage deviceEvent.
             * @member {Buttplug.IDeviceEvent|null|undefined} deviceEvent
             * @memberof Buttplug.ButtplugFFIServerMessage.FFIMessage
             * @instance
             */
            FFIMessage.prototype.deviceEvent = null;

            // OneOf field names bound to virtual getters and setters
            var $oneOfFields;

            /**
             * FFIMessage msg.
             * @member {"serverMessage"|"deviceEvent"|undefined} msg
             * @memberof Buttplug.ButtplugFFIServerMessage.FFIMessage
             * @instance
             */
            Object.defineProperty(FFIMessage.prototype, "msg", {
                get: $util.oneOfGetter($oneOfFields = ["serverMessage", "deviceEvent"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            /**
             * Creates a new FFIMessage instance using the specified properties.
             * @function create
             * @memberof Buttplug.ButtplugFFIServerMessage.FFIMessage
             * @static
             * @param {Buttplug.ButtplugFFIServerMessage.IFFIMessage=} [properties] Properties to set
             * @returns {Buttplug.ButtplugFFIServerMessage.FFIMessage} FFIMessage instance
             */
            FFIMessage.create = function create(properties) {
                return new FFIMessage(properties);
            };

            /**
             * Encodes the specified FFIMessage message. Does not implicitly {@link Buttplug.ButtplugFFIServerMessage.FFIMessage.verify|verify} messages.
             * @function encode
             * @memberof Buttplug.ButtplugFFIServerMessage.FFIMessage
             * @static
             * @param {Buttplug.ButtplugFFIServerMessage.IFFIMessage} message FFIMessage message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FFIMessage.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.serverMessage != null && Object.hasOwnProperty.call(message, "serverMessage"))
                    $root.Buttplug.ServerMessage.encode(message.serverMessage, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.deviceEvent != null && Object.hasOwnProperty.call(message, "deviceEvent"))
                    $root.Buttplug.DeviceEvent.encode(message.deviceEvent, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified FFIMessage message, length delimited. Does not implicitly {@link Buttplug.ButtplugFFIServerMessage.FFIMessage.verify|verify} messages.
             * @function encodeDelimited
             * @memberof Buttplug.ButtplugFFIServerMessage.FFIMessage
             * @static
             * @param {Buttplug.ButtplugFFIServerMessage.IFFIMessage} message FFIMessage message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FFIMessage.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a FFIMessage message from the specified reader or buffer.
             * @function decode
             * @memberof Buttplug.ButtplugFFIServerMessage.FFIMessage
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {Buttplug.ButtplugFFIServerMessage.FFIMessage} FFIMessage
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FFIMessage.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Buttplug.ButtplugFFIServerMessage.FFIMessage();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.serverMessage = $root.Buttplug.ServerMessage.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.deviceEvent = $root.Buttplug.DeviceEvent.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a FFIMessage message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof Buttplug.ButtplugFFIServerMessage.FFIMessage
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {Buttplug.ButtplugFFIServerMessage.FFIMessage} FFIMessage
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FFIMessage.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a FFIMessage message.
             * @function verify
             * @memberof Buttplug.ButtplugFFIServerMessage.FFIMessage
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            FFIMessage.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                var properties = {};
                if (message.serverMessage != null && message.hasOwnProperty("serverMessage")) {
                    properties.msg = 1;
                    {
                        var error = $root.Buttplug.ServerMessage.verify(message.serverMessage);
                        if (error)
                            return "serverMessage." + error;
                    }
                }
                if (message.deviceEvent != null && message.hasOwnProperty("deviceEvent")) {
                    if (properties.msg === 1)
                        return "msg: multiple values";
                    properties.msg = 1;
                    {
                        var error = $root.Buttplug.DeviceEvent.verify(message.deviceEvent);
                        if (error)
                            return "deviceEvent." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a FFIMessage message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof Buttplug.ButtplugFFIServerMessage.FFIMessage
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {Buttplug.ButtplugFFIServerMessage.FFIMessage} FFIMessage
             */
            FFIMessage.fromObject = function fromObject(object) {
                if (object instanceof $root.Buttplug.ButtplugFFIServerMessage.FFIMessage)
                    return object;
                var message = new $root.Buttplug.ButtplugFFIServerMessage.FFIMessage();
                if (object.serverMessage != null) {
                    if (typeof object.serverMessage !== "object")
                        throw TypeError(".Buttplug.ButtplugFFIServerMessage.FFIMessage.serverMessage: object expected");
                    message.serverMessage = $root.Buttplug.ServerMessage.fromObject(object.serverMessage);
                }
                if (object.deviceEvent != null) {
                    if (typeof object.deviceEvent !== "object")
                        throw TypeError(".Buttplug.ButtplugFFIServerMessage.FFIMessage.deviceEvent: object expected");
                    message.deviceEvent = $root.Buttplug.DeviceEvent.fromObject(object.deviceEvent);
                }
                return message;
            };

            /**
             * Creates a plain object from a FFIMessage message. Also converts values to other types if specified.
             * @function toObject
             * @memberof Buttplug.ButtplugFFIServerMessage.FFIMessage
             * @static
             * @param {Buttplug.ButtplugFFIServerMessage.FFIMessage} message FFIMessage
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            FFIMessage.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (message.serverMessage != null && message.hasOwnProperty("serverMessage")) {
                    object.serverMessage = $root.Buttplug.ServerMessage.toObject(message.serverMessage, options);
                    if (options.oneofs)
                        object.msg = "serverMessage";
                }
                if (message.deviceEvent != null && message.hasOwnProperty("deviceEvent")) {
                    object.deviceEvent = $root.Buttplug.DeviceEvent.toObject(message.deviceEvent, options);
                    if (options.oneofs)
                        object.msg = "deviceEvent";
                }
                return object;
            };

            /**
             * Converts this FFIMessage to JSON.
             * @function toJSON
             * @memberof Buttplug.ButtplugFFIServerMessage.FFIMessage
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            FFIMessage.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return FFIMessage;
        })();

        return ButtplugFFIServerMessage;
    })();

    return Buttplug;
})();

module.exports = $root;


/***/ }),

/***/ "./src/client.ts":
/*!***********************!*\
  !*** ./src/client.ts ***!
  \***********************/
/*! exports provided: ButtplugClient */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ButtplugClient", function() { return ButtplugClient; });
/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! events */ "./node_modules/events/events.js");
/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(events__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _buttplug_ffi__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./buttplug_ffi */ "./src/buttplug_ffi.js");
/* harmony import */ var _buttplug_ffi__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_buttplug_ffi__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./errors */ "./src/errors.ts");
/* harmony import */ var _ffi__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ffi */ "./src/ffi.ts");
/* harmony import */ var _connectors__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./connectors */ "./src/connectors.ts");
/* harmony import */ var _sorter__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./sorter */ "./src/sorter.ts");
/* harmony import */ var _device__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./device */ "./src/device.ts");
/*!
 * Buttplug JS Source Code File - Visit https://buttplug.io for more info about
 * the project. Licensed under the BSD 3-Clause license. See LICENSE file in the
 * project root for full license information.
 *
 * @copyright Copyright (c) Nonpolynomial Labs LLC. All rights reserved.
 */








class ButtplugClient extends events__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"] {
    constructor(clientName = "Generic Buttplug Client") {
        super();
        this._devices = new Map();
        // This will either be null, or our WASM heap pointer for our connected client object.
        this._clientPtr = undefined;
        this._isScanning = false;
        this._connected = false;
        this._sorter = new _sorter__WEBPACK_IMPORTED_MODULE_5__["ButtplugMessageSorter"]();
        this.connect = async (options) => {
            if (this._connected) {
                throw new _errors__WEBPACK_IMPORTED_MODULE_2__["ButtplugClientConnectorError"]("Client already connected.");
            }
            if (options instanceof _connectors__WEBPACK_IMPORTED_MODULE_4__["ButtplugEmbeddedConnectorOptions"]) {
                await Object(_ffi__WEBPACK_IMPORTED_MODULE_3__["connectEmbedded"])(this._sorter, this._clientPtr, options);
            }
            else if (options instanceof _connectors__WEBPACK_IMPORTED_MODULE_4__["ButtplugWebsocketConnectorOptions"]) {
                await Object(_ffi__WEBPACK_IMPORTED_MODULE_3__["connectWebsocket"])(this._sorter, this._clientPtr, options);
            }
            else {
                throw new _errors__WEBPACK_IMPORTED_MODULE_2__["ButtplugClientConnectorError"]("Invalid connector type.");
            }
            this._connected = true;
        };
        this.disconnect = async () => {
            if (!this._clientPtr) {
                throw new _errors__WEBPACK_IMPORTED_MODULE_2__["ButtplugClientConnectorError"]("Not connected.");
            }
            await Object(_ffi__WEBPACK_IMPORTED_MODULE_3__["disconnect"])(this._sorter, this._clientPtr);
        };
        this.startScanning = async () => {
            if (!this._connected) {
                throw new _errors__WEBPACK_IMPORTED_MODULE_2__["ButtplugClientConnectorError"]("Not connected.");
            }
            this._isScanning = true;
            await Object(_ffi__WEBPACK_IMPORTED_MODULE_3__["startScanning"])(this._sorter, this._clientPtr);
        };
        this.stopScanning = async () => {
            if (!this._connected) {
                throw new _errors__WEBPACK_IMPORTED_MODULE_2__["ButtplugClientConnectorError"]("Not connected.");
            }
            this._isScanning = false;
            await Object(_ffi__WEBPACK_IMPORTED_MODULE_3__["stopScanning"])(this._sorter, this._clientPtr);
        };
        this.stopAllDevices = async () => {
            if (!this._connected) {
                throw new _errors__WEBPACK_IMPORTED_MODULE_2__["ButtplugClientConnectorError"]("Not connected.");
            }
            await Object(_ffi__WEBPACK_IMPORTED_MODULE_3__["stopAllDevices"])(this._sorter, this._clientPtr);
        };
        this.sorterCallback = (buf) => {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
            const msg = _buttplug_ffi__WEBPACK_IMPORTED_MODULE_1__["Buttplug"].ButtplugFFIServerMessage.decode(buf);
            if (msg.id > 0) {
                this._sorter.ParseIncomingMessages(msg);
                return;
            }
            if ((_b = (_a = msg.message) === null || _a === void 0 ? void 0 : _a.serverMessage) === null || _b === void 0 ? void 0 : _b.deviceAdded) {
                const addedMsg = (_d = (_c = msg.message) === null || _c === void 0 ? void 0 : _c.serverMessage) === null || _d === void 0 ? void 0 : _d.deviceAdded;
                const devicePtr = Object(_ffi__WEBPACK_IMPORTED_MODULE_3__["createDevicePtr"])(this._clientPtr, addedMsg.index);
                const device = new _device__WEBPACK_IMPORTED_MODULE_6__["ButtplugClientDevice"](devicePtr, this._sorter, addedMsg.index, addedMsg.name, addedMsg.messageAttributes);
                this._devices.set(addedMsg.index, device);
                this.emit("deviceadded", device);
                return;
            }
            if ((_f = (_e = msg.message) === null || _e === void 0 ? void 0 : _e.serverMessage) === null || _f === void 0 ? void 0 : _f.deviceRemoved) {
                const removedMsg = (_h = (_g = msg.message) === null || _g === void 0 ? void 0 : _g.serverMessage) === null || _h === void 0 ? void 0 : _h.deviceRemoved;
                if (this._devices.has(removedMsg.index)) {
                    const removedDevice = this._devices.get(removedMsg.index);
                    removedDevice === null || removedDevice === void 0 ? void 0 : removedDevice.emitDisconnected();
                    this._devices.delete(removedMsg.index);
                    this.emit("deviceremoved", removedDevice);
                }
                return;
            }
            if ((_k = (_j = msg.message) === null || _j === void 0 ? void 0 : _j.serverMessage) === null || _k === void 0 ? void 0 : _k.scanningFinished) {
                this._isScanning = false;
                this.emit("scanningfinished");
                return;
            }
            if ((_m = (_l = msg.message) === null || _l === void 0 ? void 0 : _l.serverMessage) === null || _m === void 0 ? void 0 : _m.disconnect) {
                this._connected = false;
                this.emit("serverdisconnect");
            }
        };
        this._clientName = clientName;
        this._clientPtr = Object(_ffi__WEBPACK_IMPORTED_MODULE_3__["createClientPtr"])(this.sorterCallback, clientName);
    }
    get Connected() {
        return this._connected;
    }
    get Devices() {
        // While this function doesn't actually send a message, if we don't have a
        // connector, we shouldn't have devices.
        this.CheckConnector();
        const devices = [];
        this._devices.forEach((d, i) => {
            devices.push(d);
        });
        return devices;
    }
    get isScanning() {
        return this._isScanning;
    }
    CheckConnector() {
        if (!this.Connected) {
            throw new _errors__WEBPACK_IMPORTED_MODULE_2__["ButtplugClientConnectorError"]("ButtplugClient not connected");
        }
    }
}


/***/ }),

/***/ "./src/connectors.ts":
/*!***************************!*\
  !*** ./src/connectors.ts ***!
  \***************************/
/*! exports provided: ButtplugEmbeddedConnectorOptions, ButtplugWebsocketConnectorOptions */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ButtplugEmbeddedConnectorOptions", function() { return ButtplugEmbeddedConnectorOptions; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ButtplugWebsocketConnectorOptions", function() { return ButtplugWebsocketConnectorOptions; });
class ButtplugEmbeddedConnectorOptions {
    constructor() {
        this.ServerName = "Buttplug WASM Embedded Server";
        // Empty string means ignore.
        this.DeviceConfigJSON = "";
        // Empty string means ignore.
        this.UserDeviceConfigJSON = "";
        // 0 here means all device.
        this.DeviceCommunicationManagerTypes = 0;
        // Require opt-in on raw messages.
        this.AllowRawMessages = false;
        this.MaxPingTime = 0;
    }
}
class ButtplugWebsocketConnectorOptions {
    constructor() {
        // Default to the insecure port.
        this.Address = "ws://127.0.0.1:12345";
    }
}


/***/ }),

/***/ "./src/device.ts":
/*!***********************!*\
  !*** ./src/device.ts ***!
  \***********************/
/*! exports provided: ButtplugDeviceMessageType, MessageAttributes, VibrationCmd, RotationCmd, VectorCmd, ButtplugClientDevice */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ButtplugDeviceMessageType", function() { return ButtplugDeviceMessageType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MessageAttributes", function() { return MessageAttributes; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VibrationCmd", function() { return VibrationCmd; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RotationCmd", function() { return RotationCmd; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VectorCmd", function() { return VectorCmd; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ButtplugClientDevice", function() { return ButtplugClientDevice; });
/* harmony import */ var _buttplug_ffi__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./buttplug_ffi */ "./src/buttplug_ffi.js");
/* harmony import */ var _buttplug_ffi__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_buttplug_ffi__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./errors */ "./src/errors.ts");
/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! events */ "./node_modules/events/events.js");
/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(events__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _ffi__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ffi */ "./src/ffi.ts");
/*!
 * Buttplug JS Source Code File - Visit https://buttplug.io for more info about
 * the project. Licensed under the BSD 3-Clause license. See LICENSE file in the
 * project root for full license information.
 *
 * @copyright Copyright (c) Nonpolynomial Labs LLC. All rights reserved.
 */





// Re-export the protobuf enum, so we don't require users to have to know the
// full resolution path.
var ButtplugDeviceMessageType = _buttplug_ffi__WEBPACK_IMPORTED_MODULE_0__["Buttplug"].ServerMessage.MessageAttributeType;
class MessageAttributes {
    constructor(attributes) {
        this.featureCount = attributes.featureCount;
        this.stepCount = attributes.stepCount;
        this.maxDuration = attributes.maxDuration;
        this.endpoints = attributes.endpoints;
    }
}
class VibrationCmd {
    constructor(index, speed) {
        this.Index = index;
        this.Speed = speed;
    }
}
class RotationCmd {
    constructor(index, speed, clockwise) {
        this.Index = index;
        this.Speed = speed;
        this.Clockwise = clockwise;
    }
}
class VectorCmd {
    constructor(index, duration, position) {
        this.Index = index;
        this.Duration = duration;
        this.Position = position;
    }
}
/**
 * Represents an abstract device, capable of taking certain kinds of messages.
 */
class ButtplugClientDevice extends events__WEBPACK_IMPORTED_MODULE_2__["EventEmitter"] {
    /**
     * @param _index Index of the device, as created by the device manager.
     * @param _name Name of the device.
     * @param allowedMsgs Buttplug messages the device can receive.
     */
    constructor(devicePtr, sorter, index, name, allowedMsgsObj) {
        super();
        this._messageAttributes = new Map();
        this._devicePtr = devicePtr;
        this._sorter = sorter;
        this._index = index;
        this._name = name;
        for (let attributes of allowedMsgsObj) {
            this._messageAttributes.set(attributes.messageType, new MessageAttributes(attributes));
        }
    }
    /**
     * Return the name of the device.
     */
    get Name() {
        return this._name;
    }
    /**
     * Return the index of the device.
     */
    get Index() {
        return this._index;
    }
    /**
     * Return a list of message types the device accepts.
     */
    get AllowedMessages() {
        return Array.from(this._messageAttributes.keys());
    }
    /**
     * Return the message attributes related to the given message
     */
    messageAttributes(messageName) {
        return this._messageAttributes.get(messageName);
    }
    checkAllowedMessageType(messageType) {
        if (!this._messageAttributes.has(messageType)) {
            throw new _errors__WEBPACK_IMPORTED_MODULE_1__["ButtplugDeviceError"](`Message ${ButtplugDeviceMessageType[messageType]} does not exist on device ${this._name}`);
        }
    }
    async vibrate(speeds) {
        this.checkAllowedMessageType(ButtplugDeviceMessageType.VibrateCmd);
        let msgSpeeds;
        if (typeof (speeds) === "number") {
            // We can skip the check here since we're building the command array ourselves.
            const features = this._messageAttributes.get(ButtplugDeviceMessageType.VibrateCmd).featureCount;
            msgSpeeds = Array.from({ length: features }, (_, i) => _buttplug_ffi__WEBPACK_IMPORTED_MODULE_0__["Buttplug"].DeviceMessage.VibrateComponent.create({
                index: i,
                speed: speeds,
            }));
        }
        else if (Array.isArray(speeds) && speeds.every(x => typeof (x) === "number")) {
            msgSpeeds = speeds.map((x, index) => _buttplug_ffi__WEBPACK_IMPORTED_MODULE_0__["Buttplug"].DeviceMessage.VibrateComponent.create({
                index: index,
                speed: x
            }));
        }
        else if (Array.isArray(speeds) && speeds.every(x => x instanceof VibrationCmd)) {
            msgSpeeds = speeds.map(x => _buttplug_ffi__WEBPACK_IMPORTED_MODULE_0__["Buttplug"].DeviceMessage.VibrateComponent.create({
                index: x.Index,
                speed: x.Speed
            }));
        }
        else {
            throw new _errors__WEBPACK_IMPORTED_MODULE_1__["ButtplugDeviceError"]("vibrate can only take numbers or arrays of numbers or VibrationCmds.");
        }
        await Object(_ffi__WEBPACK_IMPORTED_MODULE_3__["vibrate"])(this._sorter, this._devicePtr, msgSpeeds);
    }
    async rotate(speeds, clockwise) {
        this.checkAllowedMessageType(ButtplugDeviceMessageType.RotateCmd);
        let msgRotations;
        if (typeof (speeds) === "number" && clockwise !== undefined) {
            // We can skip the check here since we're building the command array ourselves.
            const features = this._messageAttributes.get(ButtplugDeviceMessageType.RotateCmd).featureCount;
            msgRotations = Array.from({ length: features }, (_, i) => _buttplug_ffi__WEBPACK_IMPORTED_MODULE_0__["Buttplug"].DeviceMessage.RotateComponent.create({
                index: i,
                speed: speeds,
                clockwise: clockwise
            }));
        }
        else if (Array.isArray(speeds) && speeds.every(x => x instanceof RotationCmd)) {
            msgRotations = speeds.map(x => _buttplug_ffi__WEBPACK_IMPORTED_MODULE_0__["Buttplug"].DeviceMessage.RotateComponent.create({
                index: x.Index,
                speed: x.Speed,
                clockwise: x.Clockwise
            }));
        }
        else {
            throw new _errors__WEBPACK_IMPORTED_MODULE_1__["ButtplugDeviceError"]("rotate can only take number/boolean or arrays of RotateCmds.");
        }
        await Object(_ffi__WEBPACK_IMPORTED_MODULE_3__["rotate"])(this._sorter, this._devicePtr, msgRotations);
    }
    async linear(position, duration) {
        this.checkAllowedMessageType(ButtplugDeviceMessageType.LinearCmd);
        let msgVectors;
        if (typeof (position) === "number" && duration !== undefined) {
            // We can skip the check here since we're building the command array ourselves.
            const features = this._messageAttributes.get(ButtplugDeviceMessageType.LinearCmd).featureCount;
            msgVectors = Array.from({ length: features }, (_, i) => _buttplug_ffi__WEBPACK_IMPORTED_MODULE_0__["Buttplug"].DeviceMessage.LinearComponent.create({
                index: i,
                position: position,
                duration: duration
            }));
        }
        else if (Array.isArray(position) && position.every(x => x instanceof VectorCmd)) {
            msgVectors = position.map(x => _buttplug_ffi__WEBPACK_IMPORTED_MODULE_0__["Buttplug"].DeviceMessage.LinearComponent.create({
                index: x.Index,
                position: x.Position,
                duration: x.Duration
            }));
        }
        else {
            throw new _errors__WEBPACK_IMPORTED_MODULE_1__["ButtplugDeviceError"]("linear can only take number/number or arrays of VectorCmds.");
        }
        await Object(_ffi__WEBPACK_IMPORTED_MODULE_3__["linear"])(this._sorter, this._devicePtr, msgVectors);
    }
    async batteryLevel() {
        var _a, _b, _c, _d;
        this.checkAllowedMessageType(ButtplugDeviceMessageType.BatteryLevelCmd);
        let batteryMsg = await Object(_ffi__WEBPACK_IMPORTED_MODULE_3__["batteryLevel"])(this._sorter, this._devicePtr);
        if ((_b = (_a = batteryMsg.message) === null || _a === void 0 ? void 0 : _a.deviceEvent) === null || _b === void 0 ? void 0 : _b.batteryLevelReading) {
            let reading = (_d = (_c = batteryMsg.message) === null || _c === void 0 ? void 0 : _c.deviceEvent) === null || _d === void 0 ? void 0 : _d.batteryLevelReading;
            return reading.reading;
        }
        throw new _errors__WEBPACK_IMPORTED_MODULE_1__["ButtplugDeviceError"]("Wrong reply message received for batteryLevel: " + batteryMsg);
    }
    async rssiLevel() {
        var _a, _b, _c, _d;
        this.checkAllowedMessageType(ButtplugDeviceMessageType.RSSILevelCmd);
        let rssiMsg = await Object(_ffi__WEBPACK_IMPORTED_MODULE_3__["rssiLevel"])(this._sorter, this._devicePtr);
        if ((_b = (_a = rssiMsg.message) === null || _a === void 0 ? void 0 : _a.deviceEvent) === null || _b === void 0 ? void 0 : _b.rssiLevelReading) {
            return (_d = (_c = rssiMsg.message) === null || _c === void 0 ? void 0 : _c.deviceEvent) === null || _d === void 0 ? void 0 : _d.rssiLevelReading.reading;
        }
        throw new _errors__WEBPACK_IMPORTED_MODULE_1__["ButtplugDeviceError"]("Wrong reply message received for rssiLevel: " + rssiMsg);
    }
    async rawRead(endpoint, expectedLength, timeout) {
        var _a, _b;
        this.checkAllowedMessageType(ButtplugDeviceMessageType.RawReadCmd);
        let readingMsg = await Object(_ffi__WEBPACK_IMPORTED_MODULE_3__["rawRead"])(this._sorter, this._devicePtr, endpoint, expectedLength, timeout);
        if ((_b = (_a = readingMsg.message) === null || _a === void 0 ? void 0 : _a.deviceEvent) === null || _b === void 0 ? void 0 : _b.rawReading) {
            return readingMsg.message.deviceEvent.rawReading.data;
        }
        throw new _errors__WEBPACK_IMPORTED_MODULE_1__["ButtplugDeviceError"]("Wrong reply message received for rawRead: " + readingMsg);
    }
    async rawWrite(endpoint, data, writeWithResponse) {
        this.checkAllowedMessageType(ButtplugDeviceMessageType.RawWriteCmd);
        await Object(_ffi__WEBPACK_IMPORTED_MODULE_3__["rawWrite"])(this._sorter, this._devicePtr, endpoint, data, writeWithResponse);
    }
    async rawSubscribe(endpoint) {
        this.checkAllowedMessageType(ButtplugDeviceMessageType.RawSubscribeCmd);
        await Object(_ffi__WEBPACK_IMPORTED_MODULE_3__["rawSubscribe"])(this._sorter, this._devicePtr, endpoint);
    }
    async rawUnsubscribe(endpoint) {
        this.checkAllowedMessageType(ButtplugDeviceMessageType.RawUnsubscribeCmd);
        await Object(_ffi__WEBPACK_IMPORTED_MODULE_3__["rawUnsubscribe"])(this._sorter, this._devicePtr, endpoint);
    }
    async stop() {
        await Object(_ffi__WEBPACK_IMPORTED_MODULE_3__["stopDevice"])(this._sorter, this._devicePtr);
    }
    emitDisconnected() {
        this.emit("deviceremoved");
    }
}


/***/ }),

/***/ "./src/errors.ts":
/*!***********************!*\
  !*** ./src/errors.ts ***!
  \***********************/
/*! exports provided: ButtplugError, ButtplugHandshakeError, ButtplugDeviceError, ButtplugMessageError, ButtplugPingError, ButtplugUnknownError, ButtplugClientConnectorError, convertPBufError */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ButtplugError", function() { return ButtplugError; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ButtplugHandshakeError", function() { return ButtplugHandshakeError; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ButtplugDeviceError", function() { return ButtplugDeviceError; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ButtplugMessageError", function() { return ButtplugMessageError; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ButtplugPingError", function() { return ButtplugPingError; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ButtplugUnknownError", function() { return ButtplugUnknownError; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ButtplugClientConnectorError", function() { return ButtplugClientConnectorError; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "convertPBufError", function() { return convertPBufError; });
/* harmony import */ var _buttplug_ffi__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./buttplug_ffi */ "./src/buttplug_ffi.js");
/* harmony import */ var _buttplug_ffi__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_buttplug_ffi__WEBPACK_IMPORTED_MODULE_0__);

class ButtplugError extends Error {
    constructor(aMessage, aId = 0, aInner) {
        super(aMessage);
        this.innerError = aInner;
        this.messageId = aId;
    }
}
class ButtplugHandshakeError extends ButtplugError {
    constructor(aMessage, aId = 0) {
        super(aMessage, aId);
    }
}
class ButtplugDeviceError extends ButtplugError {
    constructor(aMessage, aId = 0) {
        super(aMessage, aId);
    }
}
class ButtplugMessageError extends ButtplugError {
    constructor(aMessage, aId = 0) {
        super(aMessage, aId);
    }
}
class ButtplugPingError extends ButtplugError {
    constructor(aMessage, aId = 0) {
        super(aMessage, aId);
    }
}
class ButtplugUnknownError extends ButtplugError {
    constructor(aMessage, aId = 0) {
        super(aMessage, aId);
    }
}
class ButtplugClientConnectorError extends ButtplugError {
    constructor(aMessage, aId = 0) {
        super(aMessage, aId);
    }
}
function convertPBufError(err, id) {
    if (err.errorType === _buttplug_ffi__WEBPACK_IMPORTED_MODULE_0__["Buttplug"].ServerMessage.ButtplugErrorType.ButtplugConnectorError) {
        return new ButtplugClientConnectorError(err.message, id);
    }
    if (err.errorType === _buttplug_ffi__WEBPACK_IMPORTED_MODULE_0__["Buttplug"].ServerMessage.ButtplugErrorType.ButtplugDeviceError) {
        return new ButtplugDeviceError(err.message, id);
    }
    if (err.errorType === _buttplug_ffi__WEBPACK_IMPORTED_MODULE_0__["Buttplug"].ServerMessage.ButtplugErrorType.ButtplugHandshakeError) {
        return new ButtplugHandshakeError(err.message, id);
    }
    if (err.errorType === _buttplug_ffi__WEBPACK_IMPORTED_MODULE_0__["Buttplug"].ServerMessage.ButtplugErrorType.ButtplugMessageError) {
        return new ButtplugMessageError(err.message, id);
    }
    if (err.errorType === _buttplug_ffi__WEBPACK_IMPORTED_MODULE_0__["Buttplug"].ServerMessage.ButtplugErrorType.ButtplugPingError) {
        return new ButtplugPingError(err.message, id);
    }
    if (err.errorType === _buttplug_ffi__WEBPACK_IMPORTED_MODULE_0__["Buttplug"].ServerMessage.ButtplugErrorType.ButtplugUnknownError) {
        return new ButtplugUnknownError(err.message, id);
    }
    throw new ButtplugUnknownError("Cannot convert error: " + err);
}


/***/ }),

/***/ "./src/ffi.ts":
/*!********************!*\
  !*** ./src/ffi.ts ***!
  \********************/
/*! exports provided: buttplugInit, connectEmbedded, connectWebsocket, disconnect, startScanning, stopScanning, stopAllDevices, vibrate, rotate, linear, stopDevice, batteryLevel, rssiLevel, rawRead, rawWrite, rawSubscribe, rawUnsubscribe, createClientPtr, createDevicePtr, freeClientPtr, freeDevicePtr, activateConsoleLogger */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(Buffer) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "buttplugInit", function() { return buttplugInit; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "connectEmbedded", function() { return connectEmbedded; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "connectWebsocket", function() { return connectWebsocket; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "disconnect", function() { return disconnect; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "startScanning", function() { return startScanning; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "stopScanning", function() { return stopScanning; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "stopAllDevices", function() { return stopAllDevices; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "vibrate", function() { return vibrate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rotate", function() { return rotate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "linear", function() { return linear; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "stopDevice", function() { return stopDevice; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "batteryLevel", function() { return batteryLevel; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rssiLevel", function() { return rssiLevel; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rawRead", function() { return rawRead; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rawWrite", function() { return rawWrite; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rawSubscribe", function() { return rawSubscribe; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rawUnsubscribe", function() { return rawUnsubscribe; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createClientPtr", function() { return createClientPtr; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createDevicePtr", function() { return createDevicePtr; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "freeClientPtr", function() { return freeClientPtr; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "freeDevicePtr", function() { return freeDevicePtr; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "activateConsoleLogger", function() { return activateConsoleLogger; });
/* harmony import */ var _buttplug_ffi__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./buttplug_ffi */ "./src/buttplug_ffi.js");
/* harmony import */ var _buttplug_ffi__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_buttplug_ffi__WEBPACK_IMPORTED_MODULE_0__);

function must_run_init_1(a) {
    throw new Error("Must run buttplugInit() async before calling any Buttplug methods!");
}
function must_run_init_2(a, b) {
    throw new Error("Must run buttplugInit() async before calling any Buttplug methods!");
}
// import { buttplug_create_client, buttplug_free_client, buttplug_parse_client_message, buttplug_activate_env_logger, buttplug_free_device, buttplug_create_device, buttplug_parse_device_message } from "./buttplug-rs-ffi/buttplug_rs_ffi";
let buttplug_create_client = must_run_init_2;
let buttplug_free_client = must_run_init_1;
let buttplug_parse_client_message = must_run_init_2;
let buttplug_activate_env_logger = must_run_init_1;
let buttplug_free_device = must_run_init_1;
let buttplug_create_device = must_run_init_2;
let buttplug_parse_device_message = must_run_init_2;
let buttplug_has_init_run = false;
async function buttplugInit() {
    if (buttplug_has_init_run) {
        console.log("buttplugInit function has already run successfully. This only needs to be run once, but doesn't affect anything (other than printing this message) if called again.");
        return;
    }
    let index = await __webpack_require__.e(/*! import() */ 0).then(__webpack_require__.bind(null, /*! ./buttplug-rs-ffi/buttplug_rs_ffi */ "./src/buttplug-rs-ffi/buttplug_rs_ffi.js")).catch((e) => {
        console.log(e);
        return Promise.reject(e);
    });
    console.log(index);
    buttplug_create_client = index.buttplug_create_client;
    buttplug_free_client = index.buttplug_free_client;
    buttplug_parse_client_message = index.buttplug_parse_client_message;
    buttplug_activate_env_logger = index.buttplug_activate_env_logger;
    buttplug_free_device = index.buttplug_free_device;
    buttplug_create_device = index.buttplug_create_device;
    buttplug_parse_device_message = index.buttplug_parse_device_message;
    buttplug_has_init_run = true;
}
function sendClientMessage(sorter, clientPtr, message) {
    let promise = sorter.PrepareOutgoingMessage(message);
    let buffer = Buffer.from(_buttplug_ffi__WEBPACK_IMPORTED_MODULE_0__["Buttplug"].ClientMessage.encode(message).finish());
    buttplug_parse_client_message(clientPtr, buffer);
    return promise;
}
function connectEmbedded(sorter, clientPtr, options) {
    let msg = _buttplug_ffi__WEBPACK_IMPORTED_MODULE_0__["Buttplug"].ClientMessage.create({
        message: _buttplug_ffi__WEBPACK_IMPORTED_MODULE_0__["Buttplug"].ClientMessage.FFIMessage.create({
            connectLocal: _buttplug_ffi__WEBPACK_IMPORTED_MODULE_0__["Buttplug"].ClientMessage.ConnectLocal.create({
                serverName: options.ServerName,
                allowRawMessages: options.AllowRawMessages,
                deviceConfigurationJson: options.DeviceConfigJSON,
                userDeviceConfigurationJson: options.UserDeviceConfigJSON,
                commManagerTypes: options.DeviceCommunicationManagerTypes,
                maxPingTime: options.MaxPingTime
            })
        }),
        id: 1
    });
    return sendClientMessage(sorter, clientPtr, msg);
}
function connectWebsocket(sorter, clientPtr, options) {
    let msg = _buttplug_ffi__WEBPACK_IMPORTED_MODULE_0__["Buttplug"].ClientMessage.create({
        message: _buttplug_ffi__WEBPACK_IMPORTED_MODULE_0__["Buttplug"].ClientMessage.FFIMessage.create({
            connectWebsocket: _buttplug_ffi__WEBPACK_IMPORTED_MODULE_0__["Buttplug"].ClientMessage.ConnectWebsocket.create({
                address: options.Address
            })
        }),
        id: 1
    });
    return sendClientMessage(sorter, clientPtr, msg);
}
function disconnect(sorter, clientPtr) {
    let msg = _buttplug_ffi__WEBPACK_IMPORTED_MODULE_0__["Buttplug"].ClientMessage.create({
        message: _buttplug_ffi__WEBPACK_IMPORTED_MODULE_0__["Buttplug"].ClientMessage.FFIMessage.create({
            disconnect: _buttplug_ffi__WEBPACK_IMPORTED_MODULE_0__["Buttplug"].ClientMessage.Disconnect.create({})
        })
    });
    return sendClientMessage(sorter, clientPtr, msg);
}
function startScanning(sorter, clientPtr) {
    let msg = _buttplug_ffi__WEBPACK_IMPORTED_MODULE_0__["Buttplug"].ClientMessage.create({
        message: _buttplug_ffi__WEBPACK_IMPORTED_MODULE_0__["Buttplug"].ClientMessage.FFIMessage.create({
            startScanning: _buttplug_ffi__WEBPACK_IMPORTED_MODULE_0__["Buttplug"].ClientMessage.StartScanning.create({})
        }),
        id: 1
    });
    return sendClientMessage(sorter, clientPtr, msg);
}
function stopScanning(sorter, clientPtr) {
    let msg = _buttplug_ffi__WEBPACK_IMPORTED_MODULE_0__["Buttplug"].ClientMessage.create({
        message: _buttplug_ffi__WEBPACK_IMPORTED_MODULE_0__["Buttplug"].ClientMessage.FFIMessage.create({
            stopScanning: _buttplug_ffi__WEBPACK_IMPORTED_MODULE_0__["Buttplug"].ClientMessage.StopScanning.create({})
        }),
        id: 1
    });
    return sendClientMessage(sorter, clientPtr, msg);
}
function stopAllDevices(sorter, clientPtr) {
    let msg = _buttplug_ffi__WEBPACK_IMPORTED_MODULE_0__["Buttplug"].ClientMessage.create({
        message: _buttplug_ffi__WEBPACK_IMPORTED_MODULE_0__["Buttplug"].ClientMessage.FFIMessage.create({
            stopAllDevices: _buttplug_ffi__WEBPACK_IMPORTED_MODULE_0__["Buttplug"].ClientMessage.StopAllDevices.create({})
        }),
        id: 1
    });
    return sendClientMessage(sorter, clientPtr, msg);
}
function sendDeviceMessage(sorter, devicePtr, message) {
    let promise = sorter.PrepareOutgoingMessage(message);
    let buffer = Buffer.from(_buttplug_ffi__WEBPACK_IMPORTED_MODULE_0__["Buttplug"].DeviceMessage.encode(message).finish());
    buttplug_parse_device_message(devicePtr, buffer);
    return promise;
}
function vibrate(sorter, devicePtr, speeds) {
    let msg = _buttplug_ffi__WEBPACK_IMPORTED_MODULE_0__["Buttplug"].DeviceMessage.create({
        message: _buttplug_ffi__WEBPACK_IMPORTED_MODULE_0__["Buttplug"].DeviceMessage.FFIMessage.create({
            vibrateCmd: _buttplug_ffi__WEBPACK_IMPORTED_MODULE_0__["Buttplug"].DeviceMessage.VibrateCmd.create({
                speeds: speeds
            })
        }),
        id: 1
    });
    return sendDeviceMessage(sorter, devicePtr, msg);
}
function rotate(sorter, devicePtr, rotations) {
    let msg = _buttplug_ffi__WEBPACK_IMPORTED_MODULE_0__["Buttplug"].DeviceMessage.create({
        message: _buttplug_ffi__WEBPACK_IMPORTED_MODULE_0__["Buttplug"].DeviceMessage.FFIMessage.create({
            rotateCmd: _buttplug_ffi__WEBPACK_IMPORTED_MODULE_0__["Buttplug"].DeviceMessage.RotateCmd.create({
                rotations: rotations
            })
        }),
        id: 1
    });
    return sendDeviceMessage(sorter, devicePtr, msg);
}
function linear(sorter, devicePtr, vectors) {
    let msg = _buttplug_ffi__WEBPACK_IMPORTED_MODULE_0__["Buttplug"].DeviceMessage.create({
        message: _buttplug_ffi__WEBPACK_IMPORTED_MODULE_0__["Buttplug"].DeviceMessage.FFIMessage.create({
            linearCmd: _buttplug_ffi__WEBPACK_IMPORTED_MODULE_0__["Buttplug"].DeviceMessage.LinearCmd.create({
                movements: vectors
            })
        }),
        id: 1
    });
    return sendDeviceMessage(sorter, devicePtr, msg);
}
function stopDevice(sorter, devicePtr) {
    let msg = _buttplug_ffi__WEBPACK_IMPORTED_MODULE_0__["Buttplug"].DeviceMessage.create({
        message: _buttplug_ffi__WEBPACK_IMPORTED_MODULE_0__["Buttplug"].DeviceMessage.FFIMessage.create({
            stopDeviceCmd: _buttplug_ffi__WEBPACK_IMPORTED_MODULE_0__["Buttplug"].DeviceMessage.StopDeviceCmd.create({})
        }),
        id: 1
    });
    return sendDeviceMessage(sorter, devicePtr, msg);
}
function batteryLevel(sorter, devicePtr) {
    let msg = _buttplug_ffi__WEBPACK_IMPORTED_MODULE_0__["Buttplug"].DeviceMessage.create({
        message: _buttplug_ffi__WEBPACK_IMPORTED_MODULE_0__["Buttplug"].DeviceMessage.FFIMessage.create({
            batteryLevelCmd: _buttplug_ffi__WEBPACK_IMPORTED_MODULE_0__["Buttplug"].DeviceMessage.BatteryLevelCmd.create({})
        }),
        id: 1
    });
    return sendDeviceMessage(sorter, devicePtr, msg);
}
function rssiLevel(sorter, devicePtr) {
    let msg = _buttplug_ffi__WEBPACK_IMPORTED_MODULE_0__["Buttplug"].DeviceMessage.create({
        message: _buttplug_ffi__WEBPACK_IMPORTED_MODULE_0__["Buttplug"].DeviceMessage.FFIMessage.create({
            rssiLevelCmd: _buttplug_ffi__WEBPACK_IMPORTED_MODULE_0__["Buttplug"].DeviceMessage.RSSILevelCmd.create({})
        }),
        id: 1
    });
    return sendDeviceMessage(sorter, devicePtr, msg);
}
function rawRead(sorter, devicePtr, endpoint, expectedLength, timeout) {
    let msg = _buttplug_ffi__WEBPACK_IMPORTED_MODULE_0__["Buttplug"].DeviceMessage.create({
        message: _buttplug_ffi__WEBPACK_IMPORTED_MODULE_0__["Buttplug"].DeviceMessage.FFIMessage.create({
            rawReadCmd: _buttplug_ffi__WEBPACK_IMPORTED_MODULE_0__["Buttplug"].DeviceMessage.RawReadCmd.create({
                endpoint: endpoint,
                expectedLength: expectedLength,
                timeout: timeout
            })
        }),
        id: 1
    });
    return sendDeviceMessage(sorter, devicePtr, msg);
}
function rawWrite(sorter, devicePtr, endpoint, data, writeWithResponse) {
    let msg = _buttplug_ffi__WEBPACK_IMPORTED_MODULE_0__["Buttplug"].DeviceMessage.create({
        message: _buttplug_ffi__WEBPACK_IMPORTED_MODULE_0__["Buttplug"].DeviceMessage.FFIMessage.create({
            rawWriteCmd: _buttplug_ffi__WEBPACK_IMPORTED_MODULE_0__["Buttplug"].DeviceMessage.RawWriteCmd.create({
                endpoint: endpoint,
                data: data,
                writeWithResponse: writeWithResponse
            })
        }),
        id: 1
    });
    return sendDeviceMessage(sorter, devicePtr, msg);
}
function rawSubscribe(sorter, devicePtr, endpoint) {
    let msg = _buttplug_ffi__WEBPACK_IMPORTED_MODULE_0__["Buttplug"].DeviceMessage.create({
        message: _buttplug_ffi__WEBPACK_IMPORTED_MODULE_0__["Buttplug"].DeviceMessage.FFIMessage.create({
            rawSubscribeCmd: _buttplug_ffi__WEBPACK_IMPORTED_MODULE_0__["Buttplug"].DeviceMessage.RawSubscribeCmd.create({
                endpoint: endpoint
            })
        }),
        id: 1
    });
    return sendDeviceMessage(sorter, devicePtr, msg);
}
function rawUnsubscribe(sorter, devicePtr, endpoint) {
    let msg = _buttplug_ffi__WEBPACK_IMPORTED_MODULE_0__["Buttplug"].DeviceMessage.create({
        message: _buttplug_ffi__WEBPACK_IMPORTED_MODULE_0__["Buttplug"].DeviceMessage.FFIMessage.create({
            rawUnsubscribeCmd: _buttplug_ffi__WEBPACK_IMPORTED_MODULE_0__["Buttplug"].DeviceMessage.RawUnsubscribeCmd.create({
                endpoint: endpoint
            })
        }),
        id: 1
    });
    return sendDeviceMessage(sorter, devicePtr, msg);
}
function createClientPtr(eventCallback, clientName) {
    return buttplug_create_client(eventCallback, clientName);
}
function createDevicePtr(clientPtr, deviceIndex) {
    return buttplug_create_device(clientPtr, deviceIndex);
}
function freeClientPtr(clientPtr) {
    buttplug_free_client(clientPtr);
}
function freeDevicePtr(devicePtr) {
    buttplug_free_device(devicePtr);
}
function activateConsoleLogger(logLevel) {
    buttplug_activate_env_logger(logLevel);
}
/*
export function addLogHandler(logCallback: Function, logLevel: "error" | "warn" | "info" | "debug" | "trace", useJSON: boolean) {
  buttplug_add_log_handler(logCallback, logLevel, useJSON);
}
*/ 

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../node_modules/buffer/index.js */ "./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./src/index.ts":
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
/*! exports provided: ButtplugClient, ButtplugEmbeddedConnectorOptions, ButtplugWebsocketConnectorOptions, ButtplugDeviceMessageType, MessageAttributes, VibrationCmd, RotationCmd, VectorCmd, ButtplugClientDevice, ButtplugError, ButtplugHandshakeError, ButtplugDeviceError, ButtplugMessageError, ButtplugPingError, ButtplugUnknownError, ButtplugClientConnectorError, convertPBufError, buttplugInit, connectEmbedded, connectWebsocket, disconnect, startScanning, stopScanning, stopAllDevices, vibrate, rotate, linear, stopDevice, batteryLevel, rssiLevel, rawRead, rawWrite, rawSubscribe, rawUnsubscribe, createClientPtr, createDevicePtr, freeClientPtr, freeDevicePtr, activateConsoleLogger, ButtplugMessageSorter, Endpoint */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Endpoint", function() { return Endpoint; });
/* harmony import */ var _client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./client */ "./src/client.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ButtplugClient", function() { return _client__WEBPACK_IMPORTED_MODULE_0__["ButtplugClient"]; });

/* harmony import */ var _connectors__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./connectors */ "./src/connectors.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ButtplugEmbeddedConnectorOptions", function() { return _connectors__WEBPACK_IMPORTED_MODULE_1__["ButtplugEmbeddedConnectorOptions"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ButtplugWebsocketConnectorOptions", function() { return _connectors__WEBPACK_IMPORTED_MODULE_1__["ButtplugWebsocketConnectorOptions"]; });

/* harmony import */ var _device__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./device */ "./src/device.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ButtplugDeviceMessageType", function() { return _device__WEBPACK_IMPORTED_MODULE_2__["ButtplugDeviceMessageType"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "MessageAttributes", function() { return _device__WEBPACK_IMPORTED_MODULE_2__["MessageAttributes"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "VibrationCmd", function() { return _device__WEBPACK_IMPORTED_MODULE_2__["VibrationCmd"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "RotationCmd", function() { return _device__WEBPACK_IMPORTED_MODULE_2__["RotationCmd"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "VectorCmd", function() { return _device__WEBPACK_IMPORTED_MODULE_2__["VectorCmd"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ButtplugClientDevice", function() { return _device__WEBPACK_IMPORTED_MODULE_2__["ButtplugClientDevice"]; });

/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./errors */ "./src/errors.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ButtplugError", function() { return _errors__WEBPACK_IMPORTED_MODULE_3__["ButtplugError"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ButtplugHandshakeError", function() { return _errors__WEBPACK_IMPORTED_MODULE_3__["ButtplugHandshakeError"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ButtplugDeviceError", function() { return _errors__WEBPACK_IMPORTED_MODULE_3__["ButtplugDeviceError"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ButtplugMessageError", function() { return _errors__WEBPACK_IMPORTED_MODULE_3__["ButtplugMessageError"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ButtplugPingError", function() { return _errors__WEBPACK_IMPORTED_MODULE_3__["ButtplugPingError"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ButtplugUnknownError", function() { return _errors__WEBPACK_IMPORTED_MODULE_3__["ButtplugUnknownError"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ButtplugClientConnectorError", function() { return _errors__WEBPACK_IMPORTED_MODULE_3__["ButtplugClientConnectorError"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "convertPBufError", function() { return _errors__WEBPACK_IMPORTED_MODULE_3__["convertPBufError"]; });

/* harmony import */ var _ffi__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./ffi */ "./src/ffi.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "buttplugInit", function() { return _ffi__WEBPACK_IMPORTED_MODULE_4__["buttplugInit"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "connectEmbedded", function() { return _ffi__WEBPACK_IMPORTED_MODULE_4__["connectEmbedded"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "connectWebsocket", function() { return _ffi__WEBPACK_IMPORTED_MODULE_4__["connectWebsocket"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "disconnect", function() { return _ffi__WEBPACK_IMPORTED_MODULE_4__["disconnect"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "startScanning", function() { return _ffi__WEBPACK_IMPORTED_MODULE_4__["startScanning"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "stopScanning", function() { return _ffi__WEBPACK_IMPORTED_MODULE_4__["stopScanning"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "stopAllDevices", function() { return _ffi__WEBPACK_IMPORTED_MODULE_4__["stopAllDevices"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "vibrate", function() { return _ffi__WEBPACK_IMPORTED_MODULE_4__["vibrate"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "rotate", function() { return _ffi__WEBPACK_IMPORTED_MODULE_4__["rotate"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "linear", function() { return _ffi__WEBPACK_IMPORTED_MODULE_4__["linear"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "stopDevice", function() { return _ffi__WEBPACK_IMPORTED_MODULE_4__["stopDevice"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "batteryLevel", function() { return _ffi__WEBPACK_IMPORTED_MODULE_4__["batteryLevel"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "rssiLevel", function() { return _ffi__WEBPACK_IMPORTED_MODULE_4__["rssiLevel"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "rawRead", function() { return _ffi__WEBPACK_IMPORTED_MODULE_4__["rawRead"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "rawWrite", function() { return _ffi__WEBPACK_IMPORTED_MODULE_4__["rawWrite"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "rawSubscribe", function() { return _ffi__WEBPACK_IMPORTED_MODULE_4__["rawSubscribe"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "rawUnsubscribe", function() { return _ffi__WEBPACK_IMPORTED_MODULE_4__["rawUnsubscribe"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "createClientPtr", function() { return _ffi__WEBPACK_IMPORTED_MODULE_4__["createClientPtr"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "createDevicePtr", function() { return _ffi__WEBPACK_IMPORTED_MODULE_4__["createDevicePtr"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "freeClientPtr", function() { return _ffi__WEBPACK_IMPORTED_MODULE_4__["freeClientPtr"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "freeDevicePtr", function() { return _ffi__WEBPACK_IMPORTED_MODULE_4__["freeDevicePtr"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "activateConsoleLogger", function() { return _ffi__WEBPACK_IMPORTED_MODULE_4__["activateConsoleLogger"]; });

/* harmony import */ var _sorter__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./sorter */ "./src/sorter.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ButtplugMessageSorter", function() { return _sorter__WEBPACK_IMPORTED_MODULE_5__["ButtplugMessageSorter"]; });

/* harmony import */ var _buttplug_ffi__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./buttplug_ffi */ "./src/buttplug_ffi.js");
/* harmony import */ var _buttplug_ffi__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_buttplug_ffi__WEBPACK_IMPORTED_MODULE_6__);
/*!
 * Buttplug WASM Source Code File - Visit https://buttplug.io for more info about
 * the project. Licensed under the BSD 3-Clause license. See LICENSE file in the
 * project root for full license information.
 *
 * @copyright Copyright 2020-2021 (c) Nonpolynomial Labs LLC. All rights reserved.
 */







var Endpoint = _buttplug_ffi__WEBPACK_IMPORTED_MODULE_6__["Buttplug"].Endpoint;


/***/ }),

/***/ "./src/sorter.ts":
/*!***********************!*\
  !*** ./src/sorter.ts ***!
  \***********************/
/*! exports provided: ButtplugMessageSorter */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ButtplugMessageSorter", function() { return ButtplugMessageSorter; });
/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./errors */ "./src/errors.ts");
/*!
 * Buttplug JS Source Code File - Visit https://buttplug.io for more info about
 * the project. Licensed under the BSD 3-Clause license. See LICENSE file in the
 * project root for full license information.
 *
 * @copyright Copyright (c) Nonpolynomial Labs LLC. All rights reserved.
 */

class ButtplugMessageSorter {
    constructor() {
        this._counter = 1;
        this._waitingMsgs = new Map();
    }
    // One of the places we should actually return a promise, as we need to store
    // them while waiting for them to return across the line.
    // tslint:disable:promise-function-async
    PrepareOutgoingMessage(aMsg) {
        aMsg.id = this._counter;
        // Always increment last, otherwise we might lose sync
        this._counter += 1;
        let res;
        let rej;
        const msgPromise = new Promise((resolve, reject) => { res = resolve; rej = reject; });
        this._waitingMsgs.set(aMsg.id, [res, rej]);
        return msgPromise;
    }
    ParseIncomingMessages(msg) {
        var _a, _b, _c, _d;
        if (msg.id !== 0 && this._waitingMsgs.has(msg.id)) {
            const [res, rej] = this._waitingMsgs.get(msg.id);
            // If we've gotten back an error, reject the related promise using a
            // ButtplugException derived type.
            if ((_b = (_a = msg.message) === null || _a === void 0 ? void 0 : _a.serverMessage) === null || _b === void 0 ? void 0 : _b.error) {
                rej(Object(_errors__WEBPACK_IMPORTED_MODULE_0__["convertPBufError"])((_d = (_c = msg.message) === null || _c === void 0 ? void 0 : _c.serverMessage) === null || _d === void 0 ? void 0 : _d.error, msg.id));
                return null;
            }
            res(msg);
            return null;
        }
        return msg;
    }
}


/***/ }),

/***/ "./src/web_index.ts":
/*!**************************!*\
  !*** ./src/web_index.ts ***!
  \**************************/
/*! exports provided: ButtplugClient, ButtplugEmbeddedConnectorOptions, ButtplugWebsocketConnectorOptions, ButtplugDeviceMessageType, MessageAttributes, VibrationCmd, RotationCmd, VectorCmd, ButtplugClientDevice, ButtplugError, ButtplugHandshakeError, ButtplugDeviceError, ButtplugMessageError, ButtplugPingError, ButtplugUnknownError, ButtplugClientConnectorError, convertPBufError, buttplugInit, connectEmbedded, connectWebsocket, disconnect, startScanning, stopScanning, stopAllDevices, vibrate, rotate, linear, stopDevice, batteryLevel, rssiLevel, rawRead, rawWrite, rawSubscribe, rawUnsubscribe, createClientPtr, createDevicePtr, freeClientPtr, freeDevicePtr, activateConsoleLogger, ButtplugMessageSorter, Endpoint */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index */ "./src/index.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ButtplugClient", function() { return _index__WEBPACK_IMPORTED_MODULE_0__["ButtplugClient"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ButtplugEmbeddedConnectorOptions", function() { return _index__WEBPACK_IMPORTED_MODULE_0__["ButtplugEmbeddedConnectorOptions"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ButtplugWebsocketConnectorOptions", function() { return _index__WEBPACK_IMPORTED_MODULE_0__["ButtplugWebsocketConnectorOptions"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ButtplugDeviceMessageType", function() { return _index__WEBPACK_IMPORTED_MODULE_0__["ButtplugDeviceMessageType"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "MessageAttributes", function() { return _index__WEBPACK_IMPORTED_MODULE_0__["MessageAttributes"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "VibrationCmd", function() { return _index__WEBPACK_IMPORTED_MODULE_0__["VibrationCmd"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "RotationCmd", function() { return _index__WEBPACK_IMPORTED_MODULE_0__["RotationCmd"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "VectorCmd", function() { return _index__WEBPACK_IMPORTED_MODULE_0__["VectorCmd"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ButtplugClientDevice", function() { return _index__WEBPACK_IMPORTED_MODULE_0__["ButtplugClientDevice"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ButtplugError", function() { return _index__WEBPACK_IMPORTED_MODULE_0__["ButtplugError"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ButtplugHandshakeError", function() { return _index__WEBPACK_IMPORTED_MODULE_0__["ButtplugHandshakeError"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ButtplugDeviceError", function() { return _index__WEBPACK_IMPORTED_MODULE_0__["ButtplugDeviceError"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ButtplugMessageError", function() { return _index__WEBPACK_IMPORTED_MODULE_0__["ButtplugMessageError"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ButtplugPingError", function() { return _index__WEBPACK_IMPORTED_MODULE_0__["ButtplugPingError"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ButtplugUnknownError", function() { return _index__WEBPACK_IMPORTED_MODULE_0__["ButtplugUnknownError"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ButtplugClientConnectorError", function() { return _index__WEBPACK_IMPORTED_MODULE_0__["ButtplugClientConnectorError"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "convertPBufError", function() { return _index__WEBPACK_IMPORTED_MODULE_0__["convertPBufError"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "buttplugInit", function() { return _index__WEBPACK_IMPORTED_MODULE_0__["buttplugInit"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "connectEmbedded", function() { return _index__WEBPACK_IMPORTED_MODULE_0__["connectEmbedded"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "connectWebsocket", function() { return _index__WEBPACK_IMPORTED_MODULE_0__["connectWebsocket"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "disconnect", function() { return _index__WEBPACK_IMPORTED_MODULE_0__["disconnect"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "startScanning", function() { return _index__WEBPACK_IMPORTED_MODULE_0__["startScanning"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "stopScanning", function() { return _index__WEBPACK_IMPORTED_MODULE_0__["stopScanning"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "stopAllDevices", function() { return _index__WEBPACK_IMPORTED_MODULE_0__["stopAllDevices"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "vibrate", function() { return _index__WEBPACK_IMPORTED_MODULE_0__["vibrate"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "rotate", function() { return _index__WEBPACK_IMPORTED_MODULE_0__["rotate"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "linear", function() { return _index__WEBPACK_IMPORTED_MODULE_0__["linear"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "stopDevice", function() { return _index__WEBPACK_IMPORTED_MODULE_0__["stopDevice"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "batteryLevel", function() { return _index__WEBPACK_IMPORTED_MODULE_0__["batteryLevel"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "rssiLevel", function() { return _index__WEBPACK_IMPORTED_MODULE_0__["rssiLevel"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "rawRead", function() { return _index__WEBPACK_IMPORTED_MODULE_0__["rawRead"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "rawWrite", function() { return _index__WEBPACK_IMPORTED_MODULE_0__["rawWrite"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "rawSubscribe", function() { return _index__WEBPACK_IMPORTED_MODULE_0__["rawSubscribe"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "rawUnsubscribe", function() { return _index__WEBPACK_IMPORTED_MODULE_0__["rawUnsubscribe"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "createClientPtr", function() { return _index__WEBPACK_IMPORTED_MODULE_0__["createClientPtr"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "createDevicePtr", function() { return _index__WEBPACK_IMPORTED_MODULE_0__["createDevicePtr"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "freeClientPtr", function() { return _index__WEBPACK_IMPORTED_MODULE_0__["freeClientPtr"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "freeDevicePtr", function() { return _index__WEBPACK_IMPORTED_MODULE_0__["freeDevicePtr"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "activateConsoleLogger", function() { return _index__WEBPACK_IMPORTED_MODULE_0__["activateConsoleLogger"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ButtplugMessageSorter", function() { return _index__WEBPACK_IMPORTED_MODULE_0__["ButtplugMessageSorter"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Endpoint", function() { return _index__WEBPACK_IMPORTED_MODULE_0__["Endpoint"]; });

/*!
 * Buttplug WASM Source Code File - Visit https://buttplug.io for more info about
 * the project. Licensed under the BSD 3-Clause license. See LICENSE file in the
 * project root for full license information.
 *
 * @copyright Copyright 2020-2021 (c) Nonpolynomial Labs LLC. All rights reserved.
 */
var scripts = document.getElementsByTagName("script");
var lastScript = 'https://cdn.jsdelivr.net/npm/buttplug@latest/dist/web/buttplug.js';
__webpack_require__.p = lastScript.substr(0, lastScript.lastIndexOf('/') + 1);



/***/ })

/******/ });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,